
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08010834  08010834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c44  08010c44  000121b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010c44  08010c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c4c  08010c4c  000121b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c4c  08010c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010c50  08010c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  08010c54  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121b0  2**0
                  CONTENTS
 10 .bss          00008b00  200001b0  200001b0  000121b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008cb0  20008cb0  000121b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a3f  00000000  00000000  000121e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000624e  00000000  00000000  00033c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f40  00000000  00000000  00039e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001975  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c49  00000000  00000000  0003d725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fde  00000000  00000000  0006636e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db944  00000000  00000000  0009034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016bc90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c2c  00000000  00000000  0016bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00174900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00000814  00000000  00000000  0017494c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801081c 	.word	0x0801081c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	0801081c 	.word	0x0801081c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <mainApp>:

uint8_t data[32];
int32_t remain = 0;

void mainApp(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
	litelink = newLiteLink(1, 10, 62, "Vcar",Event_UsbSend);
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <mainApp+0x70>)
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <mainApp+0x74>)
 800057c:	223e      	movs	r2, #62	@ 0x3e
 800057e:	210a      	movs	r1, #10
 8000580:	2001      	movs	r0, #1
 8000582:	f007 fb47 	bl	8007c14 <newLiteLink>
 8000586:	4603      	mov	r3, r0
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <mainApp+0x78>)
 800058a:	6013      	str	r3, [r2, #0]

	usb_send = newFifo(0xFF);
 800058c:	20ff      	movs	r0, #255	@ 0xff
 800058e:	f007 fa55 	bl	8007a3c <newFifo>
 8000592:	4603      	mov	r3, r0
 8000594:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <mainApp+0x7c>)
 8000596:	6013      	str	r3, [r2, #0]

	xTaskCreate(FileMng_Task, "file_manager", 2048, NULL, 7, &FileMng_handler);
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <mainApp+0x80>)
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2307      	movs	r3, #7
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005a6:	4913      	ldr	r1, [pc, #76]	@ (80005f4 <mainApp+0x84>)
 80005a8:	4813      	ldr	r0, [pc, #76]	@ (80005f8 <mainApp+0x88>)
 80005aa:	f00d faa9 	bl	800db00 <xTaskCreate>
	xTaskCreate(LLnet_Task, "ROUTER", 1024, NULL, 7, &MCP_handler);
 80005ae:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <mainApp+0x8c>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2307      	movs	r3, #7
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005bc:	4910      	ldr	r1, [pc, #64]	@ (8000600 <mainApp+0x90>)
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <mainApp+0x94>)
 80005c0:	f00d fa9e 	bl	800db00 <xTaskCreate>
	xTaskCreate(USB_Task, "USB", 1024, NULL, 8, &USB_handler);
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <mainApp+0x98>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2308      	movs	r3, #8
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005d2:	490e      	ldr	r1, [pc, #56]	@ (800060c <mainApp+0x9c>)
 80005d4:	480e      	ldr	r0, [pc, #56]	@ (8000610 <mainApp+0xa0>)
 80005d6:	f00d fa93 	bl	800db00 <xTaskCreate>

//	HAL_TIM_Base_Start_IT(&htim6);



	while(1)
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <mainApp+0x6a>
 80005de:	bf00      	nop
 80005e0:	08000615 	.word	0x08000615
 80005e4:	080108b4 	.word	0x080108b4
 80005e8:	200001d8 	.word	0x200001d8
 80005ec:	200001dc 	.word	0x200001dc
 80005f0:	200001d4 	.word	0x200001d4
 80005f4:	080108bc 	.word	0x080108bc
 80005f8:	08000699 	.word	0x08000699
 80005fc:	200001cc 	.word	0x200001cc
 8000600:	080108cc 	.word	0x080108cc
 8000604:	08000635 	.word	0x08000635
 8000608:	200001d0 	.word	0x200001d0
 800060c:	080108d4 	.word	0x080108d4
 8000610:	08000655 	.word	0x08000655

08000614 <Event_UsbSend>:
	{
	}
}

void Event_UsbSend(uint8_t *data, uint8_t length)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(data, length);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	b29b      	uxth	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f00e fbdc 	bl	800ede4 <CDC_Transmit_FS>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <LLnet_Task>:



void LLnet_Task (void *pvParameters)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
//	xTaskCreate(USB_Task, "USB", 10 * 1024, NULL, 8, &USB_handler);
	for( ;; )
	{

		LiteLink_Process(litelink);
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <LLnet_Task+0x1c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f007 ffa3 	bl	800858c <LiteLink_Process>
		vTaskDelay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f00d fb8e 	bl	800dd68 <vTaskDelay>
		LiteLink_Process(litelink);
 800064c:	bf00      	nop
 800064e:	e7f5      	b.n	800063c <LLnet_Task+0x8>
 8000650:	200001d8 	.word	0x200001d8

08000654 <USB_Task>:
	}
}

void USB_Task(void *pvParameters)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[64];
	uint16_t length = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	81fb      	strh	r3, [r7, #14]
	for(;;)
	{

		if(Get_toContain(&Usb_containData, data, &length) == LL_OK)
 8000660:	f107 020e 	add.w	r2, r7, #14
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <USB_Task+0x3c>)
 800066c:	f000 f934 	bl	80008d8 <Get_toContain>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d107      	bne.n	8000686 <USB_Task+0x32>
		{
			LiteLink_InboundMessage(litelink, data, length);
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <USB_Task+0x40>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	89fa      	ldrh	r2, [r7, #14]
 800067c:	f107 0110 	add.w	r1, r7, #16
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fca3 	bl	8007fcc <LiteLink_InboundMessage>
		}
		vTaskDelay(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f00d fb6e 	bl	800dd68 <vTaskDelay>
		if(Get_toContain(&Usb_containData, data, &length) == LL_OK)
 800068c:	e7e8      	b.n	8000660 <USB_Task+0xc>
 800068e:	bf00      	nop
 8000690:	200001e8 	.word	0x200001e8
 8000694:	200001d8 	.word	0x200001d8

08000698 <FileMng_Task>:
LiteLink_Service *File_service;
Fifo * Fifo_File;


void FileMng_Task (void *pvParameters)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	File_service = LiteLink_uListen(litelink, "File", 55);
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <FileMng_Task+0x94>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2237      	movs	r2, #55	@ 0x37
 80006a6:	4922      	ldr	r1, [pc, #136]	@ (8000730 <FileMng_Task+0x98>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f007 fb10 	bl	8007cce <LiteLink_uListen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <FileMng_Task+0x9c>)
 80006b2:	6013      	str	r3, [r2, #0]
	LiteLink_onMessage(File_service, File_service_onMess);
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <FileMng_Task+0x9c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	491f      	ldr	r1, [pc, #124]	@ (8000738 <FileMng_Task+0xa0>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 faf6 	bl	8007cac <LiteLink_onMessage>
	Fifo_File = newFifo(50);
 80006c0:	2032      	movs	r0, #50	@ 0x32
 80006c2:	f007 f9bb 	bl	8007a3c <newFifo>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <FileMng_Task+0xa4>)
 80006ca:	6013      	str	r3, [r2, #0]

	FileMng_init();
 80006cc:	f006 fbf4 	bl	8006eb8 <FileMng_init>

	respond_addEvent(Send_respond);
 80006d0:	481b      	ldr	r0, [pc, #108]	@ (8000740 <FileMng_Task+0xa8>)
 80006d2:	f007 f85f 	bl	8007794 <respond_addEvent>

	uint8_t *data;
	uint16_t length  = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	817b      	strh	r3, [r7, #10]
	for( ;; )
	{
		length = Fifo_GetSizeData(Fifo_File);
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <FileMng_Task+0xa4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 f8f6 	bl	80078d0 <Fifo_GetSizeData>
 80006e4:	4603      	mov	r3, r0
 80006e6:	817b      	strh	r3, [r7, #10]
		if(length > 0)
 80006e8:	897b      	ldrh	r3, [r7, #10]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d01a      	beq.n	8000724 <FileMng_Task+0x8c>
		{
			data = (uint8_t *)malloc(length);
 80006ee:	897b      	ldrh	r3, [r7, #10]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00e ffef 	bl	800f6d4 <malloc>
 80006f6:	4603      	mov	r3, r0
 80006f8:	60fb      	str	r3, [r7, #12]
			if(Fifo_GetData(Fifo_File, data, &length)== BUFF_OK)
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <FileMng_Task+0xa4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f107 020a 	add.w	r2, r7, #10
 8000702:	68f9      	ldr	r1, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f007 f909 	bl	800791c <Fifo_GetData>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <FileMng_Task+0x82>
			{
				ServiceHandle(data, length);
 8000710:	897b      	ldrh	r3, [r7, #10]
 8000712:	4619      	mov	r1, r3
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f006 fbff 	bl	8006f18 <ServiceHandle>
			}
			free(data);
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f00e ffe2 	bl	800f6e4 <free>
			data = NULL;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
		}


		vTaskDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f00d fb1f 	bl	800dd68 <vTaskDelay>
		length = Fifo_GetSizeData(Fifo_File);
 800072a:	e7d6      	b.n	80006da <FileMng_Task+0x42>
 800072c:	200001d8 	.word	0x200001d8
 8000730:	080108d8 	.word	0x080108d8
 8000734:	200001e0 	.word	0x200001e0
 8000738:	08000745 	.word	0x08000745
 800073c:	200001e4 	.word	0x200001e4
 8000740:	0800076d 	.word	0x0800076d

08000744 <File_service_onMess>:
	}
}


void File_service_onMess(LiteLink_Address src_addr, uint8_t *data, uint16_t length)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	80b8      	strh	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	4613      	mov	r3, r2
 8000750:	80fb      	strh	r3, [r7, #6]
	Fifo_AddData(Fifo_File, data, length);
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <File_service_onMess+0x24>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f007 f82a 	bl	80077b4 <Fifo_AddData>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001e4 	.word	0x200001e4

0800076c <Send_respond>:


void Send_respond(uint8_t *data, uint16_t length)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
	if(LiteLink_SendPacket(File_service, ADDR_PARNER, PORT_FILE_PARTNER, data, length) == LL_NOT_OK)
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <Send_respond+0x40>)
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2236      	movs	r2, #54	@ 0x36
 8000784:	2114      	movs	r1, #20
 8000786:	f007 fcdb 	bl	8008140 <LiteLink_SendPacket>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d108      	bne.n	80007a2 <Send_respond+0x36>
	{
		LiteLink_SendPacket(File_service, ADDR_PARNER, PORT_FILE_PARTNER, data, length);
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <Send_respond+0x40>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2236      	movs	r2, #54	@ 0x36
 800079c:	2114      	movs	r1, #20
 800079e:	f007 fccf 	bl	8008140 <LiteLink_SendPacket>
	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200001e0 	.word	0x200001e0

080007b0 <Add_toContain>:
	}
	return newContain;
}

void Add_toContain(container *_contain, uint8_t *data, uint16_t length)
{
 80007b0:	b490      	push	{r4, r7}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]

	for(uint8_t count = 0; count < length; count ++)
 80007be:	2300      	movs	r3, #0
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e016      	b.n	80007f2 <Add_toContain+0x42>
	{
		_contain->_Mess[_contain->tail].data[count] = data[count];
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80007d0:	f992 2965 	ldrsb.w	r2, [r2, #2405]	@ 0x965
 80007d4:	4610      	mov	r0, r2
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	781c      	ldrb	r4, [r3, #0]
 80007da:	68f9      	ldr	r1, [r7, #12]
 80007dc:	4603      	mov	r3, r0
 80007de:	019b      	lsls	r3, r3, #6
 80007e0:	4403      	add	r3, r0
 80007e2:	440b      	add	r3, r1
 80007e4:	4413      	add	r3, r2
 80007e6:	3301      	adds	r3, #1
 80007e8:	4622      	mov	r2, r4
 80007ea:	701a      	strb	r2, [r3, #0]
	for(uint8_t count = 0; count < length; count ++)
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	3301      	adds	r3, #1
 80007f0:	75fb      	strb	r3, [r7, #23]
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8e3      	bhi.n	80007c4 <Add_toContain+0x14>
	}
	_contain->_Mess[_contain->tail].length = length;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000802:	f993 3965 	ldrsb.w	r3, [r3, #2405]	@ 0x965
 8000806:	4619      	mov	r1, r3
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2d8      	uxtb	r0, r3
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	460b      	mov	r3, r1
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	440b      	add	r3, r1
 8000814:	4413      	add	r3, r2
 8000816:	4602      	mov	r2, r0
 8000818:	701a      	strb	r2, [r3, #0]
	_contain->tail = (_contain->tail + 1) % MAX_MESSAGE;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000820:	f993 3965 	ldrsb.w	r3, [r3, #2405]	@ 0x965
 8000824:	3301      	adds	r3, #1
 8000826:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <Add_toContain+0x124>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1151      	asrs	r1, r2, #5
 800082e:	17da      	asrs	r2, r3, #31
 8000830:	1a8a      	subs	r2, r1, r2
 8000832:	2164      	movs	r1, #100	@ 0x64
 8000834:	fb01 f202 	mul.w	r2, r1, r2
 8000838:	1a9a      	subs	r2, r3, r2
 800083a:	b252      	sxtb	r2, r2
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000842:	f883 2965 	strb.w	r2, [r3, #2405]	@ 0x965
	if(++_contain->count >= MAX_MESSAGE)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800084c:	f993 3966 	ldrsb.w	r3, [r3, #2406]	@ 0x966
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3301      	adds	r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b25a      	sxtb	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800085e:	f883 2966 	strb.w	r2, [r3, #2406]	@ 0x966
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000868:	f993 3966 	ldrsb.w	r3, [r3, #2406]	@ 0x966
 800086c:	2b63      	cmp	r3, #99	@ 0x63
 800086e:	dd05      	ble.n	800087c <Add_toContain+0xcc>
	{
		_contain->count = MAX_MESSAGE - 1;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000876:	2263      	movs	r2, #99	@ 0x63
 8000878:	f883 2966 	strb.w	r2, [r3, #2406]	@ 0x966
	}

	if (_contain->tail == _contain->head)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000882:	f993 2965 	ldrsb.w	r2, [r3, #2405]	@ 0x965
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800088c:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 8000890:	429a      	cmp	r2, r3
 8000892:	d11a      	bne.n	80008ca <Add_toContain+0x11a>
	{
		if (--_contain->tail < 0)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800089a:	f993 3965 	ldrsb.w	r3, [r3, #2405]	@ 0x965
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ac:	f883 2965 	strb.w	r2, [r3, #2405]	@ 0x965
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b6:	f993 3965 	ldrsb.w	r3, [r3, #2405]	@ 0x965
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da05      	bge.n	80008ca <Add_toContain+0x11a>
		{
			_contain->tail = MAX_MESSAGE - 1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c4:	2263      	movs	r2, #99	@ 0x63
 80008c6:	f883 2965 	strb.w	r2, [r3, #2405]	@ 0x965
		}

	}

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc90      	pop	{r4, r7}
 80008d2:	4770      	bx	lr
 80008d4:	51eb851f 	.word	0x51eb851f

080008d8 <Get_toContain>:

uint8_t Get_toContain(container *_contain, uint8_t *data, uint16_t *length)
{
 80008d8:	b490      	push	{r4, r7}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	if(_contain->head == _contain->tail)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ea:	f993 2964 	ldrsb.w	r2, [r3, #2404]	@ 0x964
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f4:	f993 3965 	ldrsb.w	r3, [r3, #2405]	@ 0x965
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d101      	bne.n	8000900 <Get_toContain+0x28>
	{
		return 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e071      	b.n	80009e4 <Get_toContain+0x10c>
	}
	*length = _contain->_Mess[_contain->head].length;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000906:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 800090a:	4619      	mov	r1, r3
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	460b      	mov	r3, r1
 8000910:	019b      	lsls	r3, r3, #6
 8000912:	440b      	add	r3, r1
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	801a      	strh	r2, [r3, #0]
	for(uint8_t count = 0; count < *length; count ++)
 800091e:	2300      	movs	r3, #0
 8000920:	75fb      	strb	r3, [r7, #23]
 8000922:	e015      	b.n	8000950 <Get_toContain+0x78>
	{
		data[count] = _contain->_Mess[_contain->head].data[count] ;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800092a:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 800092e:	461c      	mov	r4, r3
 8000930:	7df9      	ldrb	r1, [r7, #23]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	441a      	add	r2, r3
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	4623      	mov	r3, r4
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	4423      	add	r3, r4
 8000940:	4403      	add	r3, r0
 8000942:	440b      	add	r3, r1
 8000944:	3301      	adds	r3, #1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	7013      	strb	r3, [r2, #0]
	for(uint8_t count = 0; count < *length; count ++)
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	3301      	adds	r3, #1
 800094e:	75fb      	strb	r3, [r7, #23]
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	b29a      	uxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d3e3      	bcc.n	8000924 <Get_toContain+0x4c>
	}
	_contain->_Mess[_contain->head].length = 0;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000962:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 8000966:	4619      	mov	r1, r3
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	460b      	mov	r3, r1
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	440b      	add	r3, r1
 8000970:	4413      	add	r3, r2
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
	if(--_contain->count <= 0)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097c:	f993 3966 	ldrsb.w	r3, [r3, #2406]	@ 0x966
 8000980:	b2db      	uxtb	r3, r3
 8000982:	3b01      	subs	r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098e:	f883 2966 	strb.w	r2, [r3, #2406]	@ 0x966
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000998:	f993 3966 	ldrsb.w	r3, [r3, #2406]	@ 0x966
 800099c:	2b00      	cmp	r3, #0
 800099e:	dc05      	bgt.n	80009ac <Get_toContain+0xd4>
	{
		_contain->count = 0;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2966 	strb.w	r2, [r3, #2406]	@ 0x966
	}
	if( ++ _contain->head == MAX_MESSAGE)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009b2:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009c4:	f883 2964 	strb.w	r2, [r3, #2404]	@ 0x964
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009ce:	f993 3964 	ldrsb.w	r3, [r3, #2404]	@ 0x964
 80009d2:	2b64      	cmp	r3, #100	@ 0x64
 80009d4:	d105      	bne.n	80009e2 <Get_toContain+0x10a>
	{
		_contain->head = 0;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2964 	strb.w	r2, [r3, #2404]	@ 0x964
	}
	return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc90      	pop	{r4, r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f001 f89f 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f827 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f931 	bl	8000c64 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000a02:	f000 f8c3 	bl	8000b8c <MX_TIM6_Init>
  MX_SPI1_Init();
 8000a06:	f000 f88b 	bl	8000b20 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000a0a:	f000 f8f5 	bl	8000bf8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a14:	480a      	ldr	r0, [pc, #40]	@ (8000a40 <main+0x50>)
 8000a16:	f001 fee1 	bl	80027dc <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <main+0x54>)
 8000a1c:	1d3c      	adds	r4, r7, #4
 8000a1e:	461d      	mov	r5, r3
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00c ff78 	bl	800d922 <osThreadCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <main+0x58>)
 8000a36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a38:	f00c ff6c 	bl	800d914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <main+0x4c>
 8000a40:	40020400 	.word	0x40020400
 8000a44:	08010834 	.word	0x08010834
 8000a48:	20001c38 	.word	0x20001c38

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	@ 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	@ 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00f f871 	bl	800fb42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a27      	ldr	r2, [pc, #156]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac0:	23a8      	movs	r3, #168	@ 0xa8
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 f8ed 	bl	8003cb0 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000adc:	f000 f921 	bl	8000d22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2105      	movs	r1, #5
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fb4e 	bl	80041a0 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0a:	f000 f90a 	bl	8000d22 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	@ 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b26:	4a18      	ldr	r2, [pc, #96]	@ (8000b88 <MX_SPI1_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b54:	2220      	movs	r2, #32
 8000b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_SPI1_Init+0x64>)
 8000b72:	f003 fddb 	bl	800472c <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b7c:	f000 f8d1 	bl	8000d22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20001b50 	.word	0x20001b50
 8000b88:	40013000 	.word	0x40013000

08000b8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000b9c:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_TIM6_Init+0x68>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000ba2:	2254      	movs	r2, #84	@ 0x54
 8000ba4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000bae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bb2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000bbc:	f004 fb8c 	bl	80052d8 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000bc6:	f000 f8ac 	bl	8000d22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_TIM6_Init+0x64>)
 8000bd8:	f004 fd9c 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000be2:	f000 f89e 	bl	8000d22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20001ba8 	.word	0x20001ba8
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c08:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <MX_TIM7_Init+0x68>)
 8000c0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c0e:	2253      	movs	r2, #83	@ 0x53
 8000c10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c28:	f004 fb56 	bl	80052d8 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c32:	f000 f876 	bl	8000d22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <MX_TIM7_Init+0x64>)
 8000c44:	f004 fd66 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c4e:	f000 f868 	bl	8000d22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001bf0 	.word	0x20001bf0
 8000c60:	40001400 	.word	0x40001400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a11      	ldr	r2, [pc, #68]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd4:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <MX_GPIO_Init+0xa0>)
 8000cd6:	f001 fd81 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_GPIO_Init+0xa0>)
 8000cf4:	f001 fbd6 	bl	80024a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d10:	f00d ffa0 	bl	800ec54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  mainApp();
 8000d14:	f7ff fc2c 	bl	8000570 <mainApp>
    osDelay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f00c fe29 	bl	800d970 <osDelay>
  {
 8000d1e:	bf00      	nop
 8000d20:	e7f8      	b.n	8000d14 <StartDefaultTask+0xc>

08000d22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d26:	b672      	cpsid	i
}
 8000d28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2a:	bf00      	nop
 8000d2c:	e7fd      	b.n	8000d2a <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	f06f 0001 	mvn.w	r0, #1
 8000d76:	f001 f886 	bl	8001e86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <HAL_SPI_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_SPI_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000de2:	2338      	movs	r3, #56	@ 0x38
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_SPI_MspInit+0x8c>)
 8000dfe:	f001 fb51 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <HAL_TIM_Base_MspInit+0x80>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a1a      	ldr	r2, [pc, #104]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2106      	movs	r1, #6
 8000e4a:	2036      	movs	r0, #54	@ 0x36
 8000e4c:	f001 f81b 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e50:	2036      	movs	r0, #54	@ 0x36
 8000e52:	f001 f834 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e56:	e01a      	b.n	8000e8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x88>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d115      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2106      	movs	r1, #6
 8000e82:	2037      	movs	r0, #55	@ 0x37
 8000e84:	f000 ffff 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e88:	2037      	movs	r0, #55	@ 0x37
 8000e8a:	f001 f818 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001000 	.word	0x40001000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40001400 	.word	0x40001400

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 feb3 	bl	8001c48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ee2:	f00d fa37 	bl	800e354 <xTaskGetSchedulerState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d001      	beq.n	8000ef0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eec:	f00d fc74 	bl	800e7d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <TIM6_DAC_IRQHandler+0x10>)
 8000efa:	f004 fa3c 	bl	8005376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20001ba8 	.word	0x20001ba8

08000f08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <TIM7_IRQHandler+0x10>)
 8000f0e:	f004 fa32 	bl	8005376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20001bf0 	.word	0x20001bf0

08000f1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <OTG_FS_IRQHandler+0x10>)
 8000f22:	f001 fdb8 	bl	8002a96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20008460 	.word	0x20008460

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f4a:	f00e fecb 	bl	800fce4 <__errno>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2216      	movs	r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
  return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f72:	bf00      	nop
 8000f74:	e7fd      	b.n	8000f72 <_exit+0x12>

08000f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e00a      	b.n	8000f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f88:	f3af 8000 	nop.w
 8000f8c:	4601      	mov	r1, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	60ba      	str	r2, [r7, #8]
 8000f94:	b2ca      	uxtb	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbf0      	blt.n	8000f88 <_read+0x12>
  }

  return len;
 8000fa6:	687b      	ldr	r3, [r7, #4]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e009      	b.n	8000fd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbf1      	blt.n	8000fc2 <_write+0x12>
  }
  return len;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_close>:

int _close(int file)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001010:	605a      	str	r2, [r3, #4]
  return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_isatty>:

int _isatty(int file)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f00e fe30 	bl	800fce4 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20001c3c 	.word	0x20001c3c
 80010b8:	20008cb0 	.word	0x20008cb0

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001118 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	@ (800112c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f00e fdef 	bl	800fcf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff fc6d 	bl	80009f0 <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001124:	08010c54 	.word	0x08010c54
  ldr r2, =_sbss
 8001128:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800112c:	20008cb0 	.word	0x20008cb0

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>

08001132 <MemFlash_Init>:
#include "MemFlash.h"

Std_ReturnType MemFlash_Init(uint8_t *Id)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	uint32_t ID = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	W25qxx_Init(&ID);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f976 	bl	8001434 <W25qxx_Init>
	*Id = ID & 0xFF;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <MemFlash_WriteSector>:

Std_ReturnType MemFlash_WriteSector(uint16_t SectorNumb, uint8_t *SectorData, uint16_t SectorSize)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
	W25qxx_WriteSector(SectorData, SectorNumb, 0, SectorSize);
 800116a:	88f9      	ldrh	r1, [r7, #6]
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f000 fba1 	bl	80018b8 <W25qxx_WriteSector>
	return E_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <MemFlash_ReadSector>:

Std_ReturnType MemFlash_ReadSector(uint16_t SectorNumb, uint8_t *SectorData, uint16_t SectorSize)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	80bb      	strh	r3, [r7, #4]
	W25qxx_ReadSector(SectorData, SectorNumb, 0, SectorSize);
 8001190:	88f9      	ldrh	r1, [r7, #6]
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f000 fc6c 	bl	8001a74 <W25qxx_ReadSector>
	return E_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <MemFlash_EraseSector>:

Std_ReturnType MemFlash_EraseSector(uint16_t SectorNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
	W25qxx_EraseSector(SectorNumb);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa3a 	bl	800162c <W25qxx_EraseSector>
	return E_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <MemFlash_EraseChip>:

Std_ReturnType MemFlash_EraseChip()
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0
	W25qxx_EraseChip();
 80011c6:	f000 fa01 	bl	80015cc <W25qxx_EraseChip>
	return E_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MemFlash_ReadID>:

Std_ReturnType MemFlash_ReadID(uint8_t *data, uint16_t length)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
	return E_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <MemFlash_EraseBlock>:

Std_ReturnType MemFlash_EraseBlock(uint16_t BlockNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	80fb      	strh	r3, [r7, #6]
	W25qxx_EraseBlock(BlockNumb);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fa6e 	bl	80016d8 <W25qxx_EraseBlock>
	return E_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	if(HAL_OK != W25QXX_READWRITE(&Data,&ret,1))
 8001212:	f107 020f 	add.w	r2, r7, #15
 8001216:	1df9      	adds	r1, r7, #7
 8001218:	2364      	movs	r3, #100	@ 0x64
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <W25qxx_Spi+0x30>)
 8001220:	f003 fd68 	bl	8004cf4 <HAL_SPI_TransmitReceive>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d000      	beq.n	800122c <W25qxx_Spi+0x24>
	{
		__NOP();
 800122a:	bf00      	nop
	}
	return ret;	
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20001b50 	.word	0x20001b50

0800123c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  W25QXX_CS_OFF();
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <W25qxx_ReadID+0x6c>)
 800125a:	f001 fabf 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 800125e:	209f      	movs	r0, #159	@ 0x9f
 8001260:	f7ff ffd2 	bl	8001208 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001264:	20a5      	movs	r0, #165	@ 0xa5
 8001266:	f7ff ffcf 	bl	8001208 <W25qxx_Spi>
 800126a:	4603      	mov	r3, r0
 800126c:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800126e:	20a5      	movs	r0, #165	@ 0xa5
 8001270:	f7ff ffca 	bl	8001208 <W25qxx_Spi>
 8001274:	4603      	mov	r3, r0
 8001276:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001278:	20a5      	movs	r0, #165	@ 0xa5
 800127a:	f7ff ffc5 	bl	8001208 <W25qxx_Spi>
 800127e:	4603      	mov	r3, r0
 8001280:	603b      	str	r3, [r7, #0]
  W25QXX_CS_ON();
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001288:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <W25qxx_ReadID+0x6c>)
 800128a:	f001 faa7 	bl	80027dc <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	4313      	orrs	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  return Temp;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020400 	.word	0x40020400

080012ac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  W25QXX_CS_OFF();
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b8:	4816      	ldr	r0, [pc, #88]	@ (8001314 <W25qxx_ReadUniqID+0x68>)
 80012ba:	f001 fa8f 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80012be:	204b      	movs	r0, #75	@ 0x4b
 80012c0:	f7ff ffa2 	bl	8001208 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	e005      	b.n	80012d6 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80012ca:	20a5      	movs	r0, #165	@ 0xa5
 80012cc:	f7ff ff9c 	bl	8001208 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	3301      	adds	r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d9f6      	bls.n	80012ca <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	71bb      	strb	r3, [r7, #6]
 80012e0:	e00b      	b.n	80012fa <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80012e2:	79bc      	ldrb	r4, [r7, #6]
 80012e4:	20a5      	movs	r0, #165	@ 0xa5
 80012e6:	f7ff ff8f 	bl	8001208 <W25qxx_Spi>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <W25qxx_ReadUniqID+0x6c>)
 80012f0:	4423      	add	r3, r4
 80012f2:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	3301      	adds	r3, #1
 80012f8:	71bb      	strb	r3, [r7, #6]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d9f0      	bls.n	80012e2 <W25qxx_ReadUniqID+0x36>
  W25QXX_CS_ON();
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001306:	4803      	ldr	r0, [pc, #12]	@ (8001314 <W25qxx_ReadUniqID+0x68>)
 8001308:	f001 fa68 	bl	80027dc <HAL_GPIO_WritePin>
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	40020400 	.word	0x40020400
 8001318:	20001c40 	.word	0x20001c40

0800131c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  W25QXX_CS_OFF();
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001326:	4808      	ldr	r0, [pc, #32]	@ (8001348 <W25qxx_WriteEnable+0x2c>)
 8001328:	f001 fa58 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 800132c:	2006      	movs	r0, #6
 800132e:	f7ff ff6b 	bl	8001208 <W25qxx_Spi>
  W25QXX_CS_ON();
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <W25qxx_WriteEnable+0x2c>)
 800133a:	f001 fa4f 	bl	80027dc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 fca2 	bl	8001c88 <HAL_Delay>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020400 	.word	0x40020400

0800134c <W25qxx_ReadStatusRegister>:
  W25QXX_CS_ON();
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
	W25QXX_CS_OFF();
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001360:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <W25qxx_ReadStatusRegister+0x88>)
 8001362:	f001 fa3b 	bl	80027dc <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10c      	bne.n	8001386 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800136c:	2005      	movs	r0, #5
 800136e:	f7ff ff4b 	bl	8001208 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001372:	20a5      	movs	r0, #165	@ 0xa5
 8001374:	f7ff ff48 	bl	8001208 <W25qxx_Spi>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800137c:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <W25qxx_ReadStatusRegister+0x8c>)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 8001384:	e01b      	b.n	80013be <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d10c      	bne.n	80013a6 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800138c:	2035      	movs	r0, #53	@ 0x35
 800138e:	f7ff ff3b 	bl	8001208 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001392:	20a5      	movs	r0, #165	@ 0xa5
 8001394:	f7ff ff38 	bl	8001208 <W25qxx_Spi>
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800139c:	4a0e      	ldr	r2, [pc, #56]	@ (80013d8 <W25qxx_ReadStatusRegister+0x8c>)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80013a4:	e00b      	b.n	80013be <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80013a6:	2015      	movs	r0, #21
 80013a8:	f7ff ff2e 	bl	8001208 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80013ac:	20a5      	movs	r0, #165	@ 0xa5
 80013ae:	f7ff ff2b 	bl	8001208 <W25qxx_Spi>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <W25qxx_ReadStatusRegister+0x8c>)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
	}	
  W25QXX_CS_ON();
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <W25qxx_ReadStatusRegister+0x88>)
 80013c6:	f001 fa09 	bl	80027dc <HAL_GPIO_WritePin>
	return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020400 	.word	0x40020400
 80013d8:	20001c40 	.word	0x20001c40

080013dc <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  W25QXX_CS_ON();
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f000 fc51 	bl	8001c88 <HAL_Delay>
	W25QXX_CS_OFF();
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ec:	480f      	ldr	r0, [pc, #60]	@ (800142c <W25qxx_WaitForWriteEnd+0x50>)
 80013ee:	f001 f9f5 	bl	80027dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f7ff ff08 	bl	8001208 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80013f8:	20a5      	movs	r0, #165	@ 0xa5
 80013fa:	f7ff ff05 	bl	8001208 <W25qxx_Spi>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <W25qxx_WaitForWriteEnd+0x54>)
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		W25qxx_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fc3d 	bl	8001c88 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <W25qxx_WaitForWriteEnd+0x54>)
 8001410:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ed      	bne.n	80013f8 <W25qxx_WaitForWriteEnd+0x1c>
 W25QXX_CS_ON();
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001422:	4802      	ldr	r0, [pc, #8]	@ (800142c <W25qxx_WaitForWriteEnd+0x50>)
 8001424:	f001 f9da 	bl	80027dc <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020400 	.word	0x40020400
 8001430:	20001c40 	.word	0x20001c40

08001434 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(uint32_t *id)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	w25qxx.Lock=1;	
 800143c:	4b61      	ldr	r3, [pc, #388]	@ (80015c4 <W25qxx_Init+0x190>)
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	while(HAL_GetTick()<100)
 8001444:	e002      	b.n	800144c <W25qxx_Init+0x18>
		W25qxx_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 fc1e 	bl	8001c88 <HAL_Delay>
	while(HAL_GetTick()<100)
 800144c:	f000 fc10 	bl	8001c70 <HAL_GetTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b63      	cmp	r3, #99	@ 0x63
 8001454:	d9f7      	bls.n	8001446 <W25qxx_Init+0x12>
    W25QXX_CS_ON();
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145c:	485a      	ldr	r0, [pc, #360]	@ (80015c8 <W25qxx_Init+0x194>)
 800145e:	f001 f9bd 	bl	80027dc <HAL_GPIO_WritePin>
    W25qxx_Delay(100);
 8001462:	2064      	movs	r0, #100	@ 0x64
 8001464:	f000 fc10 	bl	8001c88 <HAL_Delay>
//	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	*id=W25qxx_ReadID();
 8001468:	f7ff fee8 	bl	800123c <W25qxx_ReadID>
 800146c:	4602      	mov	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(*id&0x0000FFFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800147c:	3b11      	subs	r3, #17
 800147e:	2b09      	cmp	r3, #9
 8001480:	d85f      	bhi.n	8001542 <W25qxx_Init+0x10e>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <W25qxx_Init+0x54>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001535 	.word	0x08001535
 800148c:	08001527 	.word	0x08001527
 8001490:	08001519 	.word	0x08001519
 8001494:	0800150b 	.word	0x0800150b
 8001498:	080014fd 	.word	0x080014fd
 800149c:	080014ef 	.word	0x080014ef
 80014a0:	080014e1 	.word	0x080014e1
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014b1 	.word	0x080014b1
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80014b0:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <W25qxx_Init+0x190>)
 80014b2:	220a      	movs	r2, #10
 80014b4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80014b6:	4b43      	ldr	r3, [pc, #268]	@ (80015c4 <W25qxx_Init+0x190>)
 80014b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014bc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80014be:	e046      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <W25qxx_Init+0x190>)
 80014c2:	2209      	movs	r2, #9
 80014c4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80014c6:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <W25qxx_Init+0x190>)
 80014c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014cc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80014ce:	e03e      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80014d0:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <W25qxx_Init+0x190>)
 80014d2:	2208      	movs	r2, #8
 80014d4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	@ (80015c4 <W25qxx_Init+0x190>)
 80014d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014dc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80014de:	e036      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <W25qxx_Init+0x190>)
 80014e2:	2207      	movs	r2, #7
 80014e4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80014e6:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <W25qxx_Init+0x190>)
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80014ec:	e02f      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80014ee:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <W25qxx_Init+0x190>)
 80014f0:	2206      	movs	r2, #6
 80014f2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80014f4:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <W25qxx_Init+0x190>)
 80014f6:	2240      	movs	r2, #64	@ 0x40
 80014f8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80014fa:	e028      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80014fc:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <W25qxx_Init+0x190>)
 80014fe:	2205      	movs	r2, #5
 8001500:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001502:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <W25qxx_Init+0x190>)
 8001504:	2220      	movs	r2, #32
 8001506:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8001508:	e021      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 800150a:	4b2e      	ldr	r3, [pc, #184]	@ (80015c4 <W25qxx_Init+0x190>)
 800150c:	2204      	movs	r2, #4
 800150e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001510:	4b2c      	ldr	r3, [pc, #176]	@ (80015c4 <W25qxx_Init+0x190>)
 8001512:	2210      	movs	r2, #16
 8001514:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8001516:	e01a      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001518:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <W25qxx_Init+0x190>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800151e:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <W25qxx_Init+0x190>)
 8001520:	2208      	movs	r2, #8
 8001522:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001524:	e013      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001526:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <W25qxx_Init+0x190>)
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <W25qxx_Init+0x190>)
 800152e:	2204      	movs	r2, #4
 8001530:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8001532:	e00c      	b.n	800154e <W25qxx_Init+0x11a>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <W25qxx_Init+0x190>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 800153a:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <W25qxx_Init+0x190>)
 800153c:	2202      	movs	r2, #2
 800153e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8001540:	e005      	b.n	800154e <W25qxx_Init+0x11a>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <W25qxx_Init+0x190>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			return false;
 800154a:	2301      	movs	r3, #1
 800154c:	e036      	b.n	80015bc <W25qxx_Init+0x188>
				
	}		
	w25qxx.PageSize=256;
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <W25qxx_Init+0x190>)
 8001550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001554:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <W25qxx_Init+0x190>)
 8001558:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800155c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <W25qxx_Init+0x190>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <W25qxx_Init+0x190>)
 8001566:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <W25qxx_Init+0x190>)
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <W25qxx_Init+0x190>)
 800156e:	6912      	ldr	r2, [r2, #16]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <W25qxx_Init+0x190>)
 8001576:	8952      	ldrh	r2, [r2, #10]
 8001578:	fbb3 f3f2 	udiv	r3, r3, r2
 800157c:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <W25qxx_Init+0x190>)
 800157e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <W25qxx_Init+0x190>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <W25qxx_Init+0x190>)
 8001588:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <W25qxx_Init+0x190>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <W25qxx_Init+0x190>)
 8001590:	6912      	ldr	r2, [r2, #16]
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	0a9b      	lsrs	r3, r3, #10
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <W25qxx_Init+0x190>)
 800159a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800159c:	f7ff fe86 	bl	80012ac <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff fed3 	bl	800134c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff fed0 	bl	800134c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff fecd 	bl	800134c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <W25qxx_Init+0x190>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return true;
 80015ba:	2301      	movs	r3, #1
}	
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20001c40 	.word	0x20001c40
 80015c8:	40020400 	.word	0x40020400

080015cc <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 80015d0:	e002      	b.n	80015d8 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 fb58 	bl	8001c88 <HAL_Delay>
	while(w25qxx.Lock==1)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <W25qxx_EraseChip+0x58>)
 80015da:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d0f7      	beq.n	80015d2 <W25qxx_EraseChip+0x6>
	w25qxx.Lock=1;	
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <W25qxx_EraseChip+0x58>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 80015ea:	f7ff fe97 	bl	800131c <W25qxx_WriteEnable>
	W25QXX_CS_OFF();
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <W25qxx_EraseChip+0x5c>)
 80015f6:	f001 f8f1 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 80015fa:	20c7      	movs	r0, #199	@ 0xc7
 80015fc:	f7ff fe04 	bl	8001208 <W25qxx_Spi>
  W25QXX_CS_ON();
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001606:	4808      	ldr	r0, [pc, #32]	@ (8001628 <W25qxx_EraseChip+0x5c>)
 8001608:	f001 f8e8 	bl	80027dc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800160c:	f7ff fee6 	bl	80013dc <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8001610:	200a      	movs	r0, #10
 8001612:	f000 fb39 	bl	8001c88 <HAL_Delay>
	w25qxx.Lock=0;	
 8001616:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <W25qxx_EraseChip+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20001c40 	.word	0x20001c40
 8001628:	40020400 	.word	0x40020400

0800162c <W25qxx_EraseSector>:
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8001634:	e002      	b.n	800163c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 fb26 	bl	8001c88 <HAL_Delay>
	while(w25qxx.Lock==1)
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <W25qxx_EraseSector+0xa4>)
 800163e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001642:	2b01      	cmp	r3, #1
 8001644:	d0f7      	beq.n	8001636 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <W25qxx_EraseSector+0xa4>)
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 800164e:	f7ff fec5 	bl	80013dc <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <W25qxx_EraseSector+0xa4>)
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 800165e:	f7ff fe5d 	bl	800131c <W25qxx_WriteEnable>
  W25QXX_CS_OFF();
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001668:	481a      	ldr	r0, [pc, #104]	@ (80016d4 <W25qxx_EraseSector+0xa8>)
 800166a:	f001 f8b7 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 800166e:	2020      	movs	r0, #32
 8001670:	f7ff fdca 	bl	8001208 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <W25qxx_EraseSector+0xa4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d905      	bls.n	8001688 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0e1b      	lsrs	r3, r3, #24
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fdc0 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0c1b      	lsrs	r3, r3, #16
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fdba 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fdb4 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdaf 	bl	8001208 <W25qxx_Spi>
	W25QXX_CS_ON();
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <W25qxx_EraseSector+0xa8>)
 80016b2:	f001 f893 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80016b6:	f7ff fe91 	bl	80013dc <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 fae4 	bl	8001c88 <HAL_Delay>
	w25qxx.Lock=0;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <W25qxx_EraseSector+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20001c40 	.word	0x20001c40
 80016d4:	40020400 	.word	0x40020400

080016d8 <W25qxx_EraseBlock>:
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80016e0:	e002      	b.n	80016e8 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 fad0 	bl	8001c88 <HAL_Delay>
	while(w25qxx.Lock==1)
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <W25qxx_EraseBlock+0xa8>)
 80016ea:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d0f7      	beq.n	80016e2 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <W25qxx_EraseBlock+0xa8>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 80016fa:	f7ff fe6f 	bl	80013dc <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <W25qxx_EraseBlock+0xa8>)
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 800170c:	f7ff fe06 	bl	800131c <W25qxx_WriteEnable>
  W25QXX_CS_OFF();
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001716:	481b      	ldr	r0, [pc, #108]	@ (8001784 <W25qxx_EraseBlock+0xac>)
 8001718:	f001 f860 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 800171c:	20d8      	movs	r0, #216	@ 0xd8
 800171e:	f7ff fd73 	bl	8001208 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <W25qxx_EraseBlock+0xa8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d905      	bls.n	8001736 <W25qxx_EraseBlock+0x5e>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0e1b      	lsrs	r3, r3, #24
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fd69 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	0c1b      	lsrs	r3, r3, #16
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd63 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd5d 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd58 	bl	8001208 <W25qxx_Spi>
	W25QXX_CS_ON();
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175e:	4809      	ldr	r0, [pc, #36]	@ (8001784 <W25qxx_EraseBlock+0xac>)
 8001760:	f001 f83c 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001764:	f7ff fe3a 	bl	80013dc <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f000 fa8d 	bl	8001c88 <HAL_Delay>
	w25qxx.Lock=0;
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <W25qxx_EraseBlock+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20001c40 	.word	0x20001c40
 8001784:	40020400 	.word	0x40020400

08001788 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <W25qxx_SectorToPage+0x28>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <W25qxx_SectorToPage+0x28>)
 800179c:	8952      	ldrh	r2, [r2, #10]
 800179e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20001c40 	.word	0x20001c40

080017b4 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80017c2:	e002      	b.n	80017ca <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f000 fa5f 	bl	8001c88 <HAL_Delay>
	while(w25qxx.Lock==1)
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <W25qxx_WritePage+0xf8>)
 80017cc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d0f7      	beq.n	80017c4 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80017d4:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <W25qxx_WritePage+0xf8>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a32      	ldr	r2, [pc, #200]	@ (80018ac <W25qxx_WritePage+0xf8>)
 80017e4:	8952      	ldrh	r2, [r2, #10]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d802      	bhi.n	80017f0 <W25qxx_WritePage+0x3c>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <W25qxx_WritePage+0xf8>)
 80017f2:	895b      	ldrh	r3, [r3, #10]
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4413      	add	r3, r2
 8001802:	4a2a      	ldr	r2, [pc, #168]	@ (80018ac <W25qxx_WritePage+0xf8>)
 8001804:	8952      	ldrh	r2, [r2, #10]
 8001806:	4293      	cmp	r3, r2
 8001808:	d905      	bls.n	8001816 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <W25qxx_WritePage+0xf8>)
 800180c:	895b      	ldrh	r3, [r3, #10]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8001816:	f7ff fde1 	bl	80013dc <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800181a:	f7ff fd7f 	bl	800131c <W25qxx_WriteEnable>
  W25QXX_CS_OFF();
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001824:	4822      	ldr	r0, [pc, #136]	@ (80018b0 <W25qxx_WritePage+0xfc>)
 8001826:	f000 ffd9 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800182a:	2002      	movs	r0, #2
 800182c:	f7ff fcec 	bl	8001208 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <W25qxx_WritePage+0xf8>)
 8001832:	895b      	ldrh	r3, [r3, #10]
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <W25qxx_WritePage+0xf8>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d905      	bls.n	8001856 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0e1b      	lsrs	r3, r3, #24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fcd9 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fcd3 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fccd 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fcc8 	bl	8001208 <W25qxx_Spi>
  W25QXX_WRITE(pBuffer,NumByteToWrite_up_to_PageSize,100);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	2364      	movs	r3, #100	@ 0x64
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <W25qxx_WritePage+0x100>)
 8001882:	f002 ffdc 	bl	800483e <HAL_SPI_Transmit>
	W25QXX_CS_ON();
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800188c:	4808      	ldr	r0, [pc, #32]	@ (80018b0 <W25qxx_WritePage+0xfc>)
 800188e:	f000 ffa5 	bl	80027dc <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001892:	f7ff fda3 	bl	80013dc <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 f9f6 	bl	8001c88 <HAL_Delay>
	w25qxx.Lock=0;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <W25qxx_WritePage+0xf8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20001c40 	.word	0x20001c40
 80018b0:	40020400 	.word	0x40020400
 80018b4:	20001b50 	.word	0x20001b50

080018b8 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80018c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d802      	bhi.n	80018d6 <W25qxx_WriteSector+0x1e>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80018d6:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d243      	bcs.n	800196e <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	441a      	add	r2, r3
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d905      	bls.n	8001900 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	e001      	b.n	8001904 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001904:	68b8      	ldr	r0, [r7, #8]
 8001906:	f7ff ff3f 	bl	8001788 <W25qxx_SectorToPage>
 800190a:	4602      	mov	r2, r0
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 800190e:	895b      	ldrh	r3, [r3, #10]
 8001910:	4619      	mov	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	fbb3 f3f1 	udiv	r3, r3, r1
 8001918:	4413      	add	r3, r2
 800191a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 800191e:	895b      	ldrh	r3, [r3, #10]
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	fbb3 f1f2 	udiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	69f9      	ldr	r1, [r7, #28]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff ff3c 	bl	80017b4 <W25qxx_WritePage>
		StartPage++;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	3301      	adds	r3, #1
 8001940:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 8001944:	895b      	ldrh	r3, [r3, #10]
 8001946:	461a      	mov	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	1a9a      	subs	r2, r3, r2
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <W25qxx_WriteSector+0xc0>)
 8001954:	895b      	ldrh	r3, [r3, #10]
 8001956:	461a      	mov	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	dce1      	bgt.n	8001930 <W25qxx_WriteSector+0x78>
 800196c:	e000      	b.n	8001970 <W25qxx_WriteSector+0xb8>
		return;
 800196e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20001c40 	.word	0x20001c40

0800197c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800198a:	e002      	b.n	8001992 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 f97b 	bl	8001c88 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 8001994:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001998:	2b01      	cmp	r3, #1
 800199a:	d0f7      	beq.n	800198c <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019a6:	895b      	ldrh	r3, [r3, #10]
 80019a8:	461a      	mov	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d802      	bhi.n	80019b6 <W25qxx_ReadPage+0x3a>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 80019b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019b8:	895b      	ldrh	r3, [r3, #10]
 80019ba:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019c4:	8952      	ldrh	r2, [r2, #10]
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d905      	bls.n	80019d6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80019ca:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019cc:	895b      	ldrh	r3, [r3, #10]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 80019d6:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019d8:	895b      	ldrh	r3, [r3, #10]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
	W25QXX_CS_OFF();
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ee:	481f      	ldr	r0, [pc, #124]	@ (8001a6c <W25qxx_ReadPage+0xf0>)
 80019f0:	f000 fef4 	bl	80027dc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80019f4:	200b      	movs	r0, #11
 80019f6:	f7ff fc07 	bl	8001208 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d905      	bls.n	8001a0e <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	0e1b      	lsrs	r3, r3, #24
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fbfd 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fbf7 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fbf1 	bl	8001208 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fbec 	bl	8001208 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fbe9 	bl	8001208 <W25qxx_Spi>
	W25QXX_READ(pBuffer,NumByteToRead_up_to_PageSize,100);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2364      	movs	r3, #100	@ 0x64
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <W25qxx_ReadPage+0xf4>)
 8001a40:	f003 f840 	bl	8004ac4 <HAL_SPI_Receive>
	W25QXX_CS_ON();
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a4a:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <W25qxx_ReadPage+0xf0>)
 8001a4c:	f000 fec6 	bl	80027dc <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 f919 	bl	8001c88 <HAL_Delay>
	w25qxx.Lock=0;
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <W25qxx_ReadPage+0xec>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20001c40 	.word	0x20001c40
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	20001b50 	.word	0x20001b50

08001a74 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8001a82:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d802      	bhi.n	8001a92 <W25qxx_ReadSector+0x1e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001a92:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001a98:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d243      	bcs.n	8001b2a <W25qxx_ReadSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d905      	bls.n	8001abc <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e001      	b.n	8001ac0 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f7ff fe61 	bl	8001788 <W25qxx_SectorToPage>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001aca:	895b      	ldrh	r3, [r3, #10]
 8001acc:	4619      	mov	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001ada:	895b      	ldrh	r3, [r3, #10]
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae4:	fb01 f202 	mul.w	r2, r1, r2
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	69f9      	ldr	r1, [r7, #28]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff ff42 	bl	800197c <W25qxx_ReadPage>
		StartPage++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001b00:	895b      	ldrh	r3, [r3, #10]
 8001b02:	461a      	mov	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1a9a      	subs	r2, r3, r2
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <W25qxx_ReadSector+0xc0>)
 8001b10:	895b      	ldrh	r3, [r3, #10]
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dce1      	bgt.n	8001aec <W25qxx_ReadSector+0x78>
 8001b28:	e000      	b.n	8001b2c <W25qxx_ReadSector+0xb8>
		return;
 8001b2a:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20001c40 	.word	0x20001c40

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <HAL_Init+0x40>)
 8001b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_Init+0x40>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_Init+0x40>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f985 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f83e 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff f8e0 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <HAL_DeInit+0x50>)
 8001b84:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001b8e:	4a10      	ldr	r2, [pc, #64]	@ (8001bd0 <HAL_DeInit+0x54>)
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_DeInit+0x58>)
 8001b9c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001ba6:	22c1      	movs	r2, #193	@ 0xc1
 8001ba8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001bb6:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <HAL_DeInit+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001bbc:	f000 f80c 	bl	8001bd8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	f6fec9ff 	.word	0xf6fec9ff
 8001bd0:	04777933 	.word	0x04777933
 8001bd4:	226011ff 	.word	0x226011ff

08001bd8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f967 	bl	8001eda <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f92f 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20001c68 	.word	0x20001c68

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20001c68 	.word	0x20001c68

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_FLASH_Program+0xa0>)
 8001f08:	7e1b      	ldrb	r3, [r3, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_FLASH_Program+0x1e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e03b      	b.n	8001f8a <HAL_FLASH_Program+0x96>
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_FLASH_Program+0xa0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f1c:	f000 f870 	bl	8002000 <FLASH_WaitForLastOperation>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d12b      	bne.n	8001f82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f30:	783b      	ldrb	r3, [r7, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	68b8      	ldr	r0, [r7, #8]
 8001f36:	f000 f91b 	bl	8002170 <FLASH_Program_Byte>
 8001f3a:	e016      	b.n	8001f6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f42:	883b      	ldrh	r3, [r7, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f000 f8ee 	bl	8002128 <FLASH_Program_HalfWord>
 8001f4c:	e00d      	b.n	8001f6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d105      	bne.n	8001f60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f000 f8c3 	bl	80020e4 <FLASH_Program_Word>
 8001f5e:	e004      	b.n	8001f6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f000 f88b 	bl	8002080 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f6e:	f000 f847 	bl	8002000 <FLASH_WaitForLastOperation>
 8001f72:	4603      	mov	r3, r0
 8001f74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_FLASH_Program+0xa4>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_FLASH_Program+0xa4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f82:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <HAL_FLASH_Program+0xa0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20001c6c 	.word	0x20001c6c
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0b      	bge.n	8001fc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fb0:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <HAL_FLASH_Unlock+0x3c>)
 8001fb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da01      	bge.n	8001fc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40023c00 	.word	0x40023c00
 8001fd8:	45670123 	.word	0x45670123
 8001fdc:	cdef89ab 	.word	0xcdef89ab

08001fe0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_FLASH_Lock+0x1c>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_FLASH_Lock+0x1c>)
 8001fea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <FLASH_WaitForLastOperation+0x78>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002012:	f7ff fe2d 	bl	8001c70 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002018:	e010      	b.n	800203c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d00c      	beq.n	800203c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <FLASH_WaitForLastOperation+0x38>
 8002028:	f7ff fe22 	bl	8001c70 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d201      	bcs.n	800203c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e019      	b.n	8002070 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <FLASH_WaitForLastOperation+0x7c>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e8      	bne.n	800201a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <FLASH_WaitForLastOperation+0x7c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002054:	4b09      	ldr	r3, [pc, #36]	@ (800207c <FLASH_WaitForLastOperation+0x7c>)
 8002056:	2201      	movs	r2, #1
 8002058:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <FLASH_WaitForLastOperation+0x7c>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002066:	f000 f8a5 	bl	80021b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
  
}  
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20001c6c 	.word	0x20001c6c
 800207c:	40023c00 	.word	0x40023c00

08002080 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 8002092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 800209e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <FLASH_Program_DoubleWord+0x60>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80020b6:	f3bf 8f6f 	isb	sy
}
 80020ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80020bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	000a      	movs	r2, r1
 80020ca:	2300      	movs	r3, #0
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	3104      	adds	r1, #4
 80020d0:	4613      	mov	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <FLASH_Program_Word+0x40>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <FLASH_Program_Word+0x40>)
 80020f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <FLASH_Program_Word+0x40>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <FLASH_Program_Word+0x40>)
 8002100:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <FLASH_Program_Word+0x40>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4a06      	ldr	r2, [pc, #24]	@ (8002124 <FLASH_Program_Word+0x40>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40023c00 	.word	0x40023c00

08002128 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 800213a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a09      	ldr	r2, [pc, #36]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <FLASH_Program_HalfWord+0x44>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	801a      	strh	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 8002182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002186:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <FLASH_Program_Byte+0x40>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	701a      	strb	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	4a23      	ldr	r2, [pc, #140]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 80021ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 80021d2:	2210      	movs	r2, #16
 80021d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 80021ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 80021f0:	2220      	movs	r2, #32
 80021f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 800220a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 8002228:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 800222c:	2280      	movs	r2, #128	@ 0x80
 800222e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	4a05      	ldr	r2, [pc, #20]	@ (800225c <FLASH_SetErrorCode+0xa8>)
 8002246:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <FLASH_SetErrorCode+0xa4>)
 800224a:	2202      	movs	r2, #2
 800224c:	60da      	str	r2, [r3, #12]
  }
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023c00 	.word	0x40023c00
 800225c:	20001c6c 	.word	0x20001c6c

08002260 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002272:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_FLASHEx_Erase+0xd8>)
 8002274:	7e1b      	ldrb	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_FLASHEx_Erase+0x1e>
 800227a:	2302      	movs	r3, #2
 800227c:	e058      	b.n	8002330 <HAL_FLASHEx_Erase+0xd0>
 800227e:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_FLASHEx_Erase+0xd8>)
 8002280:	2201      	movs	r2, #1
 8002282:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002284:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002288:	f7ff feba 	bl	8002000 <FLASH_WaitForLastOperation>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d148      	bne.n	8002328 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d115      	bne.n	80022d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 f844 	bl	8002340 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022bc:	f7ff fea0 	bl	8002000 <FLASH_WaitForLastOperation>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_FLASHEx_Erase+0xdc>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_FLASHEx_Erase+0xdc>)
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6113      	str	r3, [r2, #16]
 80022d0:	e028      	b.n	8002324 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	e01c      	b.n	8002314 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	68b8      	ldr	r0, [r7, #8]
 80022e4:	f000 f850 	bl	8002388 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022ec:	f7ff fe88 	bl	8002000 <FLASH_WaitForLastOperation>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_FLASHEx_Erase+0xdc>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4a10      	ldr	r2, [pc, #64]	@ (800233c <HAL_FLASHEx_Erase+0xdc>)
 80022fa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80022fe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	601a      	str	r2, [r3, #0]
          break;
 800230c:	e00a      	b.n	8002324 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4413      	add	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d3da      	bcc.n	80022da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002324:	f000 f878 	bl	8002418 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_FLASHEx_Erase+0xd8>)
 800232a:	2200      	movs	r2, #0
 800232c:	761a      	strb	r2, [r3, #24]

  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20001c6c 	.word	0x20001c6c
 800233c:	40023c00 	.word	0x40023c00

08002340 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <FLASH_MassErase+0x44>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4a0c      	ldr	r2, [pc, #48]	@ (8002384 <FLASH_MassErase+0x44>)
 8002352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <FLASH_MassErase+0x44>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <FLASH_MassErase+0x44>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002364:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <FLASH_MassErase+0x44>)
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	4313      	orrs	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <FLASH_MassErase+0x44>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6113      	str	r3, [r2, #16]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e010      	b.n	80023c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d103      	bne.n	80023b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e009      	b.n	80023c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d103      	bne.n	80023c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e002      	b.n	80023c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	490f      	ldr	r1, [pc, #60]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <FLASH_Erase_Sector+0x8c>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	6113      	str	r3, [r2, #16]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40023c00 	.word	0x40023c00

08002418 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800241c:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800242e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002432:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800243a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800244a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002456:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800246a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800246e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 8002482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002486:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <FLASH_FlushCaches+0x88>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002492:	6013      	str	r3, [r2, #0]
  }
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	@ 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e16b      	b.n	8002798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 815a 	bne.w	8002792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b4 	beq.w	8002792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b60      	ldr	r3, [pc, #384]	@ (80027b0 <HAL_GPIO_Init+0x30c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a5f      	ldr	r2, [pc, #380]	@ (80027b0 <HAL_GPIO_Init+0x30c>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
 800263a:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <HAL_GPIO_Init+0x30c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a5b      	ldr	r2, [pc, #364]	@ (80027b4 <HAL_GPIO_Init+0x310>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a52      	ldr	r2, [pc, #328]	@ (80027b8 <HAL_GPIO_Init+0x314>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02b      	beq.n	80026ca <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a51      	ldr	r2, [pc, #324]	@ (80027bc <HAL_GPIO_Init+0x318>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a50      	ldr	r2, [pc, #320]	@ (80027c0 <HAL_GPIO_Init+0x31c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4f      	ldr	r2, [pc, #316]	@ (80027c4 <HAL_GPIO_Init+0x320>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x21a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4e      	ldr	r2, [pc, #312]	@ (80027c8 <HAL_GPIO_Init+0x324>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x216>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4d      	ldr	r2, [pc, #308]	@ (80027cc <HAL_GPIO_Init+0x328>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x212>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4c      	ldr	r2, [pc, #304]	@ (80027d0 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x20e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	@ (80027d4 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x20a>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x228>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	@ (80027b4 <HAL_GPIO_Init+0x310>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3b      	ldr	r3, [pc, #236]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b30      	ldr	r3, [pc, #192]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a27      	ldr	r2, [pc, #156]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <HAL_GPIO_Init+0x334>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae90 	bls.w	80024c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af02      	add	r7, sp, #8
 8002814:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e101      	b.n	8002a24 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f00c fc1a 	bl	800f074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284e:	d102      	bne.n	8002856 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 f901 	bl	8005a62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7c1a      	ldrb	r2, [r3, #16]
 8002868:	f88d 2000 	strb.w	r2, [sp]
 800286c:	3304      	adds	r3, #4
 800286e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002870:	f002 ffe0 	bl	8005834 <USB_CoreInit>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0ce      	b.n	8002a24 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f8f9 	bl	8005a84 <USB_SetCurrentMode>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0bf      	b.n	8002a24 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e04a      	b.n	8002940 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3315      	adds	r3, #21
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3314      	adds	r3, #20
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	b298      	uxth	r0, r3
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	332e      	adds	r3, #46	@ 0x2e
 80028e6:	4602      	mov	r2, r0
 80028e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3318      	adds	r3, #24
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	331c      	adds	r3, #28
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3320      	adds	r3, #32
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3324      	adds	r3, #36	@ 0x24
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	3301      	adds	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	791b      	ldrb	r3, [r3, #4]
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	429a      	cmp	r2, r3
 8002948:	d3af      	bcc.n	80028aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3b5      	bcc.n	8002950 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7c1a      	ldrb	r2, [r3, #16]
 80029ec:	f88d 2000 	strb.w	r2, [sp]
 80029f0:	3304      	adds	r3, #4
 80029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f4:	f003 f892 	bl	8005b1c <USB_DevInit>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00c      	b.n	8002a24 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 f8d6 	bl	8006bce <USB_DevDisconnect>

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_PCD_Start+0x1c>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e022      	b.n	8002a8e <HAL_PCD_Start+0x62>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 ffe3 	bl	8005a40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f884 	bl	8006b8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a96:	b590      	push	{r4, r7, lr}
 8002a98:	b08d      	sub	sp, #52	@ 0x34
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f942 	bl	8006d36 <USB_GetMode>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 848c 	bne.w	80033d2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f8a6 	bl	8006c10 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8482 	beq.w	80033d0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f893 	bl	8006c10 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d107      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f002 0202 	and.w	r2, r2, #2
 8002b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f881 	bl	8006c10 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d161      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0210 	bic.w	r2, r2, #16
 8002b26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	0c5b      	lsrs	r3, r3, #17
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d124      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d035      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6a38      	ldr	r0, [r7, #32]
 8002b74:	f003 feb8 	bl	80068e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b84:	441a      	add	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b96:	441a      	add	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	615a      	str	r2, [r3, #20]
 8002b9c:	e016      	b.n	8002bcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	0c5b      	lsrs	r3, r3, #17
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d110      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6a38      	ldr	r0, [r7, #32]
 8002bb6:	f003 fe97 	bl	80068e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc6:	441a      	add	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0210 	orr.w	r2, r2, #16
 8002bda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 f815 	bl	8006c10 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002bf0:	f040 80a7 	bne.w	8002d42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 f81a 	bl	8006c36 <USB_ReadDevAllOutEpInterrupt>
 8002c02:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c04:	e099      	b.n	8002d3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 808e 	beq.w	8002d2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 f83e 	bl	8006c9e <USB_ReadDevOutEPInterrupt>
 8002c22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fea2 	bl	800398c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2308      	movs	r3, #8
 8002c62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 ff78 	bl	8003b5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	2310      	movs	r3, #16
 8002c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d030      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d109      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	78db      	ldrb	r3, [r3, #3]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d108      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f00c facf 	bl	800f280 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d26:	461a      	mov	r2, r3
 8002d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f af62 	bne.w	8002c06 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 ff62 	bl	8006c10 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d56:	f040 80db 	bne.w	8002f10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 ff83 	bl	8006c6a <USB_ReadDevAllInEpInterrupt>
 8002d64:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d6a:	e0cd      	b.n	8002f08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80c2 	beq.w	8002efc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 ffa9 	bl	8006cda <USB_ReadDevInEPInterrupt>
 8002d88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d057      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69f9      	ldr	r1, [r7, #28]
 8002db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002db4:	4013      	ands	r3, r2
 8002db6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	799b      	ldrb	r3, [r3, #6]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d132      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3320      	adds	r3, #32
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4403      	add	r3, r0
 8002df2:	331c      	adds	r3, #28
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4419      	add	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4403      	add	r3, r0
 8002e06:	3320      	adds	r3, #32
 8002e08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d113      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x3a2>
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3324      	adds	r3, #36	@ 0x24
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e30:	461a      	mov	r2, r3
 8002e32:	2101      	movs	r1, #1
 8002e34:	f003 ffb0 	bl	8006d98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f00c f999 	bl	800f176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e76:	461a      	mov	r2, r3
 8002e78:	2310      	movs	r3, #16
 8002e7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e92:	461a      	mov	r2, r3
 8002e94:	2340      	movs	r3, #64	@ 0x40
 8002e96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d023      	beq.n	8002eea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ea2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea4:	6a38      	ldr	r0, [r7, #32]
 8002ea6:	f002 ff9d 	bl	8005de4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3310      	adds	r3, #16
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3304      	adds	r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	78db      	ldrb	r3, [r3, #3]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f00c f9e6 	bl	800f2a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fcbb 	bl	8003872 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	3301      	adds	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f47f af2e 	bne.w	8002d6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fe7b 	bl	8006c10 <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f24:	d122      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d108      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fea2 	bl	8003c98 <HAL_PCDEx_LPM_Callback>
 8002f54:	e002      	b.n	8002f5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f00c f984 	bl	800f264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fe4d 	bl	8006c10 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f80:	d112      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f00c f940 	bl	800f218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fa6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 fe2f 	bl	8006c10 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fbc:	f040 80b7 	bne.w	800312e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2110      	movs	r1, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 ff02 	bl	8005de4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe4:	e046      	b.n	8003074 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ff8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800300a:	0151      	lsls	r1, r2, #5
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	440a      	add	r2, r1
 8003010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003014:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003018:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800302c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	440a      	add	r2, r1
 8003044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003048:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800304c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	440a      	add	r2, r1
 8003064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003068:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800306c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	3301      	adds	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	461a      	mov	r2, r3
 800307a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307c:	4293      	cmp	r3, r2
 800307e:	d3b2      	bcc.n	8002fe6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003092:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7bdb      	ldrb	r3, [r3, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d016      	beq.n	80030ca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ac:	f043 030b 	orr.w	r3, r3, #11
 80030b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c2:	f043 030b 	orr.w	r3, r3, #11
 80030c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c8:	e015      	b.n	80030f6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030dc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f0:	f043 030b 	orr.w	r3, r3, #11
 80030f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003104:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003108:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003118:	461a      	mov	r2, r3
 800311a:	f003 fe3d 	bl	8006d98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800312c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fd6c 	bl	8006c10 <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003142:	d123      	bne.n	800318c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fe02 	bl	8006d52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f002 febf 	bl	8005ed6 <USB_GetDevSpeed>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681c      	ldr	r4, [r3, #0]
 8003164:	f001 fa08 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 8003168:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800316e:	461a      	mov	r2, r3
 8003170:	4620      	mov	r0, r4
 8003172:	f002 fbc3 	bl	80058fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f00c f825 	bl	800f1c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800318a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fd3d 	bl	8006c10 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10a      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f00c f802 	bl	800f1aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 0208 	and.w	r2, r2, #8
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fd28 	bl	8006c10 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d123      	bne.n	8003212 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031da:	e014      	b.n	8003206 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb08 	bl	8003810 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	3301      	adds	r3, #1
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	4293      	cmp	r3, r2
 8003210:	d3e4      	bcc.n	80031dc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fcfa 	bl	8006c10 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003226:	d13c      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003228:	2301      	movs	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
 800322c:	e02b      	b.n	8003286 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3318      	adds	r3, #24
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003254:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	da12      	bge.n	8003280 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3317      	adds	r3, #23
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fac8 	bl	8003810 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	3301      	adds	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	791b      	ldrb	r3, [r3, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	4293      	cmp	r3, r2
 8003290:	d3cd      	bcc.n	800322e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 fcb2 	bl	8006c10 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b6:	d156      	bne.n	8003366 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b8:	2301      	movs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80032bc:	e045      	b.n	800334a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d12e      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da2b      	bge.n	8003344 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d121      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003340:	6053      	str	r3, [r2, #4]
            break;
 8003342:	e008      	b.n	8003356 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	3301      	adds	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	791b      	ldrb	r3, [r3, #4]
 800334e:	461a      	mov	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	4293      	cmp	r3, r2
 8003354:	d3b3      	bcc.n	80032be <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fc50 	bl	8006c10 <USB_ReadInterrupts>
 8003370:	4603      	mov	r3, r0
 8003372:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d10a      	bne.n	8003392 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f00b ffa3 	bl	800f2c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fc3a 	bl	8006c10 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d115      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f00b ff93 	bl	800f2e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e000      	b.n	80033d2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80033d0:	bf00      	nop
    }
  }
}
 80033d2:	3734      	adds	r7, #52	@ 0x34
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}

080033d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_PCD_SetAddress+0x1a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e012      	b.n	8003418 <HAL_PCD_SetAddress+0x40>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fb99 	bl	8006b40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	4603      	mov	r3, r0
 8003430:	70fb      	strb	r3, [r7, #3]
 8003432:	460b      	mov	r3, r1
 8003434:	803b      	strh	r3, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800343e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da0f      	bge.n	8003466 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3310      	adds	r3, #16
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	705a      	strb	r2, [r3, #1]
 8003464:	e00f      	b.n	8003486 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003492:	883a      	ldrh	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	78ba      	ldrb	r2, [r7, #2]
 800349c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034b0:	78bb      	ldrb	r3, [r7, #2]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_EP_Open+0xaa>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e00e      	b.n	80034e8 <HAL_PCD_EP_Open+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 fd21 	bl	8005f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3310      	adds	r3, #16
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00f      	b.n	8003544 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_EP_Close+0x6e>
 800355a:	2302      	movs	r3, #2
 800355c:	e00e      	b.n	800357c <HAL_PCD_EP_Close+0x8c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f002 fd5f 	bl	8006030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	799b      	ldrb	r3, [r3, #6]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	799b      	ldrb	r3, [r3, #6]
 80035e8:	461a      	mov	r2, r3
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	f002 fdfc 	bl	80061e8 <USB_EPStartXfer>

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800361c:	681b      	ldr	r3, [r3, #0]
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	460b      	mov	r3, r1
 8003638:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3310      	adds	r3, #16
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2201      	movs	r2, #1
 8003668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	799b      	ldrb	r3, [r3, #6]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	799b      	ldrb	r3, [r3, #6]
 800368c:	461a      	mov	r2, r3
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	f002 fdaa 	bl	80061e8 <USB_EPStartXfer>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	7912      	ldrb	r2, [r2, #4]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04f      	b.n	800375c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da0f      	bge.n	80036e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	3310      	adds	r3, #16
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
 80036e2:	e00d      	b.n	8003700 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	3304      	adds	r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_PCD_EP_SetStall+0x82>
 800371c:	2302      	movs	r3, #2
 800371e:	e01d      	b.n	800375c <HAL_PCD_EP_SetStall+0xbe>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f003 f932 	bl	8006998 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	7999      	ldrb	r1, [r3, #6]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800374c:	461a      	mov	r2, r3
 800374e:	f003 fb23 	bl	8006d98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	7912      	ldrb	r2, [r2, #4]
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e042      	b.n	8003808 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003786:	2b00      	cmp	r3, #0
 8003788:	da0f      	bge.n	80037aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 020f 	and.w	r2, r3, #15
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3310      	adds	r3, #16
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	705a      	strb	r2, [r3, #1]
 80037a8:	e00f      	b.n	80037ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_PCD_EP_ClrStall+0x86>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e00e      	b.n	8003808 <HAL_PCD_EP_ClrStall+0xa4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 f93b 	bl	8006a74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800381c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003820:	2b00      	cmp	r3, #0
 8003822:	da0c      	bge.n	800383e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3310      	adds	r3, #16
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e00c      	b.n	8003858 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 020f 	and.w	r2, r3, #15
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	4618      	mov	r0, r3
 8003860:	f002 ff5a 	bl	8006718 <USB_EPStopXfer>
 8003864:	4603      	mov	r3, r0
 8003866:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003868:	7afb      	ldrb	r3, [r7, #11]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b08a      	sub	sp, #40	@ 0x28
 8003876:	af02      	add	r7, sp, #8
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	3310      	adds	r3, #16
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	3304      	adds	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d901      	bls.n	80038aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d902      	bls.n	80038c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3303      	adds	r3, #3
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ce:	e02a      	b.n	8003926 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d902      	bls.n	80038ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3303      	adds	r3, #3
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68d9      	ldr	r1, [r3, #12]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4603      	mov	r3, r0
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f002 ffaf 	bl	800686c <USB_WritePacket>

    ep->xfer_buff  += len;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	441a      	add	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	d809      	bhi.n	8003950 <PCD_WriteEmptyTxFifo+0xde>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003944:	429a      	cmp	r2, r3
 8003946:	d203      	bcs.n	8003950 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1bf      	bne.n	80038d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d811      	bhi.n	8003980 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	2201      	movs	r2, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	43db      	mvns	r3, r3
 8003976:	6939      	ldr	r1, [r7, #16]
 8003978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800397c:	4013      	ands	r3, r2
 800397e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	333c      	adds	r3, #60	@ 0x3c
 80039a4:	3304      	adds	r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d17b      	bne.n	8003aba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d015      	beq.n	80039f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a61      	ldr	r2, [pc, #388]	@ (8003b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f240 80b9 	bls.w	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80b3 	beq.w	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ee:	461a      	mov	r2, r3
 80039f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	e0a7      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2320      	movs	r3, #32
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	e098      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f040 8093 	bne.w	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	@ (8003b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d90f      	bls.n	8003a4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	6093      	str	r3, [r2, #8]
 8003a48:	e07e      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d114      	bne.n	8003aac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a94:	461a      	mov	r2, r3
 8003a96:	2101      	movs	r1, #1
 8003a98:	f003 f97e 	bl	8006d98 <USB_EP0_OutStart>
 8003a9c:	e006      	b.n	8003aac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f00b fb44 	bl	800f140 <HAL_PCD_DataOutStageCallback>
 8003ab8:	e046      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	4a26      	ldr	r2, [pc, #152]	@ (8003b58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d124      	bne.n	8003b0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ade:	6093      	str	r3, [r2, #8]
 8003ae0:	e032      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2320      	movs	r3, #32
 8003afc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f00b fb1b 	bl	800f140 <HAL_PCD_DataOutStageCallback>
 8003b0a:	e01d      	b.n	8003b48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d114      	bne.n	8003b3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b34:	461a      	mov	r2, r3
 8003b36:	2100      	movs	r1, #0
 8003b38:	f003 f92e 	bl	8006d98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f00b fafc 	bl	800f140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	4f54300a 	.word	0x4f54300a
 8003b58:	4f54310a 	.word	0x4f54310a

08003b5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	333c      	adds	r3, #60	@ 0x3c
 8003b74:	3304      	adds	r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d90e      	bls.n	8003bb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f00b fab3 	bl	800f11c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d90c      	bls.n	8003bd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	799b      	ldrb	r3, [r3, #6]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d108      	bne.n	8003bd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	f003 f8e0 	bl	8006d98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	4f54300a 	.word	0x4f54300a

08003be8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c06:	883b      	ldrh	r3, [r7, #0]
 8003c08:	0419      	lsls	r1, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c14:	e028      	b.n	8003c68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4413      	add	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	e00d      	b.n	8003c46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	3340      	adds	r3, #64	@ 0x40
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	3301      	adds	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3ec      	bcc.n	8003c2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c50:	883b      	ldrh	r3, [r7, #0]
 8003c52:	0418      	lsls	r0, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	4302      	orrs	r2, r0
 8003c60:	3340      	adds	r3, #64	@ 0x40
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e267      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d075      	beq.n	8003dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cce:	4b88      	ldr	r3, [pc, #544]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b85      	ldr	r3, [pc, #532]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d112      	bne.n	8003d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce6:	4b82      	ldr	r3, [pc, #520]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf2:	d10b      	bne.n	8003d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x108>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d157      	bne.n	8003db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e242      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d14:	d106      	bne.n	8003d24 <HAL_RCC_OscConfig+0x74>
 8003d16:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a75      	ldr	r2, [pc, #468]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xb0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x98>
 8003d2e:	4b70      	ldr	r3, [pc, #448]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xb0>
 8003d48:	4b69      	ldr	r3, [pc, #420]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a68      	ldr	r2, [pc, #416]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b66      	ldr	r3, [pc, #408]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a65      	ldr	r2, [pc, #404]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd ff82 	bl	8001c70 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fd ff7e 	bl	8001c70 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e207      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xc0>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd ff6e 	bl	8001c70 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd ff6a 	bl	8001c70 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	@ 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1f3      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	4b51      	ldr	r3, [pc, #324]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0xe8>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b44      	ldr	r3, [pc, #272]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	4b41      	ldr	r3, [pc, #260]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x152>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1c7      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4937      	ldr	r1, [pc, #220]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	e03a      	b.n	8003e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e20:	4b34      	ldr	r3, [pc, #208]	@ (8003ef4 <HAL_RCC_OscConfig+0x244>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fd ff23 	bl	8001c70 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fd ff1f 	bl	8001c70 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1a8      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4925      	ldr	r1, [pc, #148]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e62:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_RCC_OscConfig+0x244>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd ff02 	bl	8001c70 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fd fefe 	bl	8001c70 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e187      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d036      	beq.n	8003f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <HAL_RCC_OscConfig+0x248>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fee2 	bl	8001c70 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fd fede 	bl	8001c70 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e167      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x200>
 8003ece:	e01b      	b.n	8003f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0x248>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fecb 	bl	8001c70 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	e00e      	b.n	8003efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ede:	f7fd fec7 	bl	8001c70 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d907      	bls.n	8003efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e150      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	42470000 	.word	0x42470000
 8003ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efc:	4b88      	ldr	r3, [pc, #544]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1ea      	bne.n	8003ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8097 	beq.w	8004044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b81      	ldr	r3, [pc, #516]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f36:	4b7a      	ldr	r3, [pc, #488]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f46:	4b77      	ldr	r3, [pc, #476]	@ (8004124 <HAL_RCC_OscConfig+0x474>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d118      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f52:	4b74      	ldr	r3, [pc, #464]	@ (8004124 <HAL_RCC_OscConfig+0x474>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a73      	ldr	r2, [pc, #460]	@ (8004124 <HAL_RCC_OscConfig+0x474>)
 8003f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fe87 	bl	8001c70 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f66:	f7fd fe83 	bl	8001c70 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e10c      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_OscConfig+0x474>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCC_OscConfig+0x2ea>
 8003f8c:	4b64      	ldr	r3, [pc, #400]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a63      	ldr	r2, [pc, #396]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f98:	e01c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x324>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x30c>
 8003fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fae:	4b5c      	ldr	r3, [pc, #368]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x324>
 8003fbc:	4b58      	ldr	r3, [pc, #352]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	4a57      	ldr	r2, [pc, #348]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc8:	4b55      	ldr	r3, [pc, #340]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fcc:	4a54      	ldr	r2, [pc, #336]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003fce:	f023 0304 	bic.w	r3, r3, #4
 8003fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fe48 	bl	8001c70 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fe44 	bl	8001c70 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0cb      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffa:	4b49      	ldr	r3, [pc, #292]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ee      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x334>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7fd fe32 	bl	8001c70 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fd fe2e 	bl	8001c70 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0b5      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004026:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1ee      	bne.n	8004010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004038:	4b39      	ldr	r3, [pc, #228]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	4a38      	ldr	r2, [pc, #224]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 800403e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80a1 	beq.w	8004190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800404e:	4b34      	ldr	r3, [pc, #208]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b08      	cmp	r3, #8
 8004058:	d05c      	beq.n	8004114 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d141      	bne.n	80040e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b31      	ldr	r3, [pc, #196]	@ (8004128 <HAL_RCC_OscConfig+0x478>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd fe02 	bl	8001c70 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fdfe 	bl	8001c70 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e087      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	491b      	ldr	r1, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <HAL_RCC_OscConfig+0x478>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fd fdd7 	bl	8001c70 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fd fdd3 	bl	8001c70 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e05c      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x416>
 80040e4:	e054      	b.n	8004190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_RCC_OscConfig+0x478>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd fdc0 	bl	8001c70 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd fdbc 	bl	8001c70 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e045      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_RCC_OscConfig+0x470>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x444>
 8004112:	e03d      	b.n	8004190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e038      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800412c:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <HAL_RCC_OscConfig+0x4ec>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d028      	beq.n	800418c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d121      	bne.n	800418c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d11a      	bne.n	800418c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800415c:	4013      	ands	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004164:	4293      	cmp	r3, r2
 8004166:	d111      	bne.n	800418c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	3b01      	subs	r3, #1
 8004176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0cc      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b68      	ldr	r3, [pc, #416]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d90c      	bls.n	80041dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b65      	ldr	r3, [pc, #404]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0b8      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d020      	beq.n	800422a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f4:	4b59      	ldr	r3, [pc, #356]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a58      	ldr	r2, [pc, #352]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800420c:	4b53      	ldr	r3, [pc, #332]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a52      	ldr	r2, [pc, #328]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004218:	4b50      	ldr	r3, [pc, #320]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	494d      	ldr	r1, [pc, #308]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d044      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b47      	ldr	r3, [pc, #284]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d119      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e07f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d003      	beq.n	800425e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	4b3f      	ldr	r3, [pc, #252]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e067      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427e:	4b37      	ldr	r3, [pc, #220]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 0203 	bic.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4934      	ldr	r1, [pc, #208]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004290:	f7fd fcee 	bl	8001c70 <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	e00a      	b.n	80042ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004298:	f7fd fcea 	bl	8001c70 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e04f      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 020c 	and.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1eb      	bne.n	8004298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c0:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20c      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e032      	b.n	800434e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4916      	ldr	r1, [pc, #88]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	490e      	ldr	r1, [pc, #56]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004326:	f000 f821 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800432a:	4602      	mov	r2, r0
 800432c:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	490a      	ldr	r1, [pc, #40]	@ (8004360 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	5ccb      	ldrb	r3, [r1, r3]
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	4a09      	ldr	r2, [pc, #36]	@ (8004364 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004342:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fc4e 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023c00 	.word	0x40023c00
 800435c:	40023800 	.word	0x40023800
 8004360:	080108ec 	.word	0x080108ec
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004370:	b094      	sub	sp, #80	@ 0x50
 8004372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	647b      	str	r3, [r7, #68]	@ 0x44
 8004378:	2300      	movs	r3, #0
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800437c:	2300      	movs	r3, #0
 800437e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004384:	4b79      	ldr	r3, [pc, #484]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d00d      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x40>
 8004390:	2b08      	cmp	r3, #8
 8004392:	f200 80e1 	bhi.w	8004558 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x34>
 800439a:	2b04      	cmp	r3, #4
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800439e:	e0db      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b73      	ldr	r3, [pc, #460]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043a4:	e0db      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a6:	4b73      	ldr	r3, [pc, #460]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x208>)
 80043a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043aa:	e0d8      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ac:	4b6f      	ldr	r3, [pc, #444]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b6:	4b6d      	ldr	r3, [pc, #436]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d063      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	2200      	movs	r2, #0
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d6:	2300      	movs	r3, #0
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043de:	4622      	mov	r2, r4
 80043e0:	462b      	mov	r3, r5
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	0159      	lsls	r1, r3, #5
 80043ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f0:	0150      	lsls	r0, r2, #5
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4621      	mov	r1, r4
 80043f8:	1a51      	subs	r1, r2, r1
 80043fa:	6139      	str	r1, [r7, #16]
 80043fc:	4629      	mov	r1, r5
 80043fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004410:	4659      	mov	r1, fp
 8004412:	018b      	lsls	r3, r1, #6
 8004414:	4651      	mov	r1, sl
 8004416:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800441a:	4651      	mov	r1, sl
 800441c:	018a      	lsls	r2, r1, #6
 800441e:	4651      	mov	r1, sl
 8004420:	ebb2 0801 	subs.w	r8, r2, r1
 8004424:	4659      	mov	r1, fp
 8004426:	eb63 0901 	sbc.w	r9, r3, r1
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443e:	4690      	mov	r8, r2
 8004440:	4699      	mov	r9, r3
 8004442:	4623      	mov	r3, r4
 8004444:	eb18 0303 	adds.w	r3, r8, r3
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	462b      	mov	r3, r5
 800444c:	eb49 0303 	adc.w	r3, r9, r3
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800445e:	4629      	mov	r1, r5
 8004460:	024b      	lsls	r3, r1, #9
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004468:	4621      	mov	r1, r4
 800446a:	024a      	lsls	r2, r1, #9
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004472:	2200      	movs	r2, #0
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800447c:	f7fb ff00 	bl	8000280 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004488:	e058      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448a:	4b38      	ldr	r3, [pc, #224]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	2200      	movs	r2, #0
 8004492:	4618      	mov	r0, r3
 8004494:	4611      	mov	r1, r2
 8004496:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	f04f 0000 	mov.w	r0, #0
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	0159      	lsls	r1, r3, #5
 80044b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b6:	0150      	lsls	r0, r2, #5
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4641      	mov	r1, r8
 80044be:	ebb2 0a01 	subs.w	sl, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044dc:	ebb2 040a 	subs.w	r4, r2, sl
 80044e0:	eb63 050b 	sbc.w	r5, r3, fp
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	00eb      	lsls	r3, r5, #3
 80044ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f2:	00e2      	lsls	r2, r4, #3
 80044f4:	4614      	mov	r4, r2
 80044f6:	461d      	mov	r5, r3
 80044f8:	4643      	mov	r3, r8
 80044fa:	18e3      	adds	r3, r4, r3
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	464b      	mov	r3, r9
 8004500:	eb45 0303 	adc.w	r3, r5, r3
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004512:	4629      	mov	r1, r5
 8004514:	028b      	lsls	r3, r1, #10
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800451c:	4621      	mov	r1, r4
 800451e:	028a      	lsls	r2, r1, #10
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004526:	2200      	movs	r2, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	61fa      	str	r2, [r7, #28]
 800452c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004530:	f7fb fea6 	bl	8000280 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_GetSysClockFreq+0x200>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	3301      	adds	r3, #1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800454c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800454e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004556:	e002      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x204>)
 800455a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800455c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004560:	4618      	mov	r0, r3
 8004562:	3750      	adds	r7, #80	@ 0x50
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	00f42400 	.word	0x00f42400
 8004574:	007a1200 	.word	0x007a1200

08004578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_RCC_GetHCLKFreq+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000000 	.word	0x20000000

08004590 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004596:	f7fd fb6b 	bl	8001c70 <HAL_GetTick>
 800459a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800459c:	4b5d      	ldr	r3, [pc, #372]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fb61 	bl	8001c70 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e0a7      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80045c8:	4b52      	ldr	r3, [pc, #328]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a51      	ldr	r2, [pc, #324]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80045d4:	f7fd fb4c 	bl	8001c70 <HAL_GetTick>
 80045d8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80045da:	4b4e      	ldr	r3, [pc, #312]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e2:	f7fd fb45 	bl	8001c70 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e089      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80045f8:	4b46      	ldr	r3, [pc, #280]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ee      	bne.n	80045e2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004604:	f7fd fb34 	bl	8001c70 <HAL_GetTick>
 8004608:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800460a:	4b42      	ldr	r3, [pc, #264]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a41      	ldr	r2, [pc, #260]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 8004610:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8004614:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd fb2a 	bl	8001c70 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e070      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800462a:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004636:	f7fd fb1b 	bl	8001c70 <HAL_GetTick>
 800463a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800463c:	4b35      	ldr	r3, [pc, #212]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a34      	ldr	r2, [pc, #208]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 8004642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd fb11 	bl	8001c70 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e057      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800465c:	4b2d      	ldr	r3, [pc, #180]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004668:	f7fd fb02 	bl	8001c70 <HAL_GetTick>
 800466c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800466e:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 8004674:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004678:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467c:	f7fd faf8 	bl	8001c70 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e03e      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800468e:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800469a:	4b1e      	ldr	r3, [pc, #120]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 800469c:	4a1e      	ldr	r2, [pc, #120]	@ (8004718 <HAL_RCC_DeInit+0x188>)
 800469e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80046a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <HAL_RCC_DeInit+0x18c>)
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046ae:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80046b2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80046b4:	4b17      	ldr	r3, [pc, #92]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a16      	ldr	r2, [pc, #88]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046be:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80046c0:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a13      	ldr	r2, [pc, #76]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046c6:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80046ca:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80046cc:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a10      	ldr	r2, [pc, #64]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80046d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <HAL_RCC_DeInit+0x184>)
 80046ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ee:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_DeInit+0x190>)
 80046f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004724 <HAL_RCC_DeInit+0x194>)
 80046f4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80046f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <HAL_RCC_DeInit+0x198>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fd fa74 	bl	8001be8 <HAL_InitTick>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	04003010 	.word	0x04003010
 800471c:	20003000 	.word	0x20003000
 8004720:	20000000 	.word	0x20000000
 8004724:	00f42400 	.word	0x00f42400
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07b      	b.n	8004836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474e:	d009      	beq.n	8004764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e005      	b.n	8004764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fb02 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0104 	and.w	r1, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	f003 0210 	and.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_SPI_Transmit+0x22>
 800485c:	2302      	movs	r3, #2
 800485e:	e12d      	b.n	8004abc <HAL_SPI_Transmit+0x27e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004868:	f7fd fa02 	bl	8001c70 <HAL_GetTick>
 800486c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d002      	beq.n	8004884 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800487e:	2302      	movs	r3, #2
 8004880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004882:	e116      	b.n	8004ab2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Transmit+0x52>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004894:	e10d      	b.n	8004ab2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2203      	movs	r2, #3
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048dc:	d10f      	bne.n	80048fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	d007      	beq.n	800491c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800491a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004924:	d14f      	bne.n	80049c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Transmit+0xf6>
 800492e:	8afb      	ldrh	r3, [r7, #22]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d142      	bne.n	80049ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004958:	e02f      	b.n	80049ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d112      	bne.n	800498e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800498c:	e015      	b.n	80049ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498e:	f7fd f96f 	bl	8001c70 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d803      	bhi.n	80049a6 <HAL_SPI_Transmit+0x168>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d102      	bne.n	80049ac <HAL_SPI_Transmit+0x16e>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049b8:	e07b      	b.n	8004ab2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ca      	bne.n	800495a <HAL_SPI_Transmit+0x11c>
 80049c4:	e050      	b.n	8004a68 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x196>
 80049ce:	8afb      	ldrh	r3, [r7, #22]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d144      	bne.n	8004a5e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049fa:	e030      	b.n	8004a5e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d113      	bne.n	8004a32 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a30:	e015      	b.n	8004a5e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a32:	f7fd f91d 	bl	8001c70 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d803      	bhi.n	8004a4a <HAL_SPI_Transmit+0x20c>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_Transmit+0x212>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004a5c:	e029      	b.n	8004ab2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1c9      	bne.n	80049fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fbdf 	bl	8005230 <SPI_EndRxTxTransaction>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e003      	b.n	8004ab2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d002      	beq.n	8004aea <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae8:	e0fb      	b.n	8004ce2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004af2:	d112      	bne.n	8004b1a <HAL_SPI_Receive+0x56>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10e      	bne.n	8004b1a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2204      	movs	r2, #4
 8004b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f8ef 	bl	8004cf4 <HAL_SPI_TransmitReceive>
 8004b16:	4603      	mov	r3, r0
 8004b18:	e0e8      	b.n	8004cec <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_SPI_Receive+0x64>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0e1      	b.n	8004cec <HAL_SPI_Receive+0x228>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b30:	f7fd f89e 	bl	8001c70 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Receive+0x7e>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b46:	e0cc      	b.n	8004ce2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bba:	2b40      	cmp	r3, #64	@ 0x40
 8004bbc:	d007      	beq.n	8004bce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d16a      	bne.n	8004cac <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bd6:	e032      	b.n	8004c3e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d115      	bne.n	8004c12 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f103 020c 	add.w	r2, r3, #12
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c10:	e015      	b.n	8004c3e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c12:	f7fd f82d 	bl	8001c70 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d803      	bhi.n	8004c2a <HAL_SPI_Receive+0x166>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_Receive+0x16c>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c3c:	e051      	b.n	8004ce2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1c7      	bne.n	8004bd8 <HAL_SPI_Receive+0x114>
 8004c48:	e035      	b.n	8004cb6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d113      	bne.n	8004c80 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	b292      	uxth	r2, r2
 8004c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c7e:	e015      	b.n	8004cac <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c80:	f7fc fff6 	bl	8001c70 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d803      	bhi.n	8004c98 <HAL_SPI_Receive+0x1d4>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Receive+0x1da>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004caa:	e01a      	b.n	8004ce2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1c9      	bne.n	8004c4a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fa52 	bl	8005164 <SPI_EndRxTransaction>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
 8004cd8:	e003      	b.n	8004ce2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	@ 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d02:	2301      	movs	r3, #1
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x26>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e198      	b.n	800504c <HAL_SPI_TransmitReceive+0x358>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d22:	f7fc ffa5 	bl	8001c70 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d00f      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x70>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d4a:	d107      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x68>
 8004d54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d003      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d62:	e16d      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0x82>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0x82>
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d7c:	e160      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d003      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2205      	movs	r2, #5
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	887a      	ldrh	r2, [r7, #2]
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd2:	2b40      	cmp	r3, #64	@ 0x40
 8004dd4:	d007      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dee:	d17c      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x10a>
 8004df8:	8b7b      	ldrh	r3, [r7, #26]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d16a      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e22:	e057      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d11b      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x176>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d016      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x176>
 8004e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d113      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d119      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x1b8>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	1c9a      	adds	r2, r3, #2
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eac:	f7fc fee0 	bl	8001c70 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d80b      	bhi.n	8004ed4 <HAL_SPI_TransmitReceive+0x1e0>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004ed2:	e0b5      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1a2      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x130>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d19d      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x130>
 8004ee8:	e080      	b.n	8004fec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x204>
 8004ef2:	8b7b      	ldrh	r3, [r7, #26]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d16f      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1e:	e05b      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d11c      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x274>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d017      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x274>
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d114      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d119      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x2b6>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d014      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004faa:	f7fc fe61 	bl	8001c70 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d803      	bhi.n	8004fc2 <HAL_SPI_TransmitReceive+0x2ce>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d102      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x2d4>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004fd6:	e033      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d19e      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x22c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d199      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f91d 	bl	8005230 <SPI_EndRxTxTransaction>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d006      	beq.n	800500a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005008:	e01a      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e003      	b.n	8005040 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005048:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800504c:	4618      	mov	r0, r3
 800504e:	3730      	adds	r7, #48	@ 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005064:	f7fc fe04 	bl	8001c70 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005074:	f7fc fdfc 	bl	8001c70 <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	e054      	b.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d050      	beq.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005094:	f7fc fdec 	bl	8001c70 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d902      	bls.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c2:	d111      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d004      	beq.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d107      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f0:	d10f      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e017      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d19b      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000000 	.word	0x20000000

08005164 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005178:	d111      	bne.n	800519e <SPI_EndRxTransaction+0x3a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005182:	d004      	beq.n	800518e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518c:	d107      	bne.n	800519e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a6:	d12a      	bne.n	80051fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b0:	d012      	beq.n	80051d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2180      	movs	r1, #128	@ 0x80
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff ff49 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02d      	beq.n	8005224 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e026      	b.n	8005226 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	2101      	movs	r1, #1
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff36 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01a      	beq.n	8005224 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e013      	b.n	8005226 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	2101      	movs	r1, #1
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff ff23 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e000      	b.n	8005226 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2201      	movs	r2, #1
 8005244:	2102      	movs	r1, #2
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff04 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f043 0220 	orr.w	r2, r3, #32
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e032      	b.n	80052c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005262:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <SPI_EndRxTxTransaction+0xa0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <SPI_EndRxTxTransaction+0xa4>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	0d5b      	lsrs	r3, r3, #21
 800526e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005280:	d112      	bne.n	80052a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fee1 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d016      	beq.n	80052c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e00f      	b.n	80052c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052be:	2b80      	cmp	r3, #128	@ 0x80
 80052c0:	d0f2      	beq.n	80052a8 <SPI_EndRxTxTransaction+0x78>
 80052c2:	e000      	b.n	80052c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80052c4:	bf00      	nop
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000000 	.word	0x20000000
 80052d4:	165e9f81 	.word	0x165e9f81

080052d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e041      	b.n	800536e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fd8a 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 f950 	bl	80055bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0202 	mvn.w	r2, #2
 80053aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8dc 	bl	800557e <HAL_TIM_IC_CaptureCallback>
 80053c6:	e005      	b.n	80053d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8ce 	bl	800556a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8df 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d020      	beq.n	8005426 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01b      	beq.n	8005426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0204 	mvn.w	r2, #4
 80053f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8b6 	bl	800557e <HAL_TIM_IC_CaptureCallback>
 8005412:	e005      	b.n	8005420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f8a8 	bl	800556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8b9 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01b      	beq.n	8005472 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0208 	mvn.w	r2, #8
 8005442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2204      	movs	r2, #4
 8005448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f890 	bl	800557e <HAL_TIM_IC_CaptureCallback>
 800545e:	e005      	b.n	800546c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f882 	bl	800556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f893 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01b      	beq.n	80054be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0210 	mvn.w	r2, #16
 800548e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2208      	movs	r2, #8
 8005494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f86a 	bl	800557e <HAL_TIM_IC_CaptureCallback>
 80054aa:	e005      	b.n	80054b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f85c 	bl	800556a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f86d 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f06f 0201 	mvn.w	r2, #1
 80054da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f83a 	bl	8005556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f98d 	bl	8005820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00c      	beq.n	800552a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f83e 	bl	80055a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0220 	mvn.w	r2, #32
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f95f 	bl	800580c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a46      	ldr	r2, [pc, #280]	@ (80056e8 <TIM_Base_SetConfig+0x12c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055da:	d00f      	beq.n	80055fc <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a43      	ldr	r2, [pc, #268]	@ (80056ec <TIM_Base_SetConfig+0x130>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a42      	ldr	r2, [pc, #264]	@ (80056f0 <TIM_Base_SetConfig+0x134>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a41      	ldr	r2, [pc, #260]	@ (80056f4 <TIM_Base_SetConfig+0x138>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a40      	ldr	r2, [pc, #256]	@ (80056f8 <TIM_Base_SetConfig+0x13c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d108      	bne.n	800560e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a35      	ldr	r2, [pc, #212]	@ (80056e8 <TIM_Base_SetConfig+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02b      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561c:	d027      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a32      	ldr	r2, [pc, #200]	@ (80056ec <TIM_Base_SetConfig+0x130>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d023      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a31      	ldr	r2, [pc, #196]	@ (80056f0 <TIM_Base_SetConfig+0x134>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01f      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a30      	ldr	r2, [pc, #192]	@ (80056f4 <TIM_Base_SetConfig+0x138>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01b      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2f      	ldr	r2, [pc, #188]	@ (80056f8 <TIM_Base_SetConfig+0x13c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d017      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2e      	ldr	r2, [pc, #184]	@ (80056fc <TIM_Base_SetConfig+0x140>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <TIM_Base_SetConfig+0x144>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00f      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <TIM_Base_SetConfig+0x148>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00b      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <TIM_Base_SetConfig+0x14c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d007      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a2a      	ldr	r2, [pc, #168]	@ (800570c <TIM_Base_SetConfig+0x150>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <TIM_Base_SetConfig+0x154>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <TIM_Base_SetConfig+0x12c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0xf8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a12      	ldr	r2, [pc, #72]	@ (80056f8 <TIM_Base_SetConfig+0x13c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d103      	bne.n	80056bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]
  }
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40010400 	.word	0x40010400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40001800 	.word	0x40001800
 800570c:	40001c00 	.word	0x40001c00
 8005710:	40002000 	.word	0x40002000

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e05a      	b.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a21      	ldr	r2, [pc, #132]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d022      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005778:	d01d      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d018      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1b      	ldr	r2, [pc, #108]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a18      	ldr	r2, [pc, #96]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10c      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40001800 	.word	0x40001800

0800580c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005834:	b084      	sub	sp, #16
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	f107 001c 	add.w	r0, r7, #28
 8005842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005846:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800584a:	2b01      	cmp	r3, #1
 800584c:	d123      	bne.n	8005896 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 fae2 	bl	8006e54 <USB_CoreReset>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e01b      	b.n	80058ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fad6 	bl	8006e54 <USB_CoreReset>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	@ 0x38
 80058c0:	e005      	b.n	80058ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058ce:	7fbb      	ldrb	r3, [r7, #30]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10b      	bne.n	80058ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f043 0206 	orr.w	r2, r3, #6
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr

080058fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d165      	bne.n	80059dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a41      	ldr	r2, [pc, #260]	@ (8005a18 <USB_SetTurnaroundTime+0x11c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d906      	bls.n	8005926 <USB_SetTurnaroundTime+0x2a>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a40      	ldr	r2, [pc, #256]	@ (8005a1c <USB_SetTurnaroundTime+0x120>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d202      	bcs.n	8005926 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005920:	230f      	movs	r3, #15
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e062      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a3c      	ldr	r2, [pc, #240]	@ (8005a1c <USB_SetTurnaroundTime+0x120>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d306      	bcc.n	800593c <USB_SetTurnaroundTime+0x40>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a3b      	ldr	r2, [pc, #236]	@ (8005a20 <USB_SetTurnaroundTime+0x124>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d202      	bcs.n	800593c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005936:	230e      	movs	r3, #14
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e057      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a38      	ldr	r2, [pc, #224]	@ (8005a20 <USB_SetTurnaroundTime+0x124>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d306      	bcc.n	8005952 <USB_SetTurnaroundTime+0x56>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a37      	ldr	r2, [pc, #220]	@ (8005a24 <USB_SetTurnaroundTime+0x128>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d202      	bcs.n	8005952 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800594c:	230d      	movs	r3, #13
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e04c      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a33      	ldr	r2, [pc, #204]	@ (8005a24 <USB_SetTurnaroundTime+0x128>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d306      	bcc.n	8005968 <USB_SetTurnaroundTime+0x6c>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4a32      	ldr	r2, [pc, #200]	@ (8005a28 <USB_SetTurnaroundTime+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d802      	bhi.n	8005968 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005962:	230c      	movs	r3, #12
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e041      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a28 <USB_SetTurnaroundTime+0x12c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d906      	bls.n	800597e <USB_SetTurnaroundTime+0x82>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a2e      	ldr	r2, [pc, #184]	@ (8005a2c <USB_SetTurnaroundTime+0x130>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d802      	bhi.n	800597e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005978:	230b      	movs	r3, #11
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e036      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4a2a      	ldr	r2, [pc, #168]	@ (8005a2c <USB_SetTurnaroundTime+0x130>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d906      	bls.n	8005994 <USB_SetTurnaroundTime+0x98>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a29      	ldr	r2, [pc, #164]	@ (8005a30 <USB_SetTurnaroundTime+0x134>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d802      	bhi.n	8005994 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800598e:	230a      	movs	r3, #10
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e02b      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4a26      	ldr	r2, [pc, #152]	@ (8005a30 <USB_SetTurnaroundTime+0x134>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d906      	bls.n	80059aa <USB_SetTurnaroundTime+0xae>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4a25      	ldr	r2, [pc, #148]	@ (8005a34 <USB_SetTurnaroundTime+0x138>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d202      	bcs.n	80059aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059a4:	2309      	movs	r3, #9
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e020      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4a21      	ldr	r2, [pc, #132]	@ (8005a34 <USB_SetTurnaroundTime+0x138>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d306      	bcc.n	80059c0 <USB_SetTurnaroundTime+0xc4>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4a20      	ldr	r2, [pc, #128]	@ (8005a38 <USB_SetTurnaroundTime+0x13c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d802      	bhi.n	80059c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059ba:	2308      	movs	r3, #8
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e015      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a38 <USB_SetTurnaroundTime+0x13c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d906      	bls.n	80059d6 <USB_SetTurnaroundTime+0xda>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4a1c      	ldr	r2, [pc, #112]	@ (8005a3c <USB_SetTurnaroundTime+0x140>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d202      	bcs.n	80059d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059d0:	2307      	movs	r3, #7
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e00a      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059d6:	2306      	movs	r3, #6
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e007      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059e2:	2309      	movs	r3, #9
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e001      	b.n	80059ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059e8:	2309      	movs	r3, #9
 80059ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	00d8acbf 	.word	0x00d8acbf
 8005a1c:	00e4e1c0 	.word	0x00e4e1c0
 8005a20:	00f42400 	.word	0x00f42400
 8005a24:	01067380 	.word	0x01067380
 8005a28:	011a499f 	.word	0x011a499f
 8005a2c:	01312cff 	.word	0x01312cff
 8005a30:	014ca43f 	.word	0x014ca43f
 8005a34:	016e3600 	.word	0x016e3600
 8005a38:	01a6ab1f 	.word	0x01a6ab1f
 8005a3c:	01e84800 	.word	0x01e84800

08005a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d115      	bne.n	8005ad2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ab2:	200a      	movs	r0, #10
 8005ab4:	f7fc f8e8 	bl	8001c88 <HAL_Delay>
      ms += 10U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	330a      	adds	r3, #10
 8005abc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f939 	bl	8006d36 <USB_GetMode>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d01e      	beq.n	8005b08 <USB_SetCurrentMode+0x84>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ace:	d9f0      	bls.n	8005ab2 <USB_SetCurrentMode+0x2e>
 8005ad0:	e01a      	b.n	8005b08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d115      	bne.n	8005b04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ae4:	200a      	movs	r0, #10
 8005ae6:	f7fc f8cf 	bl	8001c88 <HAL_Delay>
      ms += 10U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	330a      	adds	r3, #10
 8005aee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 f920 	bl	8006d36 <USB_GetMode>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <USB_SetCurrentMode+0x84>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b00:	d9f0      	bls.n	8005ae4 <USB_SetCurrentMode+0x60>
 8005b02:	e001      	b.n	8005b08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e005      	b.n	8005b14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b0c:	d101      	bne.n	8005b12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	e009      	b.n	8005b50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3340      	adds	r3, #64	@ 0x40
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b0e      	cmp	r3, #14
 8005b54:	d9f2      	bls.n	8005b3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11c      	bne.n	8005b98 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b96:	e00b      	b.n	8005bb0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10d      	bne.n	8005be0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bcc:	2100      	movs	r1, #0
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f968 	bl	8005ea4 <USB_SetDevSpeed>
 8005bd4:	e008      	b.n	8005be8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f963 	bl	8005ea4 <USB_SetDevSpeed>
 8005bde:	e003      	b.n	8005be8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005be0:	2103      	movs	r1, #3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f95e 	bl	8005ea4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be8:	2110      	movs	r1, #16
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f8fa 	bl	8005de4 <USB_FlushTxFifo>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f924 	bl	8005e48 <USB_FlushRxFifo>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e043      	b.n	8005cbc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4a:	d118      	bne.n	8005c7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e013      	b.n	8005c90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c74:	461a      	mov	r2, r3
 8005c76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e008      	b.n	8005c90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d3b5      	bcc.n	8005c34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	e043      	b.n	8005d56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ce4:	d118      	bne.n	8005d18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e013      	b.n	8005d2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e008      	b.n	8005d2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	3301      	adds	r3, #1
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d3b5      	bcc.n	8005cce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d105      	bne.n	8005d98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f043 0210 	orr.w	r2, r3, #16
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <USB_DevInit+0x2c4>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005da4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f043 0208 	orr.w	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005db8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dc8:	f043 0304 	orr.w	r3, r3, #4
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ddc:	b004      	add	sp, #16
 8005dde:	4770      	bx	lr
 8005de0:	803c3800 	.word	0x803c3800

08005de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfe:	d901      	bls.n	8005e04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e01b      	b.n	8005e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	daf2      	bge.n	8005df2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	019b      	lsls	r3, r3, #6
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e28:	d901      	bls.n	8005e2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e006      	b.n	8005e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d0f0      	beq.n	8005e1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e60:	d901      	bls.n	8005e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e018      	b.n	8005e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	daf2      	bge.n	8005e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2210      	movs	r2, #16
 8005e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e84:	d901      	bls.n	8005e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e006      	b.n	8005e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d0f0      	beq.n	8005e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0306 	and.w	r3, r3, #6
 8005eee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e00a      	b.n	8005f12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d002      	beq.n	8005f08 <USB_GetDevSpeed+0x32>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b06      	cmp	r3, #6
 8005f06:	d102      	bne.n	8005f0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	75fb      	strb	r3, [r7, #23]
 8005f0c:	e001      	b.n	8005f12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f0e:	230f      	movs	r3, #15
 8005f10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d13a      	bne.n	8005fb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	68f9      	ldr	r1, [r7, #12]
 8005f56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d155      	bne.n	8006020 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e036      	b.n	8006020 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb8:	69da      	ldr	r2, [r3, #28]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	041b      	lsls	r3, r3, #16
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d11a      	bne.n	8006020 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006006:	430b      	orrs	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800601e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d161      	bne.n	8006110 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800605e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006062:	d11f      	bne.n	80060a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006082:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c4:	4013      	ands	r3, r2
 80060c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	2101      	movs	r1, #1
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060e8:	4013      	ands	r3, r2
 80060ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	440b      	add	r3, r1
 8006102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006106:	4619      	mov	r1, r3
 8006108:	4b35      	ldr	r3, [pc, #212]	@ (80061e0 <USB_DeactivateEndpoint+0x1b0>)
 800610a:	4013      	ands	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	e060      	b.n	80061d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006126:	d11f      	bne.n	8006168 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006146:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006166:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2101      	movs	r1, #1
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	041b      	lsls	r3, r3, #16
 8006180:	43db      	mvns	r3, r3
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006188:	4013      	ands	r3, r2
 800618a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	2101      	movs	r1, #1
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	43db      	mvns	r3, r3
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ac:	4013      	ands	r3, r2
 80061ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	0159      	lsls	r1, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	4619      	mov	r1, r3
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <USB_DeactivateEndpoint+0x1b4>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	ec337800 	.word	0xec337800
 80061e4:	eff37800 	.word	0xeff37800

080061e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	@ 0x28
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	f040 817a 	bne.w	80064fe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d132      	bne.n	8006278 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800622c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006230:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006270:	0cdb      	lsrs	r3, r3, #19
 8006272:	04db      	lsls	r3, r3, #19
 8006274:	6113      	str	r3, [r2, #16]
 8006276:	e092      	b.n	800639e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006292:	0cdb      	lsrs	r3, r3, #19
 8006294:	04db      	lsls	r3, r3, #19
 8006296:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	0151      	lsls	r1, r2, #5
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	440a      	add	r2, r1
 80062ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11a      	bne.n	80062f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d903      	bls.n	80062d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062f4:	6113      	str	r3, [r2, #16]
 80062f6:	e01b      	b.n	8006330 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6919      	ldr	r1, [r3, #16]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	440b      	add	r3, r1
 8006310:	1e59      	subs	r1, r3, #1
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	fbb1 f3f3 	udiv	r3, r1, r3
 800631a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800631c:	4ba2      	ldr	r3, [pc, #648]	@ (80065a8 <USB_EPStartXfer+0x3c0>)
 800631e:	400b      	ands	r3, r1
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	0148      	lsls	r0, r1, #5
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	4401      	add	r1, r0
 8006328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800632c:	4313      	orrs	r3, r2
 800632e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006346:	69b9      	ldr	r1, [r7, #24]
 8006348:	0148      	lsls	r0, r1, #5
 800634a:	69f9      	ldr	r1, [r7, #28]
 800634c:	4401      	add	r1, r0
 800634e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006352:	4313      	orrs	r3, r2
 8006354:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d11f      	bne.n	800639e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006378:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800637c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006398:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800639c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d14b      	bne.n	800643c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	791b      	ldrb	r3, [r3, #4]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d128      	bne.n	800641a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d110      	bne.n	80063fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	e00f      	b.n	800641a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006418:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006434:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e165      	b.n	8006708 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006456:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800645a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	791b      	ldrb	r3, [r3, #4]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d015      	beq.n	8006490 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 814d 	beq.w	8006708 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800648a:	4313      	orrs	r3, r2
 800648c:	634b      	str	r3, [r1, #52]	@ 0x34
 800648e:	e13b      	b.n	8006708 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d110      	bne.n	80064c2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e00f      	b.n	80064e2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	68d9      	ldr	r1, [r3, #12]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	b298      	uxth	r0, r3
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4603      	mov	r3, r0
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f9b8 	bl	800686c <USB_WritePacket>
 80064fc:	e104      	b.n	8006708 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006518:	0cdb      	lsrs	r3, r3, #19
 800651a:	04db      	lsls	r3, r3, #19
 800651c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006538:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800653c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006540:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d131      	bne.n	80065ac <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	0148      	lsls	r0, r1, #5
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	4401      	add	r1, r0
 800657e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006582:	4313      	orrs	r3, r2
 8006584:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a4:	6113      	str	r3, [r2, #16]
 80065a6:	e061      	b.n	800666c <USB_EPStartXfer+0x484>
 80065a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d123      	bne.n	80065fc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ca:	69b9      	ldr	r1, [r7, #24]
 80065cc:	0148      	lsls	r0, r1, #5
 80065ce:	69f9      	ldr	r1, [r7, #28]
 80065d0:	4401      	add	r1, r0
 80065d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065d6:	4313      	orrs	r3, r2
 80065d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065f8:	6113      	str	r3, [r2, #16]
 80065fa:	e037      	b.n	800666c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4413      	add	r3, r2
 8006606:	1e5a      	subs	r2, r3, #1
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	8afa      	ldrh	r2, [r7, #22]
 8006618:	fb03 f202 	mul.w	r2, r3, r2
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	8afb      	ldrh	r3, [r7, #22]
 8006630:	04d9      	lsls	r1, r3, #19
 8006632:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <USB_EPStartXfer+0x52c>)
 8006634:	400b      	ands	r3, r1
 8006636:	69b9      	ldr	r1, [r7, #24]
 8006638:	0148      	lsls	r0, r1, #5
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	4401      	add	r1, r0
 800663e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006642:	4313      	orrs	r3, r2
 8006644:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	0148      	lsls	r0, r1, #5
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	4401      	add	r1, r0
 8006664:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006668:	4313      	orrs	r3, r2
 800666a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10d      	bne.n	800668e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68d9      	ldr	r1, [r3, #12]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668a:	460a      	mov	r2, r1
 800668c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d128      	bne.n	80066e8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e00f      	b.n	80066e8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006702:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	1ff80000 	.word	0x1ff80000

08006718 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d14a      	bne.n	80067cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800674a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674e:	f040 8086 	bne.w	800685e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006770:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006774:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006794:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006798:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d902      	bls.n	80067b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
          break;
 80067ae:	e056      	b.n	800685e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c8:	d0e7      	beq.n	800679a <USB_EPStopXfer+0x82>
 80067ca:	e048      	b.n	800685e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e4:	d13b      	bne.n	800685e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006804:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006808:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	7812      	ldrb	r2, [r2, #0]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800682c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f242 7210 	movw	r2, #10000	@ 0x2710
 800683a:	4293      	cmp	r3, r2
 800683c:	d902      	bls.n	8006844 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
          break;
 8006842:	e00c      	b.n	800685e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685c:	d0e7      	beq.n	800682e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	@ 0x24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4611      	mov	r1, r2
 8006878:	461a      	mov	r2, r3
 800687a:	460b      	mov	r3, r1
 800687c:	71fb      	strb	r3, [r7, #7]
 800687e:	4613      	mov	r3, r2
 8006880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800688a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d123      	bne.n	80068da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006892:	88bb      	ldrh	r3, [r7, #4]
 8006894:	3303      	adds	r3, #3
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e018      	b.n	80068d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	031a      	lsls	r2, r3, #12
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ac:	461a      	mov	r2, r3
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3301      	adds	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d3e2      	bcc.n	80068a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3724      	adds	r7, #36	@ 0x24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b08b      	sub	sp, #44	@ 0x2c
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	089b      	lsrs	r3, r3, #2
 8006902:	b29b      	uxth	r3, r3
 8006904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800690e:	2300      	movs	r3, #0
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	e014      	b.n	800693e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	3301      	adds	r3, #1
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	3301      	adds	r3, #1
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	3301      	adds	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	3301      	adds	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	3301      	adds	r3, #1
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	429a      	cmp	r2, r3
 8006944:	d3e6      	bcc.n	8006914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006946:	8bfb      	ldrh	r3, [r7, #30]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01e      	beq.n	800698a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006956:	461a      	mov	r2, r3
 8006958:	f107 0310 	add.w	r3, r7, #16
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
 800696c:	b2da      	uxtb	r2, r3
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	701a      	strb	r2, [r3, #0]
      i++;
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	3301      	adds	r3, #1
 8006976:	623b      	str	r3, [r7, #32]
      pDest++;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	3301      	adds	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800697e:	8bfb      	ldrh	r3, [r7, #30]
 8006980:	3b01      	subs	r3, #1
 8006982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006984:	8bfb      	ldrh	r3, [r7, #30]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1ea      	bne.n	8006960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800698c:	4618      	mov	r0, r3
 800698e:	372c      	adds	r7, #44	@ 0x2c
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d12c      	bne.n	8006a0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db12      	blt.n	80069ec <USB_EPSetStall+0x54>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	0151      	lsls	r1, r2, #5
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	440a      	add	r2, r1
 8006a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e02b      	b.n	8006a66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	db12      	blt.n	8006a46 <USB_EPSetStall+0xae>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00f      	beq.n	8006a46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d128      	bne.n	8006ae2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	791b      	ldrb	r3, [r3, #4]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d003      	beq.n	8006ac0 <USB_EPClearStall+0x4c>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d138      	bne.n	8006b32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e027      	b.n	8006b32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006afc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d003      	beq.n	8006b12 <USB_EPClearStall+0x9e>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d10f      	bne.n	8006b32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bba:	f023 0302 	bic.w	r3, r3, #2
 8006bbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006be8:	f023 0303 	bic.w	r3, r3, #3
 8006bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
 8006c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4013      	ands	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	0c1b      	lsrs	r3, r3, #16
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	b29b      	uxth	r3, r3
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	01db      	lsls	r3, r3, #7
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4013      	ands	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d28:	68bb      	ldr	r3, [r7, #8]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f003 0301 	and.w	r3, r3, #1
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	460b      	mov	r3, r1
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	333c      	adds	r3, #60	@ 0x3c
 8006dae:	3304      	adds	r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	4a26      	ldr	r2, [pc, #152]	@ (8006e50 <USB_EP0_OutStart+0xb8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d90a      	bls.n	8006dd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dcc:	d101      	bne.n	8006dd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e037      	b.n	8006e42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e00:	f043 0318 	orr.w	r3, r3, #24
 8006e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10f      	bne.n	8006e40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e26:	461a      	mov	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	4f54300a 	.word	0x4f54300a

08006e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e6c:	d901      	bls.n	8006e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e01b      	b.n	8006eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	daf2      	bge.n	8006e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e96:	d901      	bls.n	8006e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e006      	b.n	8006eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d0f0      	beq.n	8006e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <FileMng_init>:
ufs_Item_Type item;
ufs_ItemInfo_Type item_info[10];
uint32_t datafile[200] = {0};

void FileMng_init(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
	Ufs = newUFS(&Ufs_Cfg);
 8006ebc:	4812      	ldr	r0, [pc, #72]	@ (8006f08 <FileMng_init+0x50>)
 8006ebe:	f003 f801 	bl	8009ec4 <newUFS>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a11      	ldr	r2, [pc, #68]	@ (8006f0c <FileMng_init+0x54>)
 8006ec6:	6013      	str	r3, [r2, #0]
//	ufs_FastFormat(Ufs);
	Handshake_infor.param.memSize = Ufs->conf->api->u32numberSectorOfDevice * Ufs->conf->api->u16numberByteOfSector;
 8006ec8:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <FileMng_init+0x54>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8006f0c <FileMng_init+0x54>)
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	6952      	ldr	r2, [r2, #20]
 8006ed8:	6812      	ldr	r2, [r2, #0]
 8006eda:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f10 <FileMng_init+0x58>)
 8006ee2:	6013      	str	r3, [r2, #0]
	Handshake_infor.param.maxLen = Ufs->conf->api->u16numberByteOfSector ;
 8006ee4:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <FileMng_init+0x54>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006eee:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <FileMng_init+0x58>)
 8006ef0:	80da      	strh	r2, [r3, #6]
	Handshake_infor.param.tineWrite = 0;
 8006ef2:	4b07      	ldr	r3, [pc, #28]	@ (8006f10 <FileMng_init+0x58>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	809a      	strh	r2, [r3, #4]

	Filecmd.data = NULL;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <FileMng_init+0x5c>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	Filecmd.dataLen = 0;
 8006efe:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <FileMng_init+0x5c>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	805a      	strh	r2, [r3, #2]
}
 8006f04:	bf00      	nop
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000078 	.word	0x20000078
 8006f0c:	20001ca4 	.word	0x20001ca4
 8006f10:	20001c90 	.word	0x20001c90
 8006f14:	20001c9c 	.word	0x20001c9c

08006f18 <ServiceHandle>:

void ServiceHandle(uint8_t *data, uint16_t length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]
	Filecmd.Cmd_id = data[0];
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <ServiceHandle+0x3c>)
 8006f2a:	701a      	strb	r2, [r3, #0]
	Filecmd.dataLen = length - 1;
 8006f2c:	887b      	ldrh	r3, [r7, #2]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	4b08      	ldr	r3, [pc, #32]	@ (8006f54 <ServiceHandle+0x3c>)
 8006f34:	805a      	strh	r2, [r3, #2]
	Filecmd.data = &data[1];
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	4a06      	ldr	r2, [pc, #24]	@ (8006f54 <ServiceHandle+0x3c>)
 8006f3c:	6053      	str	r3, [r2, #4]

	Service[Filecmd.Cmd_id]();
 8006f3e:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <ServiceHandle+0x3c>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <ServiceHandle+0x40>)
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	4798      	blx	r3
//	Filecmd.data = NULL;
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20001c9c 	.word	0x20001c9c
 8006f58:	2000000c 	.word	0x2000000c

08006f5c <Service_Handshake>:

void Service_Handshake(void)
{
 8006f5c:	b598      	push	{r3, r4, r7, lr}
 8006f5e:	af00      	add	r7, sp, #0

	Handshake_infor.param.memSize = Handshake_infor.param.memSize - ufs_GetUsedSize(Ufs);
 8006f60:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <Service_Handshake+0x2c>)
 8006f62:	681c      	ldr	r4, [r3, #0]
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <Service_Handshake+0x30>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f003 fd93 	bl	800aa94 <ufs_GetUsedSize>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	1ae3      	subs	r3, r4, r3
 8006f72:	4a05      	ldr	r2, [pc, #20]	@ (8006f88 <Service_Handshake+0x2c>)
 8006f74:	6013      	str	r3, [r2, #0]
	Handshake_infor.param.state = UFS_OK;
 8006f76:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <Service_Handshake+0x2c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	721a      	strb	r2, [r3, #8]
	Respond(Handshake_infor.raw, 8);
 8006f7c:	2108      	movs	r1, #8
 8006f7e:	4802      	ldr	r0, [pc, #8]	@ (8006f88 <Service_Handshake+0x2c>)
 8006f80:	f000 fbf2 	bl	8007768 <Respond>
}
 8006f84:	bf00      	nop
 8006f86:	bd98      	pop	{r3, r4, r7, pc}
 8006f88:	20001c90 	.word	0x20001c90
 8006f8c:	20001ca4 	.word	0x20001ca4

08006f90 <Service_AccessFolder>:

void Service_AccessFolder(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
	uint8_t Ret = UFS_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75bb      	strb	r3, [r7, #22]
	uint8_t lenname = Filecmd.data[0];
 8006f9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <Service_AccessFolder+0x60>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	75fb      	strb	r3, [r7, #23]
	uint8_t namepath[16] = {0};
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
	memcpy(namepath, &Filecmd.data[1], lenname);
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff0 <Service_AccessFolder+0x60>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	7dfa      	ldrb	r2, [r7, #23]
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f008 febe 	bl	800fd3e <memcpy>
	if(ufs_Mount(Ufs, namepath) != UFS_OK)
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <Service_AccessFolder+0x64>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	1d3a      	adds	r2, r7, #4
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f004 fc30 	bl	800b830 <ufs_Mount>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <Service_AccessFolder+0x4a>
	{
		Ret = UFS_NOT_OK;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75bb      	strb	r3, [r7, #22]
	}

	Respond(&Ret, 1);
 8006fda:	f107 0316 	add.w	r3, r7, #22
 8006fde:	2101      	movs	r1, #1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fbc1 	bl	8007768 <Respond>
}
 8006fe6:	bf00      	nop
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20001c9c 	.word	0x20001c9c
 8006ff4:	20001ca4 	.word	0x20001ca4

08006ff8 <Service_OpenFile>:

void Service_OpenFile(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
	uint8_t Ret[5] = {UFS_NOT_OK};
 8006ffe:	2301      	movs	r3, #1
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	753b      	strb	r3, [r7, #20]

	uint8_t lenname = Filecmd.data[0];
 8007006:	4b1e      	ldr	r3, [pc, #120]	@ (8007080 <Service_OpenFile+0x88>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	75fb      	strb	r3, [r7, #23]
	uint8_t nameFile[16] = {0};
 800700e:	2300      	movs	r3, #0
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	1d3b      	adds	r3, r7, #4
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	609a      	str	r2, [r3, #8]
	memcpy(nameFile, &Filecmd.data[1], lenname);
 800701c:	4b18      	ldr	r3, [pc, #96]	@ (8007080 <Service_OpenFile+0x88>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	1c59      	adds	r1, r3, #1
 8007022:	7dfa      	ldrb	r2, [r7, #23]
 8007024:	463b      	mov	r3, r7
 8007026:	4618      	mov	r0, r3
 8007028:	f008 fe89 	bl	800fd3e <memcpy>

	if(ufs_OpenItem(Ufs, nameFile , &item) == UFS_OK)
 800702c:	4b15      	ldr	r3, [pc, #84]	@ (8007084 <Service_OpenFile+0x8c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4639      	mov	r1, r7
 8007032:	4a15      	ldr	r2, [pc, #84]	@ (8007088 <Service_OpenFile+0x90>)
 8007034:	4618      	mov	r0, r3
 8007036:	f003 f84b 	bl	800a0d0 <ufs_OpenItem>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <Service_OpenFile+0x4c>
	{
		Ret[0] = UFS_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	743b      	strb	r3, [r7, #16]
	}
	Ret[1] = item.info.comp.size & 0xFF;
 8007044:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <Service_OpenFile+0x90>)
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	b2db      	uxtb	r3, r3
 800704a:	747b      	strb	r3, [r7, #17]
	Ret[2] = (item.info.comp.size >> 8) & 0xFF;
 800704c:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <Service_OpenFile+0x90>)
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	0a1b      	lsrs	r3, r3, #8
 8007052:	b2db      	uxtb	r3, r3
 8007054:	74bb      	strb	r3, [r7, #18]
	Ret[3] = (item.info.comp.size >> 16) & 0xFF;
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <Service_OpenFile+0x90>)
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	b2db      	uxtb	r3, r3
 800705e:	74fb      	strb	r3, [r7, #19]
	Ret[4] = item.info.comp.size >> 24;
 8007060:	4b09      	ldr	r3, [pc, #36]	@ (8007088 <Service_OpenFile+0x90>)
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	0e1b      	lsrs	r3, r3, #24
 8007066:	b2db      	uxtb	r3, r3
 8007068:	753b      	strb	r3, [r7, #20]

	Respond(Ret, 5);
 800706a:	f107 0310 	add.w	r3, r7, #16
 800706e:	2105      	movs	r1, #5
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fb79 	bl	8007768 <Respond>
}
 8007076:	bf00      	nop
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20001c9c 	.word	0x20001c9c
 8007084:	20001ca4 	.word	0x20001ca4
 8007088:	20001ca8 	.word	0x20001ca8

0800708c <Service_WriteFirstPacket>:

double time_spent[2];
uint16_t stt = 0;

void Service_WriteFirstPacket(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
	uint8_t Ret = UFS_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
	WriteFile_p infor_write;
	infor_write.head = (WriteFile_head*)Filecmd.data;
 8007096:	4b11      	ldr	r3, [pc, #68]	@ (80070dc <Service_WriteFirstPacket+0x50>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	607b      	str	r3, [r7, #4]
	infor_write.data = &Filecmd.data[7];
 800709c:	4b0f      	ldr	r3, [pc, #60]	@ (80070dc <Service_WriteFirstPacket+0x50>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	3307      	adds	r3, #7
 80070a2:	60bb      	str	r3, [r7, #8]
	stt = 0;
 80070a4:	4b0e      	ldr	r3, [pc, #56]	@ (80070e0 <Service_WriteFirstPacket+0x54>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	801a      	strh	r2, [r3, #0]

	if(ufs_WriteFile(&item, infor_write.data, infor_write.head->param.dataLen, CHECKSUM_ENABLE) != UFS_OK)
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	885b      	ldrh	r3, [r3, #2]
 80070b0:	461a      	mov	r2, r3
 80070b2:	2301      	movs	r3, #1
 80070b4:	480b      	ldr	r0, [pc, #44]	@ (80070e4 <Service_WriteFirstPacket+0x58>)
 80070b6:	f003 fdff 	bl	800acb8 <ufs_WriteFile>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <Service_WriteFirstPacket+0x3c>
	{
		Ret = item.err;
 80070c0:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <Service_WriteFirstPacket+0x58>)
 80070c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070c6:	73fb      	strb	r3, [r7, #15]
	}

	Respond(&Ret, 1);
 80070c8:	f107 030f 	add.w	r3, r7, #15
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb4a 	bl	8007768 <Respond>
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20001c9c 	.word	0x20001c9c
 80070e0:	20001e20 	.word	0x20001e20
 80070e4:	20001ca8 	.word	0x20001ca8

080070e8 <Service_WriteContinue>:

void Service_WriteContinue(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
	uint8_t Ret = UFS_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
	WriteFileContinue_p infor_write;
	infor_write.head = (WriteFileContinue_head*)Filecmd.data;
 80070f2:	4b16      	ldr	r3, [pc, #88]	@ (800714c <Service_WriteContinue+0x64>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	607b      	str	r3, [r7, #4]
	infor_write.data = &Filecmd.data[5];
 80070f8:	4b14      	ldr	r3, [pc, #80]	@ (800714c <Service_WriteContinue+0x64>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	3305      	adds	r3, #5
 80070fe:	60bb      	str	r3, [r7, #8]
	if( ++ stt == infor_write.head->param.stt)
 8007100:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <Service_WriteContinue+0x68>)
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <Service_WriteContinue+0x68>)
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	4b10      	ldr	r3, [pc, #64]	@ (8007150 <Service_WriteContinue+0x68>)
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	885b      	ldrh	r3, [r3, #2]
 8007114:	429a      	cmp	r2, r3
 8007116:	d10e      	bne.n	8007136 <Service_WriteContinue+0x4e>
	{
		if(ufs_WriteAppendFile(&item, infor_write.data, infor_write.head->param.dataLen, CHECKSUM_ENABLE) != UFS_OK)
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	2301      	movs	r3, #1
 8007122:	480c      	ldr	r0, [pc, #48]	@ (8007154 <Service_WriteContinue+0x6c>)
 8007124:	f003 ff06 	bl	800af34 <ufs_WriteAppendFile>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <Service_WriteContinue+0x4e>
		{
			Ret = item.err;
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <Service_WriteContinue+0x6c>)
 8007130:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007134:	73fb      	strb	r3, [r7, #15]
		}
	}
	Respond(&Ret, 1);
 8007136:	f107 030f 	add.w	r3, r7, #15
 800713a:	2101      	movs	r1, #1
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fb13 	bl	8007768 <Respond>
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20001c9c 	.word	0x20001c9c
 8007150:	20001e20 	.word	0x20001e20
 8007154:	20001ca8 	.word	0x20001ca8

08007158 <Service_ReadFile>:

void Service_ReadFile(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0

	Readfile_t *InforRead = (Readfile_t *)Filecmd.data;
 800715e:	4b22      	ldr	r3, [pc, #136]	@ (80071e8 <Service_ReadFile+0x90>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
	uint32_t reallen_read = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	60bb      	str	r3, [r7, #8]
	uint8_t *data = (uint8_t *)malloc(InforRead->length + 5);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	889b      	ldrh	r3, [r3, #4]
 800716c:	3305      	adds	r3, #5
 800716e:	4618      	mov	r0, r3
 8007170:	f008 fab0 	bl	800f6d4 <malloc>
 8007174:	4603      	mov	r3, r0
 8007176:	607b      	str	r3, [r7, #4]
	data[0] = UFS_OK;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]


	reallen_read = ufs_ReadFile(&item, InforRead->offset, &data[5], InforRead->length);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6819      	ldr	r1, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	1d5a      	adds	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	889b      	ldrh	r3, [r3, #4]
 800718a:	4818      	ldr	r0, [pc, #96]	@ (80071ec <Service_ReadFile+0x94>)
 800718c:	f003 fcf8 	bl	800ab80 <ufs_ReadFile>
 8007190:	60b8      	str	r0, [r7, #8]
	data[1] = reallen_read >> 24;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	0e1a      	lsrs	r2, r3, #24
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3301      	adds	r3, #1
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
	data[2] = (reallen_read >> 16) & 0xFF;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0c1a      	lsrs	r2, r3, #16
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3302      	adds	r3, #2
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
	data[3] = (reallen_read >> 8) & 0xFF;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	0a1a      	lsrs	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3303      	adds	r3, #3
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
	data[4] = reallen_read & 0xFF;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]


	Respond(data, InforRead->length + 5);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	889b      	ldrh	r3, [r3, #4]
 80071c4:	3305      	adds	r3, #5
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 facc 	bl	8007768 <Respond>

	InforRead = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
	free(data);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f008 fa85 	bl	800f6e4 <free>
	data = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20001c9c 	.word	0x20001c9c
 80071ec:	20001ca8 	.word	0x20001ca8

080071f0 <Service_ReadAllfile>:

void Service_ReadAllfile(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
	Readfile_t *InforRead = (Readfile_t *)Filecmd.data;
 80071fa:	4b79      	ldr	r3, [pc, #484]	@ (80073e0 <Service_ReadAllfile+0x1f0>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8007202:	f102 0208 	add.w	r2, r2, #8
 8007206:	6013      	str	r3, [r2, #0]

//	uint8_t *data = (uint8_t *)malloc(Handshake_infor.param.maxLen + 2);
	uint8_t data[4096];
	data[0] = UFS_OK;
 8007208:	f107 0310 	add.w	r3, r7, #16
 800720c:	2200      	movs	r2, #0
 800720e:	f803 2c0c 	strb.w	r2, [r3, #-12]

	if(ufs_OpenItem(Ufs, InforRead->name , &item) != UFS_OK)
 8007212:	4b74      	ldr	r3, [pc, #464]	@ (80073e4 <Service_ReadAllfile+0x1f4>)
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800721a:	f103 0308 	add.w	r3, r3, #8
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3306      	adds	r3, #6
 8007222:	4a71      	ldr	r2, [pc, #452]	@ (80073e8 <Service_ReadAllfile+0x1f8>)
 8007224:	4619      	mov	r1, r3
 8007226:	f002 ff53 	bl	800a0d0 <ufs_OpenItem>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <Service_ReadAllfile+0x58>
	{
		data[0] = UFS_NOT_OK;
 8007230:	f107 0310 	add.w	r3, r7, #16
 8007234:	2201      	movs	r2, #1
 8007236:	f803 2c0c 	strb.w	r2, [r3, #-12]
		Respond(data, 1);
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	3b0c      	subs	r3, #12
 8007240:	2101      	movs	r1, #1
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fa90 	bl	8007768 <Respond>
	}

	uint16_t numpack = item.info.comp.size / Handshake_infor.param.maxLen;
 8007248:	4b67      	ldr	r3, [pc, #412]	@ (80073e8 <Service_ReadAllfile+0x1f8>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	4a67      	ldr	r2, [pc, #412]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 800724e:	88d2      	ldrh	r2, [r2, #6]
 8007250:	fbb3 f3f2 	udiv	r3, r3, r2
 8007254:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8007258:	f102 020e 	add.w	r2, r2, #14
 800725c:	8013      	strh	r3, [r2, #0]
	uint16_t lastlen = item.info.comp.size - numpack * Handshake_infor.param.maxLen;
 800725e:	4b62      	ldr	r3, [pc, #392]	@ (80073e8 <Service_ReadAllfile+0x1f8>)
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	b29a      	uxth	r2, r3
 8007264:	4b61      	ldr	r3, [pc, #388]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 8007266:	88db      	ldrh	r3, [r3, #6]
 8007268:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 800726c:	f101 010e 	add.w	r1, r1, #14
 8007270:	8809      	ldrh	r1, [r1, #0]
 8007272:	fb11 f303 	smulbb	r3, r1, r3
 8007276:	b29b      	uxth	r3, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800727e:	f102 0206 	add.w	r2, r2, #6
 8007282:	8013      	strh	r3, [r2, #0]

	if(lastlen > 0)
 8007284:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007288:	f103 0306 	add.w	r3, r3, #6
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <Service_ReadAllfile+0xb8>
	{
		numpack ++;
 8007292:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007296:	f103 030e 	add.w	r3, r3, #14
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80072a2:	f102 020e 	add.w	r2, r2, #14
 80072a6:	8013      	strh	r3, [r2, #0]
	}
	for(uint16_t count = 0; count < numpack - 1; count ++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80072ae:	f102 020c 	add.w	r2, r2, #12
 80072b2:	8013      	strh	r3, [r2, #0]
 80072b4:	e03e      	b.n	8007334 <Service_ReadAllfile+0x144>
	{
		data[1] = count;
 80072b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80072ba:	f103 030c 	add.w	r3, r3, #12
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	f803 2c0b 	strb.w	r2, [r3, #-11]
		ufs_ReadFile(&item, count * Handshake_infor.param.maxLen, &data[2], count * Handshake_infor.param.maxLen + Handshake_infor.param.maxLen);
 80072ca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80072ce:	f103 030c 	add.w	r3, r3, #12
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	4a45      	ldr	r2, [pc, #276]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 80072d6:	88d2      	ldrh	r2, [r2, #6]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80072e2:	f103 030c 	add.w	r3, r3, #12
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	4a40      	ldr	r2, [pc, #256]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 80072ea:	88d2      	ldrh	r2, [r2, #6]
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	4a3e      	ldr	r2, [pc, #248]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 80072f2:	88d2      	ldrh	r2, [r2, #6]
 80072f4:	4413      	add	r3, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f107 0310 	add.w	r3, r7, #16
 80072fc:	3b0c      	subs	r3, #12
 80072fe:	1c9a      	adds	r2, r3, #2
 8007300:	4603      	mov	r3, r0
 8007302:	4839      	ldr	r0, [pc, #228]	@ (80073e8 <Service_ReadAllfile+0x1f8>)
 8007304:	f003 fc3c 	bl	800ab80 <ufs_ReadFile>
		Respond(data, Handshake_infor.param.maxLen + 2);
 8007308:	4b38      	ldr	r3, [pc, #224]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	3302      	adds	r3, #2
 800730e:	b29a      	uxth	r2, r3
 8007310:	f107 0310 	add.w	r3, r7, #16
 8007314:	3b0c      	subs	r3, #12
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa25 	bl	8007768 <Respond>
	for(uint16_t count = 0; count < numpack - 1; count ++)
 800731e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007322:	f103 030c 	add.w	r3, r3, #12
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800732e:	f102 020c 	add.w	r2, r2, #12
 8007332:	8013      	strh	r3, [r2, #0]
 8007334:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007338:	f103 030c 	add.w	r3, r3, #12
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007342:	f103 030e 	add.w	r3, r3, #14
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	3b01      	subs	r3, #1
 800734a:	429a      	cmp	r2, r3
 800734c:	dbb3      	blt.n	80072b6 <Service_ReadAllfile+0xc6>
	}
	data[0] = UFS_NOT_OK;
 800734e:	f107 0310 	add.w	r3, r7, #16
 8007352:	2201      	movs	r2, #1
 8007354:	f803 2c0c 	strb.w	r2, [r3, #-12]
	data[1] = numpack - 1;
 8007358:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800735c:	f103 030e 	add.w	r3, r3, #14
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b2da      	uxtb	r2, r3
 8007368:	f107 0310 	add.w	r3, r7, #16
 800736c:	f803 2c0b 	strb.w	r2, [r3, #-11]
	ufs_ReadFile(&item, (numpack - 1) * Handshake_infor.param.maxLen, &data[2], (numpack - 1) * Handshake_infor.param.maxLen + lastlen);
 8007370:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8007374:	f103 030e 	add.w	r3, r3, #14
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a1b      	ldr	r2, [pc, #108]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 800737e:	88d2      	ldrh	r2, [r2, #6]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	4619      	mov	r1, r3
 8007386:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800738a:	f103 030e 	add.w	r3, r3, #14
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	3b01      	subs	r3, #1
 8007392:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <Service_ReadAllfile+0x1fc>)
 8007394:	88d2      	ldrh	r2, [r2, #6]
 8007396:	fb03 f202 	mul.w	r2, r3, r2
 800739a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800739e:	f103 0306 	add.w	r3, r3, #6
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f107 0310 	add.w	r3, r7, #16
 80073ac:	3b0c      	subs	r3, #12
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	4603      	mov	r3, r0
 80073b2:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <Service_ReadAllfile+0x1f8>)
 80073b4:	f003 fbe4 	bl	800ab80 <ufs_ReadFile>
	Respond(data, lastlen + 2);
 80073b8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80073bc:	f103 0306 	add.w	r3, r3, #6
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	3302      	adds	r3, #2
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	3b0c      	subs	r3, #12
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f9ca 	bl	8007768 <Respond>

//	free(data);
//	data = NULL;
}
 80073d4:	bf00      	nop
 80073d6:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20001c9c 	.word	0x20001c9c
 80073e4:	20001ca4 	.word	0x20001ca4
 80073e8:	20001ca8 	.word	0x20001ca8
 80073ec:	20001c90 	.word	0x20001c90

080073f0 <Service_Listfile>:


void Service_Listfile(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
	uint8_t numberItem[2] = {0};
 80073f6:	2300      	movs	r3, #0
 80073f8:	82bb      	strh	r3, [r7, #20]
	numberItem[1] = ufs_GetListItem(Ufs, item_info, 0xFFFF);
 80073fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007530 <Service_Listfile+0x140>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007402:	494c      	ldr	r1, [pc, #304]	@ (8007534 <Service_Listfile+0x144>)
 8007404:	4618      	mov	r0, r3
 8007406:	f003 fa93 	bl	800a930 <ufs_GetListItem>
 800740a:	4603      	mov	r3, r0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	757b      	strb	r3, [r7, #21]
	Respond(numberItem, 2);
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	2102      	movs	r1, #2
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f9a6 	bl	8007768 <Respond>
	uint8_t namefile[20]= {1};
 800741c:	2301      	movs	r3, #1
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	1d3b      	adds	r3, r7, #4
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	609a      	str	r2, [r3, #8]
 800742a:	60da      	str	r2, [r3, #12]
	namefile[1] = item_info[0].comp.name.head[0];
 800742c:	4b41      	ldr	r3, [pc, #260]	@ (8007534 <Service_Listfile+0x144>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	707b      	strb	r3, [r7, #1]
	if(item_info[0].comp.name.length == 0)
 8007432:	4b40      	ldr	r3, [pc, #256]	@ (8007534 <Service_Listfile+0x144>)
 8007434:	7cdb      	ldrb	r3, [r3, #19]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <Service_Listfile+0x56>
	{
		Respond( namefile, 2);
 800743a:	463b      	mov	r3, r7
 800743c:	2102      	movs	r1, #2
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f992 	bl	8007768 <Respond>
 8007444:	e011      	b.n	800746a <Service_Listfile+0x7a>
	}
	else
	{
		memcpy(&namefile[2], item_info[0].comp.name.head, item_info[0].comp.name.length);
 8007446:	4b3b      	ldr	r3, [pc, #236]	@ (8007534 <Service_Listfile+0x144>)
 8007448:	7cdb      	ldrb	r3, [r3, #19]
 800744a:	461a      	mov	r2, r3
 800744c:	463b      	mov	r3, r7
 800744e:	3302      	adds	r3, #2
 8007450:	4938      	ldr	r1, [pc, #224]	@ (8007534 <Service_Listfile+0x144>)
 8007452:	4618      	mov	r0, r3
 8007454:	f008 fc73 	bl	800fd3e <memcpy>
		Respond( namefile, item_info[0].comp.name.length + 2);
 8007458:	4b36      	ldr	r3, [pc, #216]	@ (8007534 <Service_Listfile+0x144>)
 800745a:	7cdb      	ldrb	r3, [r3, #19]
 800745c:	3302      	adds	r3, #2
 800745e:	b29a      	uxth	r2, r3
 8007460:	463b      	mov	r3, r7
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f000 f97f 	bl	8007768 <Respond>
	}
	for(uint16_t count = 1; count < numberItem[1]; count ++)
 800746a:	2301      	movs	r3, #1
 800746c:	82fb      	strh	r3, [r7, #22]
 800746e:	e055      	b.n	800751c <Service_Listfile+0x12c>
	{
		memcpy(&namefile[1], item_info[count].comp.name.head, item_info[count].comp.name.length);
 8007470:	8afb      	ldrh	r3, [r7, #22]
 8007472:	015b      	lsls	r3, r3, #5
 8007474:	4a2f      	ldr	r2, [pc, #188]	@ (8007534 <Service_Listfile+0x144>)
 8007476:	1899      	adds	r1, r3, r2
 8007478:	8afb      	ldrh	r3, [r7, #22]
 800747a:	4a2e      	ldr	r2, [pc, #184]	@ (8007534 <Service_Listfile+0x144>)
 800747c:	015b      	lsls	r3, r3, #5
 800747e:	4413      	add	r3, r2
 8007480:	3313      	adds	r3, #19
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	463b      	mov	r3, r7
 8007488:	3301      	adds	r3, #1
 800748a:	4618      	mov	r0, r3
 800748c:	f008 fc57 	bl	800fd3e <memcpy>
		if(item_info[count].comp.name.extention[0] != 0)
 8007490:	8afb      	ldrh	r3, [r7, #22]
 8007492:	4a28      	ldr	r2, [pc, #160]	@ (8007534 <Service_Listfile+0x144>)
 8007494:	015b      	lsls	r3, r3, #5
 8007496:	4413      	add	r3, r2
 8007498:	3310      	adds	r3, #16
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d02d      	beq.n	80074fc <Service_Listfile+0x10c>
		{
			memcpy(&namefile[item_info[count].comp.name.length + 1], (uint8_t *)".", 1);
 80074a0:	8afb      	ldrh	r3, [r7, #22]
 80074a2:	4a24      	ldr	r2, [pc, #144]	@ (8007534 <Service_Listfile+0x144>)
 80074a4:	015b      	lsls	r3, r3, #5
 80074a6:	4413      	add	r3, r2
 80074a8:	3313      	adds	r3, #19
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	463a      	mov	r2, r7
 80074b0:	4413      	add	r3, r2
 80074b2:	2201      	movs	r2, #1
 80074b4:	4920      	ldr	r1, [pc, #128]	@ (8007538 <Service_Listfile+0x148>)
 80074b6:	4618      	mov	r0, r3
 80074b8:	f008 fc41 	bl	800fd3e <memcpy>
			memcpy(&namefile[item_info[count].comp.name.length + 2], item_info[count].comp.name.extention, 3);
 80074bc:	8afb      	ldrh	r3, [r7, #22]
 80074be:	4a1d      	ldr	r2, [pc, #116]	@ (8007534 <Service_Listfile+0x144>)
 80074c0:	015b      	lsls	r3, r3, #5
 80074c2:	4413      	add	r3, r2
 80074c4:	3313      	adds	r3, #19
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	3302      	adds	r3, #2
 80074ca:	463a      	mov	r2, r7
 80074cc:	18d0      	adds	r0, r2, r3
 80074ce:	8afb      	ldrh	r3, [r7, #22]
 80074d0:	015b      	lsls	r3, r3, #5
 80074d2:	3310      	adds	r3, #16
 80074d4:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <Service_Listfile+0x144>)
 80074d6:	4413      	add	r3, r2
 80074d8:	2203      	movs	r2, #3
 80074da:	4619      	mov	r1, r3
 80074dc:	f008 fc2f 	bl	800fd3e <memcpy>
			Respond( namefile, item_info[count].comp.name.length + 5);
 80074e0:	8afb      	ldrh	r3, [r7, #22]
 80074e2:	4a14      	ldr	r2, [pc, #80]	@ (8007534 <Service_Listfile+0x144>)
 80074e4:	015b      	lsls	r3, r3, #5
 80074e6:	4413      	add	r3, r2
 80074e8:	3313      	adds	r3, #19
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	3305      	adds	r3, #5
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	463b      	mov	r3, r7
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f937 	bl	8007768 <Respond>
 80074fa:	e00c      	b.n	8007516 <Service_Listfile+0x126>
		}
		else
		{
			Respond( namefile, item_info[count].comp.name.length + 1);
 80074fc:	8afb      	ldrh	r3, [r7, #22]
 80074fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007534 <Service_Listfile+0x144>)
 8007500:	015b      	lsls	r3, r3, #5
 8007502:	4413      	add	r3, r2
 8007504:	3313      	adds	r3, #19
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	463b      	mov	r3, r7
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f000 f929 	bl	8007768 <Respond>
	for(uint16_t count = 1; count < numberItem[1]; count ++)
 8007516:	8afb      	ldrh	r3, [r7, #22]
 8007518:	3301      	adds	r3, #1
 800751a:	82fb      	strh	r3, [r7, #22]
 800751c:	7d7b      	ldrb	r3, [r7, #21]
 800751e:	461a      	mov	r2, r3
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	4293      	cmp	r3, r2
 8007524:	d3a4      	bcc.n	8007470 <Service_Listfile+0x80>




	}
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20001ca4 	.word	0x20001ca4
 8007534:	20001ce0 	.word	0x20001ce0
 8007538:	080108fc 	.word	0x080108fc

0800753c <Service_DeleteFile>:

void Service_DeleteFile(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
	uint8_t Ret[5] = {UFS_NOT_OK};
 8007542:	2301      	movs	r3, #1
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	2300      	movs	r3, #0
 8007548:	753b      	strb	r3, [r7, #20]
	uint8_t lenname = Filecmd.data[0];
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <Service_DeleteFile+0x6c>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	75fb      	strb	r3, [r7, #23]
	uint8_t nameFile[16] = {0};
 8007552:	2300      	movs	r3, #0
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	1d3b      	adds	r3, r7, #4
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	609a      	str	r2, [r3, #8]
	memcpy(nameFile, &Filecmd.data[1], lenname);
 8007560:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <Service_DeleteFile+0x6c>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	7dfa      	ldrb	r2, [r7, #23]
 8007568:	463b      	mov	r3, r7
 800756a:	4618      	mov	r0, r3
 800756c:	f008 fbe7 	bl	800fd3e <memcpy>
	if(ufs_OpenItem(Ufs, nameFile , &item) == UFS_OK)
 8007570:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <Service_DeleteFile+0x70>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4639      	mov	r1, r7
 8007576:	4a0e      	ldr	r2, [pc, #56]	@ (80075b0 <Service_DeleteFile+0x74>)
 8007578:	4618      	mov	r0, r3
 800757a:	f002 fda9 	bl	800a0d0 <ufs_OpenItem>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d107      	bne.n	8007594 <Service_DeleteFile+0x58>
	{
		if(ufs_DeleteItem(&item) == UFS_OK)
 8007584:	480a      	ldr	r0, [pc, #40]	@ (80075b0 <Service_DeleteFile+0x74>)
 8007586:	f002 ffe5 	bl	800a554 <ufs_DeleteItem>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <Service_DeleteFile+0x58>
		{
			Ret[0] = UFS_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	743b      	strb	r3, [r7, #16]
		}
	}

	Respond(Ret, 1);
 8007594:	f107 0310 	add.w	r3, r7, #16
 8007598:	2101      	movs	r1, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f8e4 	bl	8007768 <Respond>
}
 80075a0:	bf00      	nop
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20001c9c 	.word	0x20001c9c
 80075ac:	20001ca4 	.word	0x20001ca4
 80075b0:	20001ca8 	.word	0x20001ca8

080075b4 <Service_RealName>:
void Service_RealName(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
	uint8_t Ret[5] = {UFS_NOT_OK};
 80075ba:	2301      	movs	r3, #1
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t nameFile[16] = {0};
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	f107 0314 	add.w	r3, r7, #20
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
	uint8_t newName[16] = {0};
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	605a      	str	r2, [r3, #4]
 80075e0:	609a      	str	r2, [r3, #8]
	uint8_t len_nameFile = Filecmd.data[0];
 80075e2:	4b22      	ldr	r3, [pc, #136]	@ (800766c <Service_RealName+0xb8>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t len_newName = Filecmd.data[len_nameFile + 1];
 80075ec:	4b1f      	ldr	r3, [pc, #124]	@ (800766c <Service_RealName+0xb8>)
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075f4:	3301      	adds	r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	memcpy(nameFile, &Filecmd.data[1], len_nameFile);
 80075fe:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <Service_RealName+0xb8>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007608:	f107 0310 	add.w	r3, r7, #16
 800760c:	4618      	mov	r0, r3
 800760e:	f008 fb96 	bl	800fd3e <memcpy>
	memcpy(newName, &Filecmd.data[len_nameFile + 2], len_newName);
 8007612:	4b16      	ldr	r3, [pc, #88]	@ (800766c <Service_RealName+0xb8>)
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800761a:	3302      	adds	r3, #2
 800761c:	18d1      	adds	r1, r2, r3
 800761e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007622:	463b      	mov	r3, r7
 8007624:	4618      	mov	r0, r3
 8007626:	f008 fb8a 	bl	800fd3e <memcpy>
	if(ufs_OpenItem(Ufs, nameFile , &item) == UFS_OK)
 800762a:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <Service_RealName+0xbc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f107 0110 	add.w	r1, r7, #16
 8007632:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <Service_RealName+0xc0>)
 8007634:	4618      	mov	r0, r3
 8007636:	f002 fd4b 	bl	800a0d0 <ufs_OpenItem>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <Service_RealName+0xa2>
	{
		if(ufs_RenameItem(&item, newName) == UFS_OK)
 8007640:	463b      	mov	r3, r7
 8007642:	4619      	mov	r1, r3
 8007644:	480b      	ldr	r0, [pc, #44]	@ (8007674 <Service_RealName+0xc0>)
 8007646:	f003 fed3 	bl	800b3f0 <ufs_RenameItem>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <Service_RealName+0xa2>
		{
			Ret[0] = UFS_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}
	Respond(Ret, 1);
 8007656:	f107 0320 	add.w	r3, r7, #32
 800765a:	2101      	movs	r1, #1
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f883 	bl	8007768 <Respond>
}
 8007662:	bf00      	nop
 8007664:	3728      	adds	r7, #40	@ 0x28
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20001c9c 	.word	0x20001c9c
 8007670:	20001ca4 	.word	0x20001ca4
 8007674:	20001ca8 	.word	0x20001ca8

08007678 <Service_WriteFlash>:


void Service_WriteFlash(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 800767e:	af00      	add	r7, sp, #0
	uint8_t data[2048];
	uint8_t percent = 0;
 8007680:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8007684:	f6a3 0315 	subw	r3, r3, #2069	@ 0x815
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
	uint32_t total_len = item.info.comp.size;
 800768c:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <Service_WriteFlash+0xdc>)
 800768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007690:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
	uint32_t lenRead = 2048;
 8007694:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007698:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	uint32_t lenWrite = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
	uint32_t offset = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
	uint32_t addr_write = ADDR_START;
 80076a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <Service_WriteFlash+0xe0>)
 80076aa:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
	Flash_erase(SECTOR_START);
 80076ae:	200a      	movs	r0, #10
 80076b0:	f000 fa18 	bl	8007ae4 <Flash_erase>
	do{
		lenWrite = ufs_ReadFile(&item, offset, data, lenRead);
 80076b4:	1d3a      	adds	r2, r7, #4
 80076b6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80076ba:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 80076be:	4825      	ldr	r0, [pc, #148]	@ (8007754 <Service_WriteFlash+0xdc>)
 80076c0:	f003 fa5e 	bl	800ab80 <ufs_ReadFile>
 80076c4:	f8c7 0804 	str.w	r0, [r7, #2052]	@ 0x804
		Flash_Write(addr_write, data, lenWrite);
 80076c8:	1d3b      	adds	r3, r7, #4
 80076ca:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 80076ce:	4619      	mov	r1, r3
 80076d0:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 80076d4:	f000 fa2a 	bl	8007b2c <Flash_Write>
		addr_write += lenWrite;
 80076d8:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80076dc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80076e0:	4413      	add	r3, r2
 80076e2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
		offset += lenWrite;
 80076e6:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80076ea:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80076ee:	4413      	add	r3, r2
 80076f0:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
		if(total_len - offset < lenRead)
 80076f4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80076f8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8007702:	429a      	cmp	r2, r3
 8007704:	d906      	bls.n	8007714 <Service_WriteFlash+0x9c>
		{
			lenRead = total_len - offset;
 8007706:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800770a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
		}
		percent = (offset * 100 )/ total_len;
 8007714:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8007718:	2264      	movs	r2, #100	@ 0x64
 800771a:	fb03 f202 	mul.w	r2, r3, r2
 800771e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	b2da      	uxtb	r2, r3
 8007728:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800772c:	f6a3 0315 	subw	r3, r3, #2069	@ 0x815
 8007730:	701a      	strb	r2, [r3, #0]
		Respond(&percent, 1);
 8007732:	1cfb      	adds	r3, r7, #3
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f816 	bl	8007768 <Respond>
	}while(offset != total_len);
 800773c:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8007740:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8007744:	429a      	cmp	r2, r3
 8007746:	d1b5      	bne.n	80076b4 <Service_WriteFlash+0x3c>
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	f607 0718 	addw	r7, r7, #2072	@ 0x818
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20001ca8 	.word	0x20001ca8
 8007758:	080c0000 	.word	0x080c0000

0800775c <jumb>:

void jumb(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
	Bootloader_JumpToApplication();
 8007760:	f000 f982 	bl	8007a68 <Bootloader_JumpToApplication>
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}

08007768 <Respond>:

void Respond(uint8_t *data, uint16_t len)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
	if(SendPacket_callback != NULL)
 8007774:	4b06      	ldr	r3, [pc, #24]	@ (8007790 <Respond+0x28>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <Respond+0x20>
	{
		SendPacket_callback(data, len);
 800777c:	4b04      	ldr	r3, [pc, #16]	@ (8007790 <Respond+0x28>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	4611      	mov	r1, r2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
	}
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20001c8c 	.word	0x20001c8c

08007794 <respond_addEvent>:

void respond_addEvent(SendPacket callback)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	SendPacket_callback = callback;
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <respond_addEvent+0x1c>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20001c8c 	.word	0x20001c8c

080077b4 <Fifo_AddData>:
}
#endif

#if USING_FIFO == 1
Buff_ReturnType Fifo_AddData(Fifo* fifo, void* data, uint16_t length)
{
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b08f      	sub	sp, #60	@ 0x3c
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
    static uint8_t state = BUFF_UNLOCK;
    while(state == BUFF_LOCK){}
 80077c2:	bf00      	nop
 80077c4:	4b41      	ldr	r3, [pc, #260]	@ (80078cc <Fifo_AddData+0x118>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d0fb      	beq.n	80077c4 <Fifo_AddData+0x10>
    state = BUFF_LOCK;
 80077cc:	4b3f      	ldr	r3, [pc, #252]	@ (80078cc <Fifo_AddData+0x118>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
    
    ListObj* headobj = fifo->objs;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
    ListObj* objs = fifo->objs;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30

    Object  object;
    object.addr = data;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	613b      	str	r3, [r7, #16]
    object.length = length;
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	82bb      	strh	r3, [r7, #20]

    if (fifo->size <= Fifo_CountData(fifo) || object.addr == BUFF_NULL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	881c      	ldrh	r4, [r3, #0]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f8f6 	bl	80079dc <Fifo_CountData>
 80077f0:	4603      	mov	r3, r0
 80077f2:	429c      	cmp	r4, r3
 80077f4:	d902      	bls.n	80077fc <Fifo_AddData+0x48>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <Fifo_AddData+0x5c>
    {
        state = BUFF_UNLOCK;
 80077fc:	4b33      	ldr	r3, [pc, #204]	@ (80078cc <Fifo_AddData+0x118>)
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
        return BUFF_NOT_OK;
 8007802:	2301      	movs	r3, #1
 8007804:	e05d      	b.n	80078c2 <Fifo_AddData+0x10e>
    }

    while (objs != BUFF_NULL)
    {
        headobj = objs;
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
        objs = objs->next;
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	633b      	str	r3, [r7, #48]	@ 0x30
    while (objs != BUFF_NULL)
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f7      	bne.n	8007806 <Fifo_AddData+0x52>
    }

    ListObj* newobj = (ListObj*)malloc(sizeof(ListObj));
 8007816:	2008      	movs	r0, #8
 8007818:	f007 ff5c 	bl	800f6d4 <malloc>
 800781c:	4603      	mov	r3, r0
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
    Object* obj = (Object*)malloc(sizeof(Object));
 8007820:	2008      	movs	r0, #8
 8007822:	f007 ff57 	bl	800f6d4 <malloc>
 8007826:	4603      	mov	r3, r0
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
    void* addr = malloc(object.length);
 800782a:	8abb      	ldrh	r3, [r7, #20]
 800782c:	4618      	mov	r0, r3
 800782e:	f007 ff51 	bl	800f6d4 <malloc>
 8007832:	4603      	mov	r3, r0
 8007834:	623b      	str	r3, [r7, #32]

    if (newobj == BUFF_NULL || obj == BUFF_NULL || addr == BUFF_NULL)
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <Fifo_AddData+0x94>
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <Fifo_AddData+0x94>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <Fifo_AddData+0xaa>
    {
        free(newobj);
 8007848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800784a:	f007 ff4b 	bl	800f6e4 <free>
        free(obj);
 800784e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007850:	f007 ff48 	bl	800f6e4 <free>
        state = BUFF_UNLOCK;
 8007854:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <Fifo_AddData+0x118>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
        return BUFF_NOT_OK;
 800785a:	2301      	movs	r3, #1
 800785c:	e031      	b.n	80078c2 <Fifo_AddData+0x10e>
    }

    obj->addr = addr;
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	601a      	str	r2, [r3, #0]
    obj->length = object.length;
 8007864:	8aba      	ldrh	r2, [r7, #20]
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	809a      	strh	r2, [r3, #4]
    newobj->obj = obj;
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786e:	601a      	str	r2, [r3, #0]
    newobj->next = BUFF_NULL;
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	2200      	movs	r2, #0
 8007874:	605a      	str	r2, [r3, #4]

    uint8_t* datades = (uint8_t*)newobj->obj->addr;
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	61fb      	str	r3, [r7, #28]
    uint8_t* datasrc = (uint8_t*)object.addr;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	61bb      	str	r3, [r7, #24]

    for (uint16_t countByte = 0; countByte < object.length; countByte++)
 8007882:	2300      	movs	r3, #0
 8007884:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007886:	e00a      	b.n	800789e <Fifo_AddData+0xea>
    {
        datades[countByte] = datasrc[countByte];
 8007888:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	441a      	add	r2, r3
 800788e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	440b      	add	r3, r1
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	701a      	strb	r2, [r3, #0]
    for (uint16_t countByte = 0; countByte < object.length; countByte++)
 8007898:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800789a:	3301      	adds	r3, #1
 800789c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800789e:	8abb      	ldrh	r3, [r7, #20]
 80078a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3f0      	bcc.n	8007888 <Fifo_AddData+0xd4>
    }

    if (headobj == BUFF_NULL)
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <Fifo_AddData+0x100>
    {
        fifo->objs = newobj;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	e002      	b.n	80078ba <Fifo_AddData+0x106>
    }
    else
    {
        headobj->next = newobj;
 80078b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078b8:	605a      	str	r2, [r3, #4]
    }

    state = BUFF_UNLOCK;
 80078ba:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <Fifo_AddData+0x118>)
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
    return BUFF_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	373c      	adds	r7, #60	@ 0x3c
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20001e22 	.word	0x20001e22

080078d0 <Fifo_GetSizeData>:

uint16_t Fifo_GetSizeData(Fifo* fifo)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
    static uint8_t state = BUFF_UNLOCK;
    while(state == BUFF_LOCK){}
 80078d8:	bf00      	nop
 80078da:	4b0f      	ldr	r3, [pc, #60]	@ (8007918 <Fifo_GetSizeData+0x48>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d0fb      	beq.n	80078da <Fifo_GetSizeData+0xa>
    state = BUFF_LOCK;
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <Fifo_GetSizeData+0x48>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
    ListObj* objs = fifo->objs;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
    if (objs == BUFF_NULL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <Fifo_GetSizeData+0x2e>
    {
        state = BUFF_UNLOCK;
 80078f4:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <Fifo_GetSizeData+0x48>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
        return 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e005      	b.n	800790a <Fifo_GetSizeData+0x3a>
    }
    state = BUFF_UNLOCK;
 80078fe:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <Fifo_GetSizeData+0x48>)
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
    return objs->obj->length;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	889b      	ldrh	r3, [r3, #4]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20001e23 	.word	0x20001e23

0800791c <Fifo_GetData>:

Buff_ReturnType Fifo_GetData(Fifo* fifo, void* data, uint16_t* length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
    static uint8_t state = BUFF_UNLOCK;
    while(state == BUFF_LOCK){}
 8007928:	bf00      	nop
 800792a:	4b2b      	ldr	r3, [pc, #172]	@ (80079d8 <Fifo_GetData+0xbc>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d0fb      	beq.n	800792a <Fifo_GetData+0xe>
    state = BUFF_LOCK;
 8007932:	4b29      	ldr	r3, [pc, #164]	@ (80079d8 <Fifo_GetData+0xbc>)
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
    if (data == BUFF_NULL || fifo == BUFF_NULL)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <Fifo_GetData+0x28>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <Fifo_GetData+0x32>
    {
        state = BUFF_UNLOCK;
 8007944:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <Fifo_GetData+0xbc>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
        return BUFF_NOT_OK;
 800794a:	2301      	movs	r3, #1
 800794c:	e040      	b.n	80079d0 <Fifo_GetData+0xb4>
    }

    ListObj* objs = fifo->objs;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	61bb      	str	r3, [r7, #24]

    if (objs != BUFF_NULL)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d036      	beq.n	80079c8 <Fifo_GetData+0xac>
    {
        uint8_t* datades = (uint8_t*)data;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	617b      	str	r3, [r7, #20]
        uint8_t* datasrc = (uint8_t*)objs->obj->addr;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]

        for (uint16_t countByte = 0; countByte < objs->obj->length; countByte++)
 8007966:	2300      	movs	r3, #0
 8007968:	83fb      	strh	r3, [r7, #30]
 800796a:	e00a      	b.n	8007982 <Fifo_GetData+0x66>
        {
            datades[countByte] = datasrc[countByte];
 800796c:	8bfb      	ldrh	r3, [r7, #30]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	441a      	add	r2, r3
 8007972:	8bfb      	ldrh	r3, [r7, #30]
 8007974:	6979      	ldr	r1, [r7, #20]
 8007976:	440b      	add	r3, r1
 8007978:	7812      	ldrb	r2, [r2, #0]
 800797a:	701a      	strb	r2, [r3, #0]
        for (uint16_t countByte = 0; countByte < objs->obj->length; countByte++)
 800797c:	8bfb      	ldrh	r3, [r7, #30]
 800797e:	3301      	adds	r3, #1
 8007980:	83fb      	strh	r3, [r7, #30]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	889b      	ldrh	r3, [r3, #4]
 8007988:	8bfa      	ldrh	r2, [r7, #30]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3ee      	bcc.n	800796c <Fifo_GetData+0x50>
        }
        *length = objs->obj->length;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	889a      	ldrh	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	801a      	strh	r2, [r3, #0]
        fifo->objs = fifo->objs->next;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]

        free(objs->obj->addr);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f007 fe9b 	bl	800f6e4 <free>
        free(objs->obj);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f007 fe96 	bl	800f6e4 <free>
        free(objs);
 80079b8:	69b8      	ldr	r0, [r7, #24]
 80079ba:	f007 fe93 	bl	800f6e4 <free>
    {
        state = BUFF_UNLOCK;
        return BUFF_NOT_OK;
    }

        state = BUFF_UNLOCK;
 80079be:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <Fifo_GetData+0xbc>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
        return BUFF_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	e003      	b.n	80079d0 <Fifo_GetData+0xb4>
        state = BUFF_UNLOCK;
 80079c8:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <Fifo_GetData+0xbc>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
        return BUFF_NOT_OK;
 80079ce:	2301      	movs	r3, #1
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001e24 	.word	0x20001e24

080079dc <Fifo_CountData>:

uint16_t Fifo_CountData(Fifo *fifo)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
    static uint8_t state = BUFF_UNLOCK;
    while(state == BUFF_LOCK){}
 80079e4:	bf00      	nop
 80079e6:	4b14      	ldr	r3, [pc, #80]	@ (8007a38 <Fifo_CountData+0x5c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d0fb      	beq.n	80079e6 <Fifo_CountData+0xa>
    state = BUFF_LOCK;
 80079ee:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <Fifo_CountData+0x5c>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	701a      	strb	r2, [r3, #0]
    uint16_t countNode = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	81fb      	strh	r3, [r7, #14]
    ListObj* objs = fifo->objs;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	60bb      	str	r3, [r7, #8]

    while (objs != BUFF_NULL)
 80079fe:	e00d      	b.n	8007a1c <Fifo_CountData+0x40>
    {
        objs = objs->next;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	60bb      	str	r3, [r7, #8]
        countNode ++;
 8007a06:	89fb      	ldrh	r3, [r7, #14]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	81fb      	strh	r3, [r7, #14]
        if(countNode >= fifo->size)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	89fa      	ldrh	r2, [r7, #14]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <Fifo_CountData+0x40>
        {
        	countNode = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	81fb      	strh	r3, [r7, #14]
        	break;
 8007a1a:	e002      	b.n	8007a22 <Fifo_CountData+0x46>
    while (objs != BUFF_NULL)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1ee      	bne.n	8007a00 <Fifo_CountData+0x24>
        }
    }

    state = BUFF_UNLOCK;
 8007a22:	4b05      	ldr	r3, [pc, #20]	@ (8007a38 <Fifo_CountData+0x5c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
    return countNode;
 8007a28:	89fb      	ldrh	r3, [r7, #14]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20001e25 	.word	0x20001e25

08007a3c <newFifo>:
        free(fifo);
    }
}

Fifo* newFifo(uint16_t size)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	80fb      	strh	r3, [r7, #6]
    Fifo *res = (Fifo *)malloc(sizeof(Fifo));
 8007a46:	2008      	movs	r0, #8
 8007a48:	f007 fe44 	bl	800f6d4 <malloc>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	60fb      	str	r3, [r7, #12]
    res->size = size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	88fa      	ldrh	r2, [r7, #6]
 8007a54:	801a      	strh	r2, [r3, #0]
    res->objs = BUFF_NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	605a      	str	r2, [r3, #4]
    return res;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <Bootloader_JumpToApplication>:

// Địa chỉ bắt đầu của ứng dụng trong Flash
#define APPLICATION_ADDRESS 0x080C0000


void Bootloader_JumpToApplication(void) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
    // Disable interrupts
	HAL_RCC_DeInit();
 8007a6e:	f7fc fd8f 	bl	8004590 <HAL_RCC_DeInit>

	HAL_DeInit();
 8007a72:	f7fa f883 	bl	8001b7c <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8007a76:	b672      	cpsid	i
}
 8007a78:	bf00      	nop


	__disable_irq();
	SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk |
 8007a7a:	4b16      	ldr	r3, [pc, #88]	@ (8007ad4 <Bootloader_JumpToApplication+0x6c>)
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	4a15      	ldr	r2, [pc, #84]	@ (8007ad4 <Bootloader_JumpToApplication+0x6c>)
 8007a80:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007a84:	6253      	str	r3, [r2, #36]	@ 0x24
	                SCB_SHCSR_BUSFAULTENA_Msk |
	                SCB_SHCSR_MEMFAULTENA_Msk);

    uint32_t jumpAddress = *(__IO uint32_t*)(0x080C0000 + 4);
 8007a86:	4b14      	ldr	r3, [pc, #80]	@ (8007ad8 <Bootloader_JumpToApplication+0x70>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

    // Get the reset handler of the application
    JumpToApplication = (pFunction) jumpAddress;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a13      	ldr	r2, [pc, #76]	@ (8007adc <Bootloader_JumpToApplication+0x74>)
 8007a90:	6013      	str	r3, [r2, #0]

    // Set the stack pointer
    __set_MSP(*(__IO uint32_t*)0x080C0000);
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <Bootloader_JumpToApplication+0x78>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8808 	msr	MSP, r3
}
 8007a9e:	bf00      	nop

    SCB->VTOR = 0x080C0000;
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <Bootloader_JumpToApplication+0x6c>)
 8007aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8007ae0 <Bootloader_JumpToApplication+0x78>)
 8007aa4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8007aa6:	b662      	cpsie	i
}
 8007aa8:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8007aaa:	f3ef 8314 	mrs	r3, CONTROL
 8007aae:	607b      	str	r3, [r7, #4]
  return(result);
 8007ab0:	687b      	ldr	r3, [r7, #4]
      __enable_irq();
    __set_CONTROL(__get_CONTROL() & ~CONTROL_SPSEL_Msk);
 8007ab2:	f023 0302 	bic.w	r3, r3, #2
 8007ab6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8007abe:	f3bf 8f6f 	isb	sy
}
 8007ac2:	bf00      	nop
}
 8007ac4:	bf00      	nop

    // Jump to application
    JumpToApplication();
 8007ac6:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <Bootloader_JumpToApplication+0x74>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4798      	blx	r3
}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	e000ed00 	.word	0xe000ed00
 8007ad8:	080c0004 	.word	0x080c0004
 8007adc:	20001e28 	.word	0x20001e28
 8007ae0:	080c0000 	.word	0x080c0000

08007ae4 <Flash_erase>:


HAL_StatusTypeDef Flash_erase(uint32_t sector)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8007aec:	f7fa fa56 	bl	8001f9c <HAL_FLASH_Unlock>

	// Xóa sector dựa trên địa chỉ bắt đầu và kích thước dữ liệu
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8007af4:	2302      	movs	r3, #2
 8007af6:	61fb      	str	r3, [r7, #28]



	EraseInitStruct.Sector = sector;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 8007afc:	2301      	movs	r3, #1
 8007afe:	61bb      	str	r3, [r7, #24]

	// Thực hiện xóa sector
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8007b00:	f107 0208 	add.w	r2, r7, #8
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa fba8 	bl	8002260 <HAL_FLASHEx_Erase>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <Flash_erase+0x3a>
		// Xử lý lỗi nếu không xóa được
		HAL_FLASH_Lock();
 8007b16:	f7fa fa63 	bl	8001fe0 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e002      	b.n	8007b24 <Flash_erase+0x40>
	}
	HAL_FLASH_Lock();
 8007b1e:	f7fa fa5f 	bl	8001fe0 <HAL_FLASH_Lock>
	return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <Flash_Write>:

HAL_StatusTypeDef Flash_Write(uint32_t start_address, uint8_t *data, uint32_t size) {
 8007b2c:	b5b0      	push	{r4, r5, r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
    // Mở khóa Flash
	HAL_FLASH_Unlock();
 8007b38:	f7fa fa30 	bl	8001f9c <HAL_FLASH_Unlock>

    // Ghi dữ liệu theo từng khối 32-bit
    for (uint32_t i = 0; i < size; i += 4) {
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e01a      	b.n	8007b78 <Flash_Write+0x4c>
        uint32_t data32 = *(uint32_t*)&data[i];
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	613b      	str	r3, [r7, #16]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address + i, data32) != HAL_OK) {
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	18d1      	adds	r1, r2, r3
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2200      	movs	r2, #0
 8007b56:	461c      	mov	r4, r3
 8007b58:	4615      	mov	r5, r2
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	2002      	movs	r0, #2
 8007b60:	f7fa f9c8 	bl	8001ef4 <HAL_FLASH_Program>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <Flash_Write+0x46>
            // Xử lý lỗi nếu ghi không thành công
            HAL_FLASH_Lock();
 8007b6a:	f7fa fa39 	bl	8001fe0 <HAL_FLASH_Lock>
            return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e009      	b.n	8007b86 <Flash_Write+0x5a>
    for (uint32_t i = 0; i < size; i += 4) {
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	3304      	adds	r3, #4
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d3e0      	bcc.n	8007b42 <Flash_Write+0x16>
        }
    }

    // Khóa lại Flash
    HAL_FLASH_Lock();
 8007b80:	f7fa fa2e 	bl	8001fe0 <HAL_FLASH_Lock>
    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bdb0      	pop	{r4, r5, r7, pc}

08007b8e <swap8bit>:
 *
 * @param n The 8-bit integer to swap.
 * @return The 8-bit integer with swapped nibbles.
 */
static uint8_t swap8bit(uint8_t n)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	4603      	mov	r3, r0
 8007b96:	71fb      	strb	r3, [r7, #7]
    return (((n & 0x0F) << 4) | ((n & 0xF0) >> 4));
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	b25a      	sxtb	r2, r3
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	091b      	lsrs	r3, r3, #4
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	b25b      	sxtb	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	b2db      	uxtb	r3, r3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <swap16bit>:
 *
 * @param n The 16-bit integer to swap.
 * @return The swapped 16-bit integer.
 */
static uint16_t swap16bit(uint16_t n)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	80fb      	strh	r3, [r7, #6]
#if _BYTE_ORDER == _BIG_ENDIAN
    return n;
#else
    return ((((n) & 0xff) << 8) | (((n) & 0xff00) >> 8));
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	0a1b      	lsrs	r3, r3, #8
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b21b      	sxth	r3, r3
 8007bd4:	b29b      	uxth	r3, r3
#endif
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <swap32bit>:
 *
 * @param n The 32-bit integer to swap.
 * @return The swapped 32-bit integer.
 */
static uint32_t swap32bit(uint32_t n)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
#if _BYTE_ORDER == _BIG_ENDIAN
    return n;
#else
    return (((n & 0x000000FF) << 24) |
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	061a      	lsls	r2, r3, #24
            ((n & 0x0000FF00) << 8)  |
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
    return (((n & 0x000000FF) << 24) |
 8007bf6:	431a      	orrs	r2, r3
            ((n & 0x00FF0000) >> 8)  |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
            ((n & 0x0000FF00) << 8)  |
 8007c00:	431a      	orrs	r2, r3
            ((n & 0xFF000000) >> 24));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0e1b      	lsrs	r3, r3, #24
            ((n & 0x00FF0000) >> 8)  |
 8007c06:	4313      	orrs	r3, r2
#endif
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <newLiteLink>:
 * @param name_device Name of the device to register.
 * @param outbound_event Callback function for outbound events.
 * @return A pointer to the initialized LiteLink instance or NULL if initialization fails.
 */
LiteLink* newLiteLink(uint16_t wlan_address, uint16_t local_address, uint16_t segment_size, const char* name_device, LiteLink_OutboundEvent outbound_event)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	81fb      	strh	r3, [r7, #14]
 8007c20:	460b      	mov	r3, r1
 8007c22:	81bb      	strh	r3, [r7, #12]
 8007c24:	4613      	mov	r3, r2
 8007c26:	817b      	strh	r3, [r7, #10]
    if (segment_size <= LITELINK_HEADER_SIZE)
 8007c28:	897b      	ldrh	r3, [r7, #10]
 8007c2a:	2b0c      	cmp	r3, #12
 8007c2c:	d801      	bhi.n	8007c32 <newLiteLink+0x1e>
    {
        return NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e036      	b.n	8007ca0 <newLiteLink+0x8c>
    }

    LiteLink* llnet = (LiteLink*)malloc(sizeof(LiteLink));
 8007c32:	2018      	movs	r0, #24
 8007c34:	f007 fd4e 	bl	800f6d4 <malloc>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	617b      	str	r3, [r7, #20]
    if (llnet == NULL)
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <newLiteLink+0x32>
    {
        return NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e02c      	b.n	8007ca0 <newLiteLink+0x8c>
    }

    llnet->segments = LiteLink_newFifo(0xFF);                  /* Initialize FIFO for segments */
 8007c46:	20ff      	movs	r0, #255	@ 0xff
 8007c48:	f001 f856 	bl	8008cf8 <LiteLink_newFifo>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	601a      	str	r2, [r3, #0]
    llnet->services = LiteLink_newObjList(0x3F);               /* Initialize object list for services */
 8007c52:	203f      	movs	r0, #63	@ 0x3f
 8007c54:	f000 feda 	bl	8008a0c <LiteLink_newObjList>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	605a      	str	r2, [r3, #4]
    llnet->outbound_event = outbound_event;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	609a      	str	r2, [r3, #8]
    llnet->data_size = segment_size - LITELINK_HEADER_SIZE;
 8007c64:	897b      	ldrh	r3, [r7, #10]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	3b0c      	subs	r3, #12
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	731a      	strb	r2, [r3, #12]
    llnet->local_address = local_address & LITELINK_BROADCAST_ADDR;
 8007c70:	89bb      	ldrh	r3, [r7, #12]
 8007c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	81da      	strh	r2, [r3, #14]
    llnet->wlan_address = wlan_address & LITELINK_BROADCAST_ADDR;
 8007c7c:	89fb      	ldrh	r3, [r7, #14]
 8007c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	821a      	strh	r2, [r3, #16]
    llnet->lock = LL_UNLOCKED;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	735a      	strb	r2, [r3, #13]
    llnet->name = (uint8_t *)name_device;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	615a      	str	r2, [r3, #20]

    LiteLink_uListen(llnet, "system_service", 0);
 8007c94:	2200      	movs	r2, #0
 8007c96:	4904      	ldr	r1, [pc, #16]	@ (8007ca8 <newLiteLink+0x94>)
 8007c98:	6978      	ldr	r0, [r7, #20]
 8007c9a:	f000 f818 	bl	8007cce <LiteLink_uListen>

    return llnet;
 8007c9e:	697b      	ldr	r3, [r7, #20]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	08010848 	.word	0x08010848

08007cac <LiteLink_onMessage>:
 *
 * @param service A pointer to the LiteLink service.
 * @param event The message event handler to register.
 */
void LiteLink_onMessage(LiteLink_Service* service, LiteLink_ReceivedEvent event)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
    if (service != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <LiteLink_onMessage+0x16>
    {
        service->onMessage = event;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	611a      	str	r2, [r3, #16]
    }
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <LiteLink_uListen>:
 * @param name_service Name of the service to register.
 * @param port The port to listen on (must be less than 0x3F).
 * @return A pointer to the LiteLink service instance or NULL on failure.
 */
LiteLink_Service* LiteLink_uListen(LiteLink* llnet, const char* name_service, uint8_t port)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b08c      	sub	sp, #48	@ 0x30
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	71fb      	strb	r3, [r7, #7]
    LiteLink_Service service;
    if (port >= 0x3F)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce0:	d901      	bls.n	8007ce6 <LiteLink_uListen+0x18>
    {
        return NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e03d      	b.n	8007d62 <LiteLink_uListen+0x94>
    }

    /* Set up service properties */
    service.data_size = llnet->data_size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7b1b      	ldrb	r3, [r3, #12]
 8007cea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    service.local.psr.addr = llnet->local_address;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	89db      	ldrh	r3, [r3, #14]
 8007cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	8b7b      	ldrh	r3, [r7, #26]
 8007cfa:	f362 138f 	bfi	r3, r2, #6, #10
 8007cfe:	837b      	strh	r3, [r7, #26]
    service.local.psr.port = port;
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	7ebb      	ldrb	r3, [r7, #26]
 8007d0a:	f362 0305 	bfi	r3, r2, #0, #6
 8007d0e:	76bb      	strb	r3, [r7, #26]
    service.wlan = llnet->wlan_address;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8a1b      	ldrh	r3, [r3, #16]
 8007d14:	83fb      	strh	r3, [r7, #30]
    service.name = (uint8_t*)name_service;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    service.partner.value = 0x00;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	83bb      	strh	r3, [r7, #28]
    service.seq.value = 0x00;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	763b      	strb	r3, [r7, #24]
    service.llnet = llnet;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	617b      	str	r3, [r7, #20]
    service.state = DONT_WAIT_ANYTHING;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    service.buff = NULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]
    service.onMessage = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	623b      	str	r3, [r7, #32]

    if (LL_NOT_OK == LiteLink_AddObject(llnet->services, (void*)&service, sizeof(LiteLink_Service), (uint16_t)port))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6858      	ldr	r0, [r3, #4]
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f107 0110 	add.w	r1, r7, #16
 8007d40:	2220      	movs	r2, #32
 8007d42:	f000 fe99 	bl	8008a78 <LiteLink_AddObject>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <LiteLink_uListen+0x82>
    {
        return NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e008      	b.n	8007d62 <LiteLink_uListen+0x94>
    }

    return LiteLink_GetObjectPtr(llnet->services, port);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	79fa      	ldrb	r2, [r7, #7]
 8007d56:	b292      	uxth	r2, r2
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fed3 	bl	8008b06 <LiteLink_GetObjectPtr>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3730      	adds	r7, #48	@ 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <LiteLink_ParserSegment>:
 * @param buffer Output buffer to store parsed data.
 * @param length The length of the parsed segment.
 * @return The return status, LL_OK if successful.
 */
LiteLink_ReturnType LiteLink_ParserSegment(LiteLink_Segment* segment, uint8_t* buffer, uint16_t* length)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
    LiteLink_Header* _header = (LiteLink_Header*)&segment->header;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	617b      	str	r3, [r7, #20]
    uint8_t len = _header->offset.psr.len;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	799b      	ldrb	r3, [r3, #6]
 8007d7e:	74fb      	strb	r3, [r7, #19]

    memcpy(buffer, (uint8_t*)&segment->header, sizeof(LiteLink_Header)); /* Copy header */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	220c      	movs	r2, #12
 8007d84:	4619      	mov	r1, r3
 8007d86:	68b8      	ldr	r0, [r7, #8]
 8007d88:	f007 ffd9 	bl	800fd3e <memcpy>
    memcpy((uint8_t*)&buffer[sizeof(LiteLink_Header)], (uint8_t*)segment->data, len); /* Copy data */
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f103 000c 	add.w	r0, r3, #12
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	330c      	adds	r3, #12
 8007d96:	7cfa      	ldrb	r2, [r7, #19]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f007 ffd0 	bl	800fd3e <memcpy>

    /* Update header fields */
    _header = (LiteLink_Header*)buffer;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	617b      	str	r3, [r7, #20]
    _header->seq.value = rand();
 8007da2:	f007 fd55 	bl	800f850 <rand>
 8007da6:	4603      	mov	r3, r0
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	705a      	strb	r2, [r3, #1]
    _header->des.value = swap16bit(_header->des.value);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff ff00 	bl	8007bb8 <swap16bit>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	805a      	strh	r2, [r3, #2]
    _header->src.value = swap16bit(_header->src.value);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	889b      	ldrh	r3, [r3, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fef7 	bl	8007bb8 <swap16bit>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	461a      	mov	r2, r3
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	809a      	strh	r2, [r3, #4]
    _header->ctl.value = swap32bit(_header->ctl.value);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff03 	bl	8007be2 <swap32bit>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	609a      	str	r2, [r3, #8]
    _header->offset.value = swap16bit(_header->offset.value);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff fee6 	bl	8007bb8 <swap16bit>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	80da      	strh	r2, [r3, #6]

    /* Calculate CRC */
    _header->crc = LiteLink_CalCrc8(0xFF, &buffer[1], len + sizeof(LiteLink_Header) - 1);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1c59      	adds	r1, r3, #1
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	330b      	adds	r3, #11
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	20ff      	movs	r0, #255	@ 0xff
 8007e04:	f000 fdd4 	bl	80089b0 <LiteLink_CalCrc8>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	701a      	strb	r2, [r3, #0]
    *length = len + sizeof(LiteLink_Header);
 8007e10:	7cfb      	ldrb	r3, [r7, #19]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	330c      	adds	r3, #12
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	801a      	strh	r2, [r3, #0]
//    for (uint8_t countByte = 1; countByte < *length; countByte++)
//    {
//        buffer[countByte] ^= buffer[0];
//    }

    return LL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <LiteLink_ParserData>:
 * @param data The raw received data.
 * @param length Length of the received data.
 * @return Parsed LiteLink_Segment with header and data.
 */
LiteLink_Segment LiteLink_ParserData(uint8_t* data, uint8_t length)
{
 8007e26:	b590      	push	{r4, r7, lr}
 8007e28:	b0c9      	sub	sp, #292	@ 0x124
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007e34:	6018      	str	r0, [r3, #0]
 8007e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007e3e:	6019      	str	r1, [r3, #0]
 8007e40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e44:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007e48:	701a      	strb	r2, [r3, #0]
//    for (uint8_t countByte = 1; countByte < length; countByte++)
//    {
//        data[countByte] ^= data[0];
//    }

    memcpy(&_seg.header, data, sizeof(LiteLink_Header));
 8007e4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007e52:	f107 0014 	add.w	r0, r7, #20
 8007e56:	220c      	movs	r2, #12
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	f007 ff70 	bl	800fd3e <memcpy>
    memcpy(_seg.data, &data[sizeof(LiteLink_Header)], length - sizeof(LiteLink_Header));
 8007e5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f103 010c 	add.w	r1, r3, #12
 8007e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e70:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f1a3 020c 	sub.w	r2, r3, #12
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	330c      	adds	r3, #12
 8007e80:	4618      	mov	r0, r3
 8007e82:	f007 ff5c 	bl	800fd3e <memcpy>

    offset.value = (uint16_t)swap16bit(_seg.header.offset.value);
 8007e86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fe91 	bl	8007bb8 <swap16bit>
 8007e96:	4603      	mov	r3, r0
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007e9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007ea2:	801a      	strh	r2, [r3, #0]

    /* Check CRC */
    if (_seg.header.crc != LiteLink_CalCrc8(0xFF, (uint8_t*)&data[1], (uint16_t)(offset.psr.len + sizeof(LiteLink_Header) - 1)))
 8007ea4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007ea8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007eac:	781c      	ldrb	r4, [r3, #0]
 8007eae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007eb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	1c59      	adds	r1, r3, #1
 8007eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007ebe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	330b      	adds	r3, #11
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	20ff      	movs	r0, #255	@ 0xff
 8007ecc:	f000 fd70 	bl	80089b0 <LiteLink_CalCrc8>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d017      	beq.n	8007f06 <LiteLink_ParserData+0xe0>
    {
        memset(&_seg.header, 0x00, sizeof(LiteLink_Header));
 8007ed6:	f107 0314 	add.w	r3, r7, #20
 8007eda:	220c      	movs	r2, #12
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f007 fe2f 	bl	800fb42 <memset>
        return _seg;
 8007ee4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007ee8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007ef2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8007efe:	461a      	mov	r2, r3
 8007f00:	f007 ff1d 	bl	800fd3e <memcpy>
 8007f04:	e059      	b.n	8007fba <LiteLink_ParserData+0x194>
    }

    /* Update header fields */
    _seg.header.seq.value = swap8bit(_seg.header.seq.value);
 8007f06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fe3c 	bl	8007b8e <swap8bit>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f22:	705a      	strb	r2, [r3, #1]
    _seg.header.des.value = swap16bit(_seg.header.des.value);
 8007f24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fe42 	bl	8007bb8 <swap16bit>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f40:	805a      	strh	r2, [r3, #2]
    _seg.header.src.value = swap16bit(_seg.header.src.value);
 8007f42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f4a:	889b      	ldrh	r3, [r3, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fe33 	bl	8007bb8 <swap16bit>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461a      	mov	r2, r3
 8007f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f5e:	809a      	strh	r2, [r3, #4]
    _seg.header.ctl.value = swap32bit(_seg.header.ctl.value);
 8007f60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fe39 	bl	8007be2 <swap32bit>
 8007f70:	4602      	mov	r2, r0
 8007f72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f7a:	609a      	str	r2, [r3, #8]
    _seg.header.offset.value = swap16bit(_seg.header.offset.value);
 8007f7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fe16 	bl	8007bb8 <swap16bit>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f98:	80da      	strh	r2, [r3, #6]

    return _seg;
 8007f9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007f9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f007 fec2 	bl	800fd3e <memcpy>
}
 8007fba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd90      	pop	{r4, r7, pc}

08007fcc <LiteLink_InboundMessage>:
 * @param data The received data to be processed.
 * @param length The length of the received data.
 */
uint16_t counterror = 0;
void LiteLink_InboundMessage(LiteLink* llnet, uint8_t* data, uint16_t length)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0c8      	sub	sp, #288	@ 0x120
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007fda:	6018      	str	r0, [r3, #0]
 8007fdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fe0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007fe4:	6019      	str	r1, [r3, #0]
 8007fe6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007fea:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8007fee:	801a      	strh	r2, [r3, #0]
    llnet->lock |= LL_INBOUND_LOCKED;
 8007ff0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007ff4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	7b5b      	ldrb	r3, [r3, #13]
 8007ffc:	f043 0302 	orr.w	r3, r3, #2
 8008000:	b2da      	uxtb	r2, r3
 8008002:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008006:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	735a      	strb	r2, [r3, #13]
    LiteLink_Segment _seg = LiteLink_ParserData(data, length);
 800800e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008012:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800801e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8008022:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008026:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800802a:	6819      	ldr	r1, [r3, #0]
 800802c:	f7ff fefb 	bl	8007e26 <LiteLink_ParserData>

    if (_seg.header.des.psr.addr == LITELINK_BROADCAST_ADDR)
 8008030:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008034:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800803e:	b29b      	uxth	r3, r3
 8008040:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 8008044:	4293      	cmp	r3, r2
 8008046:	d110      	bne.n	800806a <LiteLink_InboundMessage+0x9e>
    {
        _seg.header.des.psr.addr = llnet->local_address;
 8008048:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800804c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	89db      	ldrh	r3, [r3, #14]
 8008054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008058:	b299      	uxth	r1, r3
 800805a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800805e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8008062:	8853      	ldrh	r3, [r2, #2]
 8008064:	f361 138f 	bfi	r3, r1, #6, #10
 8008068:	8053      	strh	r3, [r2, #2]
    }

    if(_seg.header.ctl.psr.wlan == LITELINK_BROADCAST_ADDR)
 800806a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800806e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008072:	895b      	ldrh	r3, [r3, #10]
 8008074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008078:	b29b      	uxth	r3, r3
 800807a:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 800807e:	4293      	cmp	r3, r2
 8008080:	d110      	bne.n	80080a4 <LiteLink_InboundMessage+0xd8>
    {
    	_seg.header.ctl.psr.wlan = llnet->wlan_address;
 8008082:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008086:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	8a1b      	ldrh	r3, [r3, #16]
 800808e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008092:	b299      	uxth	r1, r3
 8008094:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008098:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800809c:	8953      	ldrh	r3, [r2, #10]
 800809e:	f361 138f 	bfi	r3, r1, #6, #10
 80080a2:	8153      	strh	r3, [r2, #10]
    }

    if(_seg.header.des.psr.addr != llnet->local_address || _seg.header.ctl.psr.wlan != llnet->wlan_address)
 80080a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	89db      	ldrh	r3, [r3, #14]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d110      	bne.n	80080e8 <LiteLink_InboundMessage+0x11c>
 80080c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80080ce:	895b      	ldrh	r3, [r3, #10]
 80080d0:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	8a1b      	ldrh	r3, [r3, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d006      	beq.n	80080f6 <LiteLink_InboundMessage+0x12a>
    {
    	counterror ++;
 80080e8:	4b14      	ldr	r3, [pc, #80]	@ (800813c <LiteLink_InboundMessage+0x170>)
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	4b12      	ldr	r3, [pc, #72]	@ (800813c <LiteLink_InboundMessage+0x170>)
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	e01e      	b.n	8008134 <LiteLink_InboundMessage+0x168>
    	return;
    }

    LiteLink_FifoEnqueue(llnet->segments, (void*)&_seg, length);
 80080f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80080fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008106:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800810a:	881a      	ldrh	r2, [r3, #0]
 800810c:	f107 0314 	add.w	r3, r7, #20
 8008110:	4619      	mov	r1, r3
 8008112:	f000 fe30 	bl	8008d76 <LiteLink_FifoEnqueue>
    llnet->lock &= ~LL_INBOUND_LOCKED;
 8008116:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800811a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	7b5b      	ldrb	r3, [r3, #13]
 8008122:	f023 0302 	bic.w	r3, r3, #2
 8008126:	b2da      	uxtb	r2, r3
 8008128:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800812c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	735a      	strb	r2, [r3, #13]
}
 8008134:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20001e2c 	.word	0x20001e2c

08008140 <LiteLink_SendPacket>:
 * @param data Pointer to the data to send.
 * @param length Length of the data to send.
 * @return LL_OK if sending was successful, otherwise LL_NOT_OK.
 */
LiteLink_ReturnType LiteLink_SendPacket(LiteLink_Service* service, uint16_t address, uint8_t port, uint8_t* data, uint16_t length)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b0cb      	sub	sp, #300	@ 0x12c
 8008144:	af00      	add	r7, sp, #0
 8008146:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800814a:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800814e:	6020      	str	r0, [r4, #0]
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8008158:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008162:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8008166:	4602      	mov	r2, r0
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800816e:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8008172:	460a      	mov	r2, r1
 8008174:	701a      	strb	r2, [r3, #0]
    if (service->llnet->lock != LL_UNLOCKED)
 8008176:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800817a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	7b5b      	ldrb	r3, [r3, #13]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <LiteLink_SendPacket+0x4c>
    {
        return LL_NOT_OK;
 8008188:	2301      	movs	r3, #1
 800818a:	e1fa      	b.n	8008582 <LiteLink_SendPacket+0x442>
    }
    service->llnet->lock |= LL_CORE_LOCKED;
 800818c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008190:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	7b5a      	ldrb	r2, [r3, #13]
 800819a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800819e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	735a      	strb	r2, [r3, #13]

    LiteLink_Segment segment;
    uint8_t nbSeg = length / service->llnet->data_size;
 80081ae:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80081b2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80081b6:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	6852      	ldr	r2, [r2, #4]
 80081be:	7b12      	ldrb	r2, [r2, #12]
 80081c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081c4:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    uint8_t lastSeg = length % service->llnet->data_size;
 80081c8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80081cc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80081d0:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	6852      	ldr	r2, [r2, #4]
 80081d8:	7b12      	ldrb	r2, [r2, #12]
 80081da:	fb93 f1f2 	sdiv	r1, r3, r2
 80081de:	fb01 f202 	mul.w	r2, r1, r2
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    uint16_t time_out = 0x00;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

    /* Set up destination information */
    service->partner.psr.addr = address;
 80081ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80081f2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081fc:	b299      	uxth	r1, r3
 80081fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008202:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	8993      	ldrh	r3, [r2, #12]
 800820a:	f361 138f 	bfi	r3, r1, #6, #10
 800820e:	8193      	strh	r3, [r2, #12]
    service->partner.psr.port = port;
 8008210:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008214:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800821e:	b2d9      	uxtb	r1, r3
 8008220:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008224:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	7b13      	ldrb	r3, [r2, #12]
 800822c:	f361 0305 	bfi	r3, r1, #0, #6
 8008230:	7313      	strb	r3, [r2, #12]

    /* Process each segment */
    for (uint8_t countSeg = 0; countSeg < nbSeg; countSeg++)
 8008232:	2300      	movs	r3, #0
 8008234:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 8008238:	e0ba      	b.n	80083b0 <LiteLink_SendPacket+0x270>
    {
        /* Initialize segment header fields */
        segment.header.crc = 0x00;
 800823a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800823e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
        segment.header.seq.value = 0x00;
 8008246:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800824a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800824e:	2200      	movs	r2, #0
 8008250:	705a      	strb	r2, [r3, #1]
        segment.header.src.value = service->local.value;
 8008252:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008256:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	895a      	ldrh	r2, [r3, #10]
 800825e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008266:	809a      	strh	r2, [r3, #4]
        segment.header.des.psr.addr = address;
 8008268:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800826c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008276:	b299      	uxth	r1, r3
 8008278:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800827c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008280:	8853      	ldrh	r3, [r2, #2]
 8008282:	f361 138f 	bfi	r3, r1, #6, #10
 8008286:	8053      	strh	r3, [r2, #2]
        segment.header.des.psr.port = port;
 8008288:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800828c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008296:	b2d9      	uxtb	r1, r3
 8008298:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800829c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80082a0:	7893      	ldrb	r3, [r2, #2]
 80082a2:	f361 0305 	bfi	r3, r1, #0, #6
 80082a6:	7093      	strb	r3, [r2, #2]
        segment.header.offset.psr.id = countSeg;
 80082a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80082b0:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 80082b4:	71da      	strb	r2, [r3, #7]
        segment.header.offset.psr.len = service->llnet->data_size;
 80082b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	7b1a      	ldrb	r2, [r3, #12]
 80082c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80082cc:	719a      	strb	r2, [r3, #6]
        segment.header.ctl.psr.flags = LITELINK_PSH;
 80082ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082d2:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80082d6:	6893      	ldr	r3, [r2, #8]
 80082d8:	2110      	movs	r1, #16
 80082da:	f361 3354 	bfi	r3, r1, #13, #8
 80082de:	6093      	str	r3, [r2, #8]
        segment.header.ctl.psr.len = length & 0x3FFF;
 80082e0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80082e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082e8:	b299      	uxth	r1, r3
 80082ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082ee:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80082f2:	8913      	ldrh	r3, [r2, #8]
 80082f4:	f361 030c 	bfi	r3, r1, #0, #13
 80082f8:	8113      	strh	r3, [r2, #8]
        segment.header.ctl.psr.wlan = service->llnet->wlan_address;
 80082fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80082fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	8a1b      	ldrh	r3, [r3, #16]
 8008308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800830c:	b299      	uxth	r1, r3
 800830e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008312:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008316:	8953      	ldrh	r3, [r2, #10]
 8008318:	f361 138f 	bfi	r3, r1, #6, #10
 800831c:	8153      	strh	r3, [r2, #10]

        memcpy(segment.data, &data[countSeg * service->llnet->data_size], service->llnet->data_size);
 800831e:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8008322:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8008326:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	6852      	ldr	r2, [r2, #4]
 800832e:	7b12      	ldrb	r2, [r2, #12]
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	461a      	mov	r2, r3
 8008336:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800833a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	1899      	adds	r1, r3, r2
 8008342:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008346:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	7b1b      	ldrb	r3, [r3, #12]
 8008350:	461a      	mov	r2, r3
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	330c      	adds	r3, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f007 fcf0 	bl	800fd3e <memcpy>

        if (LL_NOT_OK == LiteLink_FifoEnqueue(service->llnet->segments, (void*)&segment, sizeof(LiteLink_Segment)))
 800835e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f107 0114 	add.w	r1, r7, #20
 8008370:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fcfe 	bl	8008d76 <LiteLink_FifoEnqueue>
 800837a:	4603      	mov	r3, r0
 800837c:	2b01      	cmp	r3, #1
 800837e:	d112      	bne.n	80083a6 <LiteLink_SendPacket+0x266>
        {
            service->llnet->lock &= ~LL_CORE_LOCKED;
 8008380:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008384:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	7b5a      	ldrb	r2, [r3, #13]
 800838e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008392:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	735a      	strb	r2, [r3, #13]
            return LL_NOT_OK;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e0ed      	b.n	8008582 <LiteLink_SendPacket+0x442>
    for (uint8_t countSeg = 0; countSeg < nbSeg; countSeg++)
 80083a6:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 80083aa:	3301      	adds	r3, #1
 80083ac:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 80083b0:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 80083b4:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80083b8:	429a      	cmp	r2, r3
 80083ba:	f4ff af3e 	bcc.w	800823a <LiteLink_SendPacket+0xfa>
        }
    }

    /* Process last segment if exists */
    if (lastSeg != 0)
 80083be:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 80ab 	beq.w	800851e <LiteLink_SendPacket+0x3de>
    {
        segment.header.crc = 0x00;
 80083c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
        segment.header.seq.value = 0x00;
 80083d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80083dc:	2200      	movs	r2, #0
 80083de:	705a      	strb	r2, [r3, #1]
        segment.header.src.value = service->local.value;
 80083e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	895a      	ldrh	r2, [r3, #10]
 80083ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80083f4:	809a      	strh	r2, [r3, #4]
        segment.header.des.psr.addr = address;
 80083f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80083fa:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008404:	b299      	uxth	r1, r3
 8008406:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800840a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800840e:	8853      	ldrh	r3, [r2, #2]
 8008410:	f361 138f 	bfi	r3, r1, #6, #10
 8008414:	8053      	strh	r3, [r2, #2]
        segment.header.des.psr.port = port;
 8008416:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800841a:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008424:	b2d9      	uxtb	r1, r3
 8008426:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800842a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800842e:	7893      	ldrb	r3, [r2, #2]
 8008430:	f361 0305 	bfi	r3, r1, #0, #6
 8008434:	7093      	strb	r3, [r2, #2]
        segment.header.offset.psr.id = nbSeg;
 8008436:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800843a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800843e:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8008442:	71da      	strb	r2, [r3, #7]
        segment.header.offset.psr.len = lastSeg;
 8008444:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008448:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800844c:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 8008450:	719a      	strb	r2, [r3, #6]
        segment.header.ctl.psr.flags = LITELINK_PSH;
 8008452:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008456:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800845a:	6893      	ldr	r3, [r2, #8]
 800845c:	2110      	movs	r1, #16
 800845e:	f361 3354 	bfi	r3, r1, #13, #8
 8008462:	6093      	str	r3, [r2, #8]
        segment.header.ctl.psr.len = length & 0x3FFF;
 8008464:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8008468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800846c:	b299      	uxth	r1, r3
 800846e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008472:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008476:	8913      	ldrh	r3, [r2, #8]
 8008478:	f361 030c 	bfi	r3, r1, #0, #13
 800847c:	8113      	strh	r3, [r2, #8]
        segment.header.ctl.psr.wlan = service->llnet->wlan_address;
 800847e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008482:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	8a1b      	ldrh	r3, [r3, #16]
 800848c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008490:	b299      	uxth	r1, r3
 8008492:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008496:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800849a:	8953      	ldrh	r3, [r2, #10]
 800849c:	f361 138f 	bfi	r3, r1, #6, #10
 80084a0:	8153      	strh	r3, [r2, #10]

        memcpy(segment.data, &data[nbSeg * service->llnet->data_size], lastSeg);
 80084a2:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80084a6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80084aa:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	6852      	ldr	r2, [r2, #4]
 80084b2:	7b12      	ldrb	r2, [r2, #12]
 80084b4:	fb02 f303 	mul.w	r3, r2, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	1899      	adds	r1, r3, r2
 80084c6:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	330c      	adds	r3, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f007 fc34 	bl	800fd3e <memcpy>

        if (LL_NOT_OK == LiteLink_FifoEnqueue(service->llnet->segments, (void*)&segment, sizeof(LiteLink_Segment)))
 80084d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f107 0114 	add.w	r1, r7, #20
 80084e8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fc42 	bl	8008d76 <LiteLink_FifoEnqueue>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d112      	bne.n	800851e <LiteLink_SendPacket+0x3de>
        {
            service->llnet->lock &= ~LL_CORE_LOCKED;
 80084f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	7b5a      	ldrb	r2, [r3, #13]
 8008506:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800850a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f022 0201 	bic.w	r2, r2, #1
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	735a      	strb	r2, [r3, #13]
            return LL_NOT_OK;
 800851a:	2301      	movs	r3, #1
 800851c:	e031      	b.n	8008582 <LiteLink_SendPacket+0x442>
        }
    }

    service->llnet->lock &= ~LL_CORE_LOCKED;
 800851e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008522:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	7b5a      	ldrb	r2, [r3, #13]
 800852c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008530:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f022 0201 	bic.w	r2, r2, #1
 800853c:	b2d2      	uxtb	r2, r2
 800853e:	735a      	strb	r2, [r3, #13]
    service->state = WAITING_FOR_SENDING;
 8008540:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008544:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2201      	movs	r2, #1
 800854c:	771a      	strb	r2, [r3, #28]

    /* Wait for completion */
    while (service->state != DONT_WAIT_ANYTHING)
 800854e:	e00e      	b.n	800856e <LiteLink_SendPacket+0x42e>
    {
    	if(++ time_out == 1000)
 8008550:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8008554:	3301      	adds	r3, #1
 8008556:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 800855a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800855e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008562:	d101      	bne.n	8008568 <LiteLink_SendPacket+0x428>
    	{
    		return LL_NOT_OK;
 8008564:	2301      	movs	r3, #1
 8008566:	e00c      	b.n	8008582 <LiteLink_SendPacket+0x442>
    	}
    	LITELINK_DELAY(1);
 8008568:	2001      	movs	r0, #1
 800856a:	f7f9 fb8d 	bl	8001c88 <HAL_Delay>
    while (service->state != DONT_WAIT_ANYTHING)
 800856e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008572:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	7f1b      	ldrb	r3, [r3, #28]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e7      	bne.n	8008550 <LiteLink_SendPacket+0x410>
    };

    return LL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8008588:	46bd      	mov	sp, r7
 800858a:	bd90      	pop	{r4, r7, pc}

0800858c <LiteLink_Process>:
 * @brief Processes queued segments, validates headers, and triggers events for inbound data.
 *
 * @param llnet Pointer to the LiteLink instance to process segments.
 */
void LiteLink_Process(LiteLink* llnet)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	f5ad 7d4d 	sub.w	sp, sp, #820	@ 0x334
 8008592:	af00      	add	r7, sp, #0
 8008594:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008598:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800859c:	6018      	str	r0, [r3, #0]
    uint8_t data_segment[0xFF];
    uint16_t length = 0;
 800859e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80085a2:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80085a6:	2200      	movs	r2, #0
 80085a8:	801a      	strh	r2, [r3, #0]
    LiteLink_Segment segment;

    /* Check if locked or null */
    if (llnet == NULL || (llnet->lock & LL_CORE_LOCKED) == LL_CORE_LOCKED)
 80085aa:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80085ae:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 81f5 	beq.w	80089a4 <LiteLink_Process+0x418>
 80085ba:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80085be:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	7b5b      	ldrb	r3, [r3, #13]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 81ea 	bne.w	80089a4 <LiteLink_Process+0x418>
    {
        return;
    }

    /* Dequeue and process segments */
    if (LL_OK == LiteLink_FifoDequeue(llnet->segments, (void*)&segment, &length))
 80085d0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80085d4:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f207 2222 	addw	r2, r7, #546	@ 0x222
 80085e0:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fc33 	bl	8008e50 <LiteLink_FifoDequeue>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 81da 	bne.w	80089a6 <LiteLink_Process+0x41a>
    {
        /* Handle incoming data based on address */
        if (segment.header.des.psr.addr == llnet->local_address)
 80085f2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80085f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8008600:	b29b      	uxth	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008608:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	89db      	ldrh	r3, [r3, #14]
 8008610:	429a      	cmp	r2, r3
 8008612:	f040 818d 	bne.w	8008930 <LiteLink_Process+0x3a4>
        {
            LiteLink_Service* service = LiteLink_GetObjectPtr(llnet->services, segment.header.des.psr.port);
 8008616:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800861a:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008626:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800862a:	789b      	ldrb	r3, [r3, #2]
 800862c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f000 fa66 	bl	8008b06 <LiteLink_GetObjectPtr>
 800863a:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
            service->state = DONT_WAIT_ANYTHING;
 800863e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008642:	2200      	movs	r2, #0
 8008644:	771a      	strb	r2, [r3, #28]

            if ((segment.header.ctl.psr.flags & LITELINK_PSH) == LITELINK_PSH)
 8008646:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800864a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f3c3 3347 	ubfx	r3, r3, #13, #8
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 80a8 	beq.w	80087b0 <LiteLink_Process+0x224>
            {
                /* Handle segmented data with merging */
                if (segment.header.ctl.psr.len > segment.header.offset.psr.len)
 8008660:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008664:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008668:	891b      	ldrh	r3, [r3, #8]
 800866a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800866e:	b29a      	uxth	r2, r3
 8008670:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008674:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008678:	799b      	ldrb	r3, [r3, #6]
 800867a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800867e:	b29b      	uxth	r3, r3
 8008680:	429a      	cmp	r2, r3
 8008682:	d975      	bls.n	8008770 <LiteLink_Process+0x1e4>
                {
                    if (segment.header.offset.psr.id == 0)
 8008684:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008688:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800868c:	79db      	ldrb	r3, [r3, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d111      	bne.n	80086b6 <LiteLink_Process+0x12a>
                    {
                        if (service->buff != NULL)
 8008692:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <LiteLink_Process+0x11c>
                        {
                            LiteLink_ObjListDispose(service->buff);
 800869c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fb04 	bl	8008cb0 <LiteLink_ObjListDispose>
                        }
                        service->buff = LiteLink_newObjList(0xFF);
 80086a8:	20ff      	movs	r0, #255	@ 0xff
 80086aa:	f000 f9af 	bl	8008a0c <LiteLink_newObjList>
 80086ae:	4602      	mov	r2, r0
 80086b0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80086b4:	601a      	str	r2, [r3, #0]
                    }

                    LiteLink_AddObject(service->buff, segment.data, segment.header.offset.psr.len, segment.header.offset.psr.id);
 80086b6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80086c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80086c4:	799b      	ldrb	r3, [r3, #6]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80086cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80086d0:	79db      	ldrb	r3, [r3, #7]
 80086d2:	461c      	mov	r4, r3
 80086d4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80086d8:	f103 010c 	add.w	r1, r3, #12
 80086dc:	4623      	mov	r3, r4
 80086de:	f000 f9cb 	bl	8008a78 <LiteLink_AddObject>
                    LiteLink_MergeObjects(service->buff);
 80086e2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fa4e 	bl	8008b8a <LiteLink_MergeObjects>
                    length = LiteLink_GetObjectLength(service->buff, 0);
 80086ee:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fa26 	bl	8008b48 <LiteLink_GetObjectLength>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008704:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8008708:	801a      	strh	r2, [r3, #0]

                    if (length >= segment.header.ctl.psr.len)
 800870a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800870e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008712:	891b      	ldrh	r3, [r3, #8]
 8008714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008718:	b29b      	uxth	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008720:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d842      	bhi.n	80087b0 <LiteLink_Process+0x224>
                    {
                        uint8_t* data = LiteLink_GetObjectPtr(service->buff, 0);
 800872a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f9e7 	bl	8008b06 <LiteLink_GetObjectPtr>
 8008738:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324

                        if (service != NULL && service->onMessage != NULL)
 800873c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008740:	2b00      	cmp	r3, #0
 8008742:	d035      	beq.n	80087b0 <LiteLink_Process+0x224>
 8008744:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d030      	beq.n	80087b0 <LiteLink_Process+0x224>
                        {
                            service->onMessage(segment.header.src, data, length);
 800874e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8008758:	f5a2 7287 	sub.w	r2, r2, #270	@ 0x10e
 800875c:	8812      	ldrh	r2, [r2, #0]
 800875e:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8008762:	f5a1 7007 	sub.w	r0, r1, #540	@ 0x21c
 8008766:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 800876a:	8880      	ldrh	r0, [r0, #4]
 800876c:	4798      	blx	r3
 800876e:	e01f      	b.n	80087b0 <LiteLink_Process+0x224>

                }
                else
                {
                    /* Trigger onMessage event directly */
                    if (service != NULL && service->onMessage != NULL)
 8008770:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <LiteLink_Process+0x224>
 8008778:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <LiteLink_Process+0x224>
                    {
                        service->onMessage(segment.header.src, segment.data, segment.header.ctl.psr.len);
 8008782:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 800878c:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8008790:	8912      	ldrh	r2, [r2, #8]
 8008792:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008796:	b292      	uxth	r2, r2
 8008798:	4614      	mov	r4, r2
 800879a:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800879e:	f102 010c 	add.w	r1, r2, #12
 80087a2:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80087a6:	f5a2 7007 	sub.w	r0, r2, #540	@ 0x21c
 80087aa:	4622      	mov	r2, r4
 80087ac:	8880      	ldrh	r0, [r0, #4]
 80087ae:	4798      	blx	r3
                    }
                }
            }

            if ((segment.header.ctl.psr.flags & LITELINK_PIN) == LITELINK_PIN)
 80087b0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80087b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f3c3 3347 	ubfx	r3, r3, #13, #8
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80a2 	beq.w	800890e <LiteLink_Process+0x382>
            {
            	LiteLink_Segment _seg;

            	_seg.header.crc = 0x00;
 80087ca:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80087ce:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
            	_seg.header.seq.value    = 0x00;
 80087d6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80087da:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80087de:	2200      	movs	r2, #0
 80087e0:	705a      	strb	r2, [r3, #1]
            	_seg.header.src.psr.addr = llnet->local_address;
 80087e2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80087e6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	89db      	ldrh	r3, [r3, #14]
 80087ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087f2:	b299      	uxth	r1, r3
 80087f4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80087f8:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 80087fc:	8893      	ldrh	r3, [r2, #4]
 80087fe:	f361 138f 	bfi	r3, r1, #6, #10
 8008802:	8093      	strh	r3, [r2, #4]
            	_seg.header.src.psr.port = 0x00;
 8008804:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008808:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 800880c:	7913      	ldrb	r3, [r2, #4]
 800880e:	f36f 0305 	bfc	r3, #0, #6
 8008812:	7113      	strb	r3, [r2, #4]
            	_seg.header.des.psr.addr = segment.header.src.psr.addr;
 8008814:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008818:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800881c:	889b      	ldrh	r3, [r3, #4]
 800881e:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8008822:	b299      	uxth	r1, r3
 8008824:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008828:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 800882c:	8853      	ldrh	r3, [r2, #2]
 800882e:	f361 138f 	bfi	r3, r1, #6, #10
 8008832:	8053      	strh	r3, [r2, #2]
            	_seg.header.des.psr.port = 0x00;
 8008834:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008838:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 800883c:	7893      	ldrb	r3, [r2, #2]
 800883e:	f36f 0305 	bfc	r3, #0, #6
 8008842:	7093      	strb	r3, [r2, #2]
            	_seg.header.offset.psr.id  = 0x00;
 8008844:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008848:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 800884c:	2200      	movs	r2, #0
 800884e:	71da      	strb	r2, [r3, #7]
            	_seg.header.offset.psr.len = 0x00;
 8008850:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008854:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8008858:	2200      	movs	r2, #0
 800885a:	719a      	strb	r2, [r3, #6]
            	_seg.header.ctl.psr.flags = LITELINK_PON;
 800885c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008860:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8008864:	6893      	ldr	r3, [r2, #8]
 8008866:	2108      	movs	r1, #8
 8008868:	f361 3354 	bfi	r3, r1, #13, #8
 800886c:	6093      	str	r3, [r2, #8]
            	_seg.header.ctl.psr.len   = 0x00;
 800886e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008872:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8008876:	8913      	ldrh	r3, [r2, #8]
 8008878:	f36f 030c 	bfc	r3, #0, #13
 800887c:	8113      	strh	r3, [r2, #8]
            	_seg.header.ctl.psr.wlan  = llnet->wlan_address;
 800887e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008882:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	8a1b      	ldrh	r3, [r3, #16]
 800888a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800888e:	b299      	uxth	r1, r3
 8008890:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008894:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8008898:	8953      	ldrh	r3, [r2, #10]
 800889a:	f361 138f 	bfi	r3, r1, #6, #10
 800889e:	8153      	strh	r3, [r2, #10]

            	if(_seg.header.des.psr.addr != llnet->local_address)
 80088a0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80088a4:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80088b6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	89db      	ldrh	r3, [r3, #14]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d021      	beq.n	8008906 <LiteLink_Process+0x37a>
            	{
					LiteLink_ParserSegment(&_seg, data_segment, &length);
 80088c2:	f207 2222 	addw	r2, r7, #546	@ 0x222
 80088c6:	f507 7109 	add.w	r1, r7, #548	@ 0x224
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fa4b 	bl	8007d6a <LiteLink_ParserSegment>
					if (llnet->outbound_event != NULL)
 80088d4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80088d8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d014      	beq.n	800890e <LiteLink_Process+0x382>
					{
						llnet->outbound_event(data_segment, length);
 80088e4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80088e8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80088f4:	f5a2 7287 	sub.w	r2, r2, #270	@ 0x10e
 80088f8:	8812      	ldrh	r2, [r2, #0]
 80088fa:	b2d1      	uxtb	r1, r2
 80088fc:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	e003      	b.n	800890e <LiteLink_Process+0x382>
					}
            	}
            	else
            	{
            		service->state = PONG_RECEIVED;
 8008906:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800890a:	2202      	movs	r2, #2
 800890c:	771a      	strb	r2, [r3, #28]
            	}
            }

            if ((segment.header.ctl.psr.flags & LITELINK_PON) == LITELINK_PON)
 800890e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008912:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f3c3 3347 	ubfx	r3, r3, #13, #8
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03f      	beq.n	80089a6 <LiteLink_Process+0x41a>
            {
            	service->state = PONG_RECEIVED;
 8008926:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800892a:	2202      	movs	r2, #2
 800892c:	771a      	strb	r2, [r3, #28]
 800892e:	e03a      	b.n	80089a6 <LiteLink_Process+0x41a>
            }

        }
        else
        {
            LiteLink_Service* service = LiteLink_GetObjectPtr(llnet->services, segment.header.src.psr.port);
 8008930:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008934:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008940:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008944:	791b      	ldrb	r3, [r3, #4]
 8008946:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f000 f8d9 	bl	8008b06 <LiteLink_GetObjectPtr>
 8008954:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
            service->state = DONT_WAIT_ANYTHING;
 8008958:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800895c:	2200      	movs	r2, #0
 800895e:	771a      	strb	r2, [r3, #28]

            LiteLink_ParserSegment(&segment, data_segment, &length);
 8008960:	f207 2222 	addw	r2, r7, #546	@ 0x222
 8008964:	f507 7109 	add.w	r1, r7, #548	@ 0x224
 8008968:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff f9fc 	bl	8007d6a <LiteLink_ParserSegment>
            if (llnet->outbound_event != NULL)
 8008972:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008976:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d011      	beq.n	80089a6 <LiteLink_Process+0x41a>
            {
                llnet->outbound_event(data_segment, length);
 8008982:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8008986:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8008992:	f5a2 7287 	sub.w	r2, r2, #270	@ 0x10e
 8008996:	8812      	ldrh	r2, [r2, #0]
 8008998:	b2d1      	uxtb	r1, r2
 800899a:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 800899e:	4610      	mov	r0, r2
 80089a0:	4798      	blx	r3
 80089a2:	e000      	b.n	80089a6 <LiteLink_Process+0x41a>
        return;
 80089a4:	bf00      	nop
            }
        }
    }
}
 80089a6:	f507 774d 	add.w	r7, r7, #820	@ 0x334
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd90      	pop	{r4, r7, pc}
	...

080089b0 <LiteLink_CalCrc8>:
 *  length: Length of the data array
 *
 *  returns: Calculated CRC8 value
 */
uint8_t LiteLink_CalCrc8( uint8_t InitialValue,  uint8_t* u8DataPtr, uint16_t length)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	6039      	str	r1, [r7, #0]
 80089ba:	71fb      	strb	r3, [r7, #7]
 80089bc:	4613      	mov	r3, r2
 80089be:	80bb      	strh	r3, [r7, #4]
    uint8_t crc = InitialValue;
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	73fb      	strb	r3, [r7, #15]

    /* Iterate through each byte in the data array */
    for (uint16_t idx = 0; idx < length; idx++)
 80089c4:	2300      	movs	r3, #0
 80089c6:	81bb      	strh	r3, [r7, #12]
 80089c8:	e00e      	b.n	80089e8 <LiteLink_CalCrc8+0x38>
    {
        /* Update the CRC using the lookup table */
        crc = CRC8_J1850_TABLE[crc ^ (u8DataPtr[idx & 0xFF])];
 80089ca:	89bb      	ldrh	r3, [r7, #12]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4053      	eors	r3, r2
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <LiteLink_CalCrc8+0x58>)
 80089de:	5c9b      	ldrb	r3, [r3, r2]
 80089e0:	73fb      	strb	r3, [r7, #15]
    for (uint16_t idx = 0; idx < length; idx++)
 80089e2:	89bb      	ldrh	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	81bb      	strh	r3, [r7, #12]
 80089e8:	89ba      	ldrh	r2, [r7, #12]
 80089ea:	88bb      	ldrh	r3, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3ec      	bcc.n	80089ca <LiteLink_CalCrc8+0x1a>
    }

    /* XOR the final CRC value with the initial value to get the result */
    crc ^= InitialValue;
 80089f0:	7bfa      	ldrb	r2, [r7, #15]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	4053      	eors	r3, r2
 80089f6:	73fb      	strb	r3, [r7, #15]

    return crc;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	08010900 	.word	0x08010900

08008a0c <LiteLink_newObjList>:
 *  initialCapacity: The maximum number of objects the list can hold
 *
 *  returns: Pointer to the newly created object list
 */
LiteLink_ObjList* LiteLink_newObjList(uint16_t initialCapacity)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	80fb      	strh	r3, [r7, #6]
    LiteLink_ObjList* obj_list = (LiteLink_ObjList*)malloc(sizeof(LiteLink_ObjList));
 8008a16:	2008      	movs	r0, #8
 8008a18:	f006 fe5c 	bl	800f6d4 <malloc>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	60bb      	str	r3, [r7, #8]
    obj_list->objects = (LiteLink_Object*)malloc(initialCapacity * sizeof(LiteLink_Object));
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4618      	mov	r0, r3
 8008a26:	f006 fe55 	bl	800f6d4 <malloc>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	601a      	str	r2, [r3, #0]
    obj_list->count = 0;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	809a      	strh	r2, [r3, #4]
    obj_list->capacity = initialCapacity;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	80da      	strh	r2, [r3, #6]

    /* Initialize each object in the list */
    for (uint16_t i = 0; i < initialCapacity; ++i)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	81fb      	strh	r3, [r7, #14]
 8008a42:	e010      	b.n	8008a66 <LiteLink_newObjList+0x5a>
    {
        obj_list->objects[i].data = NULL;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	89fb      	ldrh	r3, [r7, #14]
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
        obj_list->objects[i].length = 0;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	809a      	strh	r2, [r3, #4]
    for (uint16_t i = 0; i < initialCapacity; ++i)
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	3301      	adds	r3, #1
 8008a64:	81fb      	strh	r3, [r7, #14]
 8008a66:	89fa      	ldrh	r2, [r7, #14]
 8008a68:	88fb      	ldrh	r3, [r7, #6]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3ea      	bcc.n	8008a44 <LiteLink_newObjList+0x38>
    }

    return obj_list;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <LiteLink_AddObject>:
 *  index: Output parameter to hold the index of the added object
 *
 *  returns: LL_OK if the object was added successfully, LL_NOT_OK otherwise
 */
LiteLink_ReturnType LiteLink_AddObject(LiteLink_ObjList* obj_list, void* data, uint16_t length, uint16_t index)
{
 8008a78:	b590      	push	{r4, r7, lr}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4611      	mov	r1, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	460b      	mov	r3, r1
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80bb      	strh	r3, [r7, #4]
    /* Check each slot in the list for an empty position */

	if (obj_list->objects[index].data == NULL)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	88bb      	ldrh	r3, [r7, #4]
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4413      	add	r3, r2
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d12e      	bne.n	8008afc <LiteLink_AddObject+0x84>
	{
		/* Allocate memory and copy the data into the object */
		obj_list->objects[index].data = malloc(length);
 8008a9e:	88f9      	ldrh	r1, [r7, #6]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	88bb      	ldrh	r3, [r7, #4]
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	18d4      	adds	r4, r2, r3
 8008aaa:	4608      	mov	r0, r1
 8008aac:	f006 fe12 	bl	800f6d4 <malloc>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	6023      	str	r3, [r4, #0]
		if (obj_list->objects[index].data == NULL)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	88bb      	ldrh	r3, [r7, #4]
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <LiteLink_AddObject+0x50>
		{
			return LL_NOT_OK;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e01a      	b.n	8008afe <LiteLink_AddObject+0x86>
		}

		memcpy(obj_list->objects[index].data, data, length);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	88fa      	ldrh	r2, [r7, #6]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f007 f930 	bl	800fd3e <memcpy>
		obj_list->objects[index].length = length;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	88bb      	ldrh	r3, [r7, #4]
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	88fa      	ldrh	r2, [r7, #6]
 8008aea:	809a      	strh	r2, [r3, #4]
		obj_list->count++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	889b      	ldrh	r3, [r3, #4]
 8008af0:	3301      	adds	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	809a      	strh	r2, [r3, #4]

		return LL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	e000      	b.n	8008afe <LiteLink_AddObject+0x86>
    }

    return LL_NOT_OK;
 8008afc:	2301      	movs	r3, #1
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd90      	pop	{r4, r7, pc}

08008b06 <LiteLink_GetObjectPtr>:
 *  data: Output buffer to store the object's data
 *
 *  returns: LL_OK if the data was retrieved successfully, LL_NOT_OK otherwise
 */
void *LiteLink_GetObjectPtr(LiteLink_ObjList* obj_list, uint16_t index)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	807b      	strh	r3, [r7, #2]
    if (index >= obj_list->capacity || obj_list->objects[index].data == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	88db      	ldrh	r3, [r3, #6]
 8008b16:	887a      	ldrh	r2, [r7, #2]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d207      	bcs.n	8008b2c <LiteLink_GetObjectPtr+0x26>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	887b      	ldrh	r3, [r7, #2]
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <LiteLink_GetObjectPtr+0x2a>
    {
        return NULL;  // No data at the requested index
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e005      	b.n	8008b3c <LiteLink_GetObjectPtr+0x36>
    }

    return obj_list->objects[index].data;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	887b      	ldrh	r3, [r7, #2]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	4413      	add	r3, r2
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <LiteLink_GetObjectLength>:
 *  index: Index of the object in the list
 *
 *  returns: Length of the object data, or 0 if no object is found
 */
uint16_t LiteLink_GetObjectLength(LiteLink_ObjList* obj_list, uint16_t index)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	807b      	strh	r3, [r7, #2]
    if (index >= obj_list->capacity || obj_list->objects[index].data == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	88db      	ldrh	r3, [r3, #6]
 8008b58:	887a      	ldrh	r2, [r7, #2]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d207      	bcs.n	8008b6e <LiteLink_GetObjectLength+0x26>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	887b      	ldrh	r3, [r7, #2]
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	4413      	add	r3, r2
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <LiteLink_GetObjectLength+0x2a>
    {
        return 0;  // No object found at the specified index
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e005      	b.n	8008b7e <LiteLink_GetObjectLength+0x36>
    }
    return obj_list->objects[index].length;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	887b      	ldrh	r3, [r7, #2]
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	889b      	ldrh	r3, [r3, #4]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <LiteLink_MergeObjects>:
 *  obj_list: Pointer to the object list
 *
 *  returns: LL_OK if merge is successful, LL_NOT_OK otherwise
 */
LiteLink_ReturnType LiteLink_MergeObjects(LiteLink_ObjList* obj_list)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
    if (obj_list->count == 0)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <LiteLink_MergeObjects+0x14>
    {
        return LL_NOT_OK;  // No objects to merge
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e084      	b.n	8008ca8 <LiteLink_MergeObjects+0x11e>
    }

    uint16_t total_length = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	82fb      	strh	r3, [r7, #22]

    /* Calculate total length of all objects' data */
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	82bb      	strh	r3, [r7, #20]
 8008ba6:	e013      	b.n	8008bd0 <LiteLink_MergeObjects+0x46>
    {
        if (obj_list->objects[i].data != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	8abb      	ldrh	r3, [r7, #20]
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <LiteLink_MergeObjects+0x40>
        {
            total_length += obj_list->objects[i].length;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	8abb      	ldrh	r3, [r7, #20]
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	889a      	ldrh	r2, [r3, #4]
 8008bc4:	8afb      	ldrh	r3, [r7, #22]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008bca:	8abb      	ldrh	r3, [r7, #20]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	82bb      	strh	r3, [r7, #20]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	88db      	ldrh	r3, [r3, #6]
 8008bd4:	8aba      	ldrh	r2, [r7, #20]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d3e6      	bcc.n	8008ba8 <LiteLink_MergeObjects+0x1e>
        }
    }

    /* Allocate memory for the merged data */
    void* merged_data = malloc(total_length);
 8008bda:	8afb      	ldrh	r3, [r7, #22]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f006 fd79 	bl	800f6d4 <malloc>
 8008be2:	4603      	mov	r3, r0
 8008be4:	60fb      	str	r3, [r7, #12]
    if (merged_data == NULL)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <LiteLink_MergeObjects+0x66>
    {
        return LL_NOT_OK;  // Memory allocation failure
 8008bec:	2301      	movs	r3, #1
 8008bee:	e05b      	b.n	8008ca8 <LiteLink_MergeObjects+0x11e>
    }

    uint16_t offset = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	827b      	strh	r3, [r7, #18]

    /* Copy data from all objects into the merged buffer */
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	823b      	strh	r3, [r7, #16]
 8008bf8:	e03f      	b.n	8008c7a <LiteLink_MergeObjects+0xf0>
    {
        if (obj_list->objects[i].data != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	8a3b      	ldrh	r3, [r7, #16]
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	4413      	add	r3, r2
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d034      	beq.n	8008c74 <LiteLink_MergeObjects+0xea>
        {
            memcpy((uint8_t*)merged_data + offset, obj_list->objects[i].data, obj_list->objects[i].length);
 8008c0a:	8a7b      	ldrh	r3, [r7, #18]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	18d0      	adds	r0, r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	8a3b      	ldrh	r3, [r7, #16]
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4413      	add	r3, r2
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	8a3b      	ldrh	r3, [r7, #16]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	4413      	add	r3, r2
 8008c26:	889b      	ldrh	r3, [r3, #4]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f007 f888 	bl	800fd3e <memcpy>
            offset += obj_list->objects[i].length;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	8a3b      	ldrh	r3, [r7, #16]
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4413      	add	r3, r2
 8008c38:	889a      	ldrh	r2, [r3, #4]
 8008c3a:	8a7b      	ldrh	r3, [r7, #18]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	827b      	strh	r3, [r7, #18]

            /* Free data for non-first objects */
            if (i != 0)
 8008c40:	8a3b      	ldrh	r3, [r7, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d016      	beq.n	8008c74 <LiteLink_MergeObjects+0xea>
            {
                free(obj_list->objects[i].data);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	8a3b      	ldrh	r3, [r7, #16]
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f006 fd46 	bl	800f6e4 <free>
                obj_list->objects[i].data = NULL;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	8a3b      	ldrh	r3, [r7, #16]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4413      	add	r3, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
                obj_list->objects[i].length = 0;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	8a3b      	ldrh	r3, [r7, #16]
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	4413      	add	r3, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	809a      	strh	r2, [r3, #4]
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008c74:	8a3b      	ldrh	r3, [r7, #16]
 8008c76:	3301      	adds	r3, #1
 8008c78:	823b      	strh	r3, [r7, #16]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	8a3a      	ldrh	r2, [r7, #16]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d3ba      	bcc.n	8008bfa <LiteLink_MergeObjects+0x70>
            }
        }
    }

    /* Set the merged data to the first object */
    free(obj_list->objects[0].data);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f006 fd2a 	bl	800f6e4 <free>
    obj_list->objects[0].data = merged_data;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]
    obj_list->objects[0].length = total_length;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	8afa      	ldrh	r2, [r7, #22]
 8008c9e:	809a      	strh	r2, [r3, #4]

    /* Update object count to 1 */
    obj_list->count = 1;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	809a      	strh	r2, [r3, #4]

    return LL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <LiteLink_ObjListDispose>:
 * for the objects and their data.
 *
 *  obj_list: Pointer to the object list to be disposed
 */
void LiteLink_ObjListDispose(LiteLink_ObjList* obj_list)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
    /* Free each object's data */
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	81fb      	strh	r3, [r7, #14]
 8008cbc:	e00b      	b.n	8008cd6 <LiteLink_ObjListDispose+0x26>
    {
        free(obj_list->objects[i].data);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	89fb      	ldrh	r3, [r7, #14]
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f006 fd0a 	bl	800f6e4 <free>
    for (uint16_t i = 0; i < obj_list->capacity; ++i)
 8008cd0:	89fb      	ldrh	r3, [r7, #14]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	81fb      	strh	r3, [r7, #14]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	89fa      	ldrh	r2, [r7, #14]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3ee      	bcc.n	8008cbe <LiteLink_ObjListDispose+0xe>
    }

    /* Free the object list and its structure */
    free(obj_list->objects);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f006 fcfd 	bl	800f6e4 <free>
    free(obj_list);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f006 fcfa 	bl	800f6e4 <free>
}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <LiteLink_newFifo>:
 *  capacity: The maximum number of objects the FIFO can hold
 *
 *  returns: Pointer to the newly created FIFO
 */
LiteLink_Fifo* LiteLink_newFifo(uint16_t capacity)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	80fb      	strh	r3, [r7, #6]
    LiteLink_Fifo* fifo = (LiteLink_Fifo*)malloc(sizeof(LiteLink_Fifo));
 8008d02:	2010      	movs	r0, #16
 8008d04:	f006 fce6 	bl	800f6d4 <malloc>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	60bb      	str	r3, [r7, #8]
    fifo->objects = (LiteLink_Object*)malloc(capacity * sizeof(LiteLink_Object));
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4618      	mov	r0, r3
 8008d12:	f006 fcdf 	bl	800f6d4 <malloc>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	601a      	str	r2, [r3, #0]
    fifo->count = 0;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2200      	movs	r2, #0
 8008d22:	809a      	strh	r2, [r3, #4]
    fifo->capacity = capacity;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	88fa      	ldrh	r2, [r7, #6]
 8008d28:	80da      	strh	r2, [r3, #6]
    fifo->head = 0;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	811a      	strh	r2, [r3, #8]
    fifo->tail = 0;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	815a      	strh	r2, [r3, #10]
    fifo->lock = LL_UNLOCKED;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	731a      	strb	r2, [r3, #12]
    /* Initialize each object in the FIFO */
    for (uint16_t i = 0; i < capacity; ++i)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	81fb      	strh	r3, [r7, #14]
 8008d40:	e010      	b.n	8008d64 <LiteLink_newFifo+0x6c>
    {
        fifo->objects[i].data = NULL;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	89fb      	ldrh	r3, [r7, #14]
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
        fifo->objects[i].length = 0;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	4413      	add	r3, r2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	809a      	strh	r2, [r3, #4]
    for (uint16_t i = 0; i < capacity; ++i)
 8008d5e:	89fb      	ldrh	r3, [r7, #14]
 8008d60:	3301      	adds	r3, #1
 8008d62:	81fb      	strh	r3, [r7, #14]
 8008d64:	89fa      	ldrh	r2, [r7, #14]
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d3ea      	bcc.n	8008d42 <LiteLink_newFifo+0x4a>
    }

    return fifo;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <LiteLink_FifoEnqueue>:
 *  length: Length of the data
 *
 *  returns: LL_OK if the object was added successfully, LL_NOT_OK if the FIFO is full
 */
LiteLink_ReturnType LiteLink_FifoEnqueue(LiteLink_Fifo* fifo, void* data, uint16_t length)
{
 8008d76:	b590      	push	{r4, r7, lr}
 8008d78:	b085      	sub	sp, #20
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	4613      	mov	r3, r2
 8008d82:	80fb      	strh	r3, [r7, #6]
    if (fifo->count == fifo->capacity || (fifo->lock & LL_CORE_LOCKED) == LL_CORE_LOCKED)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	889a      	ldrh	r2, [r3, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88db      	ldrh	r3, [r3, #6]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d005      	beq.n	8008d9c <LiteLink_FifoEnqueue+0x26>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	7b1b      	ldrb	r3, [r3, #12]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <LiteLink_FifoEnqueue+0x2a>
    {
        return LL_NOT_OK;  // FIFO is full, cannot add object
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e053      	b.n	8008e48 <LiteLink_FifoEnqueue+0xd2>
    }

    fifo->lock |= LL_CORE_LOCKED;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	7b1b      	ldrb	r3, [r3, #12]
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	731a      	strb	r2, [r3, #12]

    /* Allocate memory and copy the data into the object at the tail */
    fifo->objects[fifo->tail].data = malloc(length);
 8008dae:	88f9      	ldrh	r1, [r7, #6]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	895b      	ldrh	r3, [r3, #10]
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	18d4      	adds	r4, r2, r3
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	f006 fc89 	bl	800f6d4 <malloc>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6023      	str	r3, [r4, #0]
    if (fifo->objects[fifo->tail].data == NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	895b      	ldrh	r3, [r3, #10]
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d108      	bne.n	8008dea <LiteLink_FifoEnqueue+0x74>
    {
    	fifo->lock &= ~LL_CORE_LOCKED;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	7b1b      	ldrb	r3, [r3, #12]
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	731a      	strb	r2, [r3, #12]
        return LL_NOT_OK;  // Memory allocation failure
 8008de6:	2301      	movs	r3, #1
 8008de8:	e02e      	b.n	8008e48 <LiteLink_FifoEnqueue+0xd2>
    }

    memcpy(fifo->objects[fifo->tail].data, data, length);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	895b      	ldrh	r3, [r3, #10]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f006 ff9e 	bl	800fd3e <memcpy>
    fifo->objects[fifo->tail].length = length;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	895b      	ldrh	r3, [r3, #10]
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	88fa      	ldrh	r2, [r7, #6]
 8008e10:	809a      	strh	r2, [r3, #4]

    /* Move the tail to the next position in the circular buffer */
    fifo->tail = (fifo->tail + 1) % fifo->capacity;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	895b      	ldrh	r3, [r3, #10]
 8008e16:	3301      	adds	r3, #1
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	88d2      	ldrh	r2, [r2, #6]
 8008e1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e20:	fb01 f202 	mul.w	r2, r1, r2
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	815a      	strh	r2, [r3, #10]
    fifo->count++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	889b      	ldrh	r3, [r3, #4]
 8008e30:	3301      	adds	r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	809a      	strh	r2, [r3, #4]

    fifo->lock &= ~LL_CORE_LOCKED;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	7b1b      	ldrb	r3, [r3, #12]
 8008e3c:	f023 0301 	bic.w	r3, r3, #1
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	731a      	strb	r2, [r3, #12]
    return LL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd90      	pop	{r4, r7, pc}

08008e50 <LiteLink_FifoDequeue>:
 *  length: Pointer to the length of the dequeued object's data
 *
 *  returns: LL_OK if the object was dequeued successfully, LL_NOT_OK if the FIFO is empty
 */
LiteLink_ReturnType LiteLink_FifoDequeue(LiteLink_Fifo* fifo, void* data, uint16_t* length)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
    if (fifo->count == 0 || (fifo->lock & LL_CORE_LOCKED) == LL_CORE_LOCKED)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	889b      	ldrh	r3, [r3, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <LiteLink_FifoDequeue+0x20>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	7b1b      	ldrb	r3, [r3, #12]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <LiteLink_FifoDequeue+0x24>
    {
        return LL_NOT_OK;  // FIFO is empty, cannot dequeue object
 8008e70:	2301      	movs	r3, #1
 8008e72:	e051      	b.n	8008f18 <LiteLink_FifoDequeue+0xc8>
    }

    fifo->lock |= LL_CORE_LOCKED;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	7b1b      	ldrb	r3, [r3, #12]
 8008e78:	f043 0301 	orr.w	r3, r3, #1
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	731a      	strb	r2, [r3, #12]
    /* Copy the object's data from the head */
    *length = fifo->objects[fifo->head].length;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	891b      	ldrh	r3, [r3, #8]
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	889a      	ldrh	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	801a      	strh	r2, [r3, #0]
    memcpy(data, fifo->objects[fifo->head].data, *length);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	891b      	ldrh	r3, [r3, #8]
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	6819      	ldr	r1, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68b8      	ldr	r0, [r7, #8]
 8008eaa:	f006 ff48 	bl	800fd3e <memcpy>

    /* Free the memory of the dequeued object */
    free(fifo->objects[fifo->head].data);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	891b      	ldrh	r3, [r3, #8]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f006 fc11 	bl	800f6e4 <free>
    fifo->objects[fifo->head].data = NULL;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	891b      	ldrh	r3, [r3, #8]
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	4413      	add	r3, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
    fifo->objects[fifo->head].length = 0;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	891b      	ldrh	r3, [r3, #8]
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	809a      	strh	r2, [r3, #4]

    /* Move the head to the next position in the circular buffer */
    fifo->head = (fifo->head + 1) % fifo->capacity;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	891b      	ldrh	r3, [r3, #8]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	88d2      	ldrh	r2, [r2, #6]
 8008eec:	fb93 f1f2 	sdiv	r1, r3, r2
 8008ef0:	fb01 f202 	mul.w	r2, r1, r2
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	811a      	strh	r2, [r3, #8]
    fifo->count--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	889b      	ldrh	r3, [r3, #4]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	809a      	strh	r2, [r3, #4]
    fifo->lock &= ~LL_CORE_LOCKED;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	7b1b      	ldrb	r3, [r3, #12]
 8008f0c:	f023 0301 	bic.w	r3, r3, #1
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	731a      	strb	r2, [r3, #12]
    return LL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <ufs_BytesCmp>:
 * @param[in]   u16NumbOfByte Number of bytes to compare.
 *
 * @return      ufs_ReturnType  E_OK if arrays are equal, E_NOT_OK otherwise.
 */
ufs_ReturnType ufs_BytesCmp(uint8_t *pSrcData, uint8_t *pDesData, uint16_t u16NumbOfByte)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
    // Iterate over each byte and compare
    for (uint16_t countByte = 0; countByte < u16NumbOfByte; countByte++)
 8008f2e:	2300      	movs	r3, #0
 8008f30:	82fb      	strh	r3, [r7, #22]
 8008f32:	e00e      	b.n	8008f52 <ufs_BytesCmp+0x32>
    {
        // If any byte is different, return E_NOT_OK
        if (pSrcData[countByte] != pDesData[countByte])
 8008f34:	8afb      	ldrh	r3, [r7, #22]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	8afb      	ldrh	r3, [r7, #22]
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	440b      	add	r3, r1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d001      	beq.n	8008f4c <ufs_BytesCmp+0x2c>
        {
            return UFS_NOT_OK;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e007      	b.n	8008f5c <ufs_BytesCmp+0x3c>
    for (uint16_t countByte = 0; countByte < u16NumbOfByte; countByte++)
 8008f4c:	8afb      	ldrh	r3, [r7, #22]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	82fb      	strh	r3, [r7, #22]
 8008f52:	8afa      	ldrh	r2, [r7, #22]
 8008f54:	88fb      	ldrh	r3, [r7, #6]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d3ec      	bcc.n	8008f34 <ufs_BytesCmp+0x14>
        }
    }

    // If all bytes are equal, return E_OK
    return UFS_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <ufs_CheckSum>:
 * @param[in]   len    Length of the byte array.
 *
 * @return      uint8_t  Calculated 8-bit checksum.
 */
static uint8_t ufs_CheckSum(uint8_t *data, uint32_t len)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]

    // Sum each byte in the array
    for (uint32_t i = 0; i < len; i++)
 8008f76:	2300      	movs	r3, #0
 8008f78:	60bb      	str	r3, [r7, #8]
 8008f7a:	e009      	b.n	8008f90 <ufs_CheckSum+0x28>
    {
        checksum += data[i];
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4413      	add	r3, r2
 8008f88:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < len; i++)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60bb      	str	r3, [r7, #8]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d3f1      	bcc.n	8008f7c <ufs_CheckSum+0x14>
    }

    return checksum ^ BYTE_CODEC_DEFAULT;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	b2db      	uxtb	r3, r3
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop

08008fb0 <ufs_RemoveSpecialChars>:
 * @post       `str` will contain only alphanumeric characters and dots.
 *
 * @limitations This function assumes ASCII characters for alphanumeric checks.
 */
void ufs_RemoveSpecialChars(uint8_t *str)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
    uint8_t *src = str, *dst = str;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60bb      	str	r3, [r7, #8]
    while (*src)
 8008fc0:	e016      	b.n	8008ff0 <ufs_RemoveSpecialChars+0x40>
    {
        // Keep only alphanumeric characters and dots
        if (isalnum(*src) || *src == '.')
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4a10      	ldr	r2, [pc, #64]	@ (800900c <ufs_RemoveSpecialChars+0x5c>)
 8008fca:	4413      	add	r3, r2
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <ufs_RemoveSpecialChars+0x2e>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fdc:	d105      	bne.n	8008fea <ufs_RemoveSpecialChars+0x3a>
        {
            *dst++ = *src;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	60ba      	str	r2, [r7, #8]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	7812      	ldrb	r2, [r2, #0]
 8008fe8:	701a      	strb	r2, [r3, #0]
        }
        src++;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
    while (*src)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e4      	bne.n	8008fc2 <ufs_RemoveSpecialChars+0x12>
    }
    *dst = '\0'; // Null-terminate the cleaned string
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	08010a7a 	.word	0x08010a7a

08009010 <ufs_ParseNameFile>:
 *
 * @param[in]   name         Pointer to the file name string.
 * @param[out]  name_parser  Pointer to the structure where the parsed name and extension are stored.
 */
static void ufs_ParseNameFile(uint8_t *name, ufs_Name_Type *name_parser)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	// Remove special characters from the filename
	ufs_RemoveSpecialChars(name);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff ffc8 	bl	8008fb0 <ufs_RemoveSpecialChars>

    // Ensure name_parser is initialized to avoid any undefined behavior
    memset(name_parser->head, 0x00, MAX_NAME_LENGTH);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2210      	movs	r2, #16
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f006 fd8b 	bl	800fb42 <memset>
    memset(name_parser->extention, 0x00, 3);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3310      	adds	r3, #16
 8009030:	2203      	movs	r2, #3
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f006 fd84 	bl	800fb42 <memset>
    name_parser->length = 0;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2200      	movs	r2, #0
 800903e:	74da      	strb	r2, [r3, #19]

    // Use strtok_r for thread-safe string tokenization
    char *saveptr = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	60bb      	str	r3, [r7, #8]
    char *token = strtok_r((char *)name, ".", &saveptr);
 8009044:	f107 0308 	add.w	r3, r7, #8
 8009048:	461a      	mov	r2, r3
 800904a:	4921      	ldr	r1, [pc, #132]	@ (80090d0 <ufs_ParseNameFile+0xc0>)
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f006 fdef 	bl	800fc30 <strtok_r>
 8009052:	60f8      	str	r0, [r7, #12]

    if (token != NULL)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d036      	beq.n	80090c8 <ufs_ParseNameFile+0xb8>
    {
        // Copy the base file name, ensuring it doesn't exceed MAX_NAME_LENGTH
    	if(saveptr != NULL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d021      	beq.n	80090a4 <ufs_ParseNameFile+0x94>
    	{
            name_parser->length = (uint8_t *)saveptr -  (uint8_t *)name - 1;
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	b2db      	uxtb	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	74da      	strb	r2, [r3, #19]
    		strncpy((char *)name_parser->head, token, name_parser->length);
 8009070:	6838      	ldr	r0, [r7, #0]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	7cdb      	ldrb	r3, [r3, #19]
 8009076:	461a      	mov	r2, r3
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	f006 fd6a 	bl	800fb52 <strncpy>

    		// Get the file extension, if it exists
    		token = strtok_r(NULL, ".", &saveptr);
 800907e:	f107 0308 	add.w	r3, r7, #8
 8009082:	461a      	mov	r2, r3
 8009084:	4912      	ldr	r1, [pc, #72]	@ (80090d0 <ufs_ParseNameFile+0xc0>)
 8009086:	2000      	movs	r0, #0
 8009088:	f006 fdd2 	bl	800fc30 <strtok_r>
 800908c:	60f8      	str	r0, [r7, #12]
    		if (token != NULL)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d019      	beq.n	80090c8 <ufs_ParseNameFile+0xb8>
    		{
    			// Copy the extension, ensuring it fits into 3 characters
    			strncpy((char *)name_parser->extention, token, 3);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	3310      	adds	r3, #16
 8009098:	2203      	movs	r2, #3
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	4618      	mov	r0, r3
 800909e:	f006 fd58 	bl	800fb52 <strncpy>
    	{
    		strncpy((char *)name_parser->head, token,strlen((char *)name));
    		name_parser->length = strlen((char *)name_parser->head);
    	}
    }
}
 80090a2:	e011      	b.n	80090c8 <ufs_ParseNameFile+0xb8>
    		strncpy((char *)name_parser->head, token,strlen((char *)name));
 80090a4:	683c      	ldr	r4, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7f7 f892 	bl	80001d0 <strlen>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	68f9      	ldr	r1, [r7, #12]
 80090b2:	4620      	mov	r0, r4
 80090b4:	f006 fd4d 	bl	800fb52 <strncpy>
    		name_parser->length = strlen((char *)name_parser->head);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f7 f888 	bl	80001d0 <strlen>
 80090c0:	4603      	mov	r3, r0
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	74da      	strb	r2, [r3, #19]
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd90      	pop	{r4, r7, pc}
 80090d0:	080108fc 	.word	0x080108fc

080090d4 <ufs_GetListCluster>:
 * @param[in]   item  Pointer to the UFS item structure that contains file information.
 *
 * @return      ufs_ReturnType    UFS_OK on success, UFS_NOT_OK on failure.
 */
static ufs_ReturnType ufs_GetListCluster(UFS *ufs, ufs_Item_Type *item)
{
 80090d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090d8:	b08b      	sub	sp, #44	@ 0x2c
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
 80090e0:	466b      	mov	r3, sp
 80090e2:	461e      	mov	r6, r3
    uint16_t *valueSlot;
    uint16_t idSector = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t idSector_old = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t position = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	843b      	strh	r3, [r7, #32]

    // Allocate memory for reading data from one sector
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 80090f8:	460b      	mov	r3, r1
 80090fa:	3b01      	subs	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	b28b      	uxth	r3, r1
 8009100:	2200      	movs	r2, #0
 8009102:	4698      	mov	r8, r3
 8009104:	4691      	mov	r9, r2
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800911a:	b28b      	uxth	r3, r1
 800911c:	2200      	movs	r2, #0
 800911e:	461c      	mov	r4, r3
 8009120:	4615      	mov	r5, r2
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	f04f 0300 	mov.w	r3, #0
 800912a:	00eb      	lsls	r3, r5, #3
 800912c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009130:	00e2      	lsls	r2, r4, #3
 8009132:	460b      	mov	r3, r1
 8009134:	3307      	adds	r3, #7
 8009136:	08db      	lsrs	r3, r3, #3
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	ebad 0d03 	sub.w	sp, sp, r3
 800913e:	466b      	mov	r3, sp
 8009140:	3300      	adds	r3, #0
 8009142:	61bb      	str	r3, [r7, #24]

    // Calculate the number of clusters needed based on the file size
    uint32_t file_size_in_bytes = item->info.comp.size;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009148:	617b      	str	r3, [r7, #20]
    uint32_t cluster_size_in_bytes = ufs->conf->api->u16numberByteOfSector * ufs->NumberSectorOfCluster;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	88db      	ldrh	r3, [r3, #6]
 8009158:	fb02 f303 	mul.w	r3, r2, r3
 800915c:	613b      	str	r3, [r7, #16]
    item->clusters.length = (file_size_in_bytes + cluster_size_in_bytes - 1) / cluster_size_in_bytes + 1;
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	4413      	add	r3, r2
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	b29b      	uxth	r3, r3
 800916e:	3301      	adds	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	811a      	strh	r2, [r3, #8]

    if(file_size_in_bytes == 0)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d105      	bne.n	8009188 <ufs_GetListCluster+0xb4>
    {
    	item->clusters.length ++;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	3301      	adds	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	811a      	strh	r2, [r3, #8]
    }

    // Reallocate memory for the clusters array
    item->clusters.value = (uint16_t *)realloc(item->clusters.value, item->clusters.length * sizeof(uint16_t));
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	891b      	ldrh	r3, [r3, #8]
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f006 fb99 	bl	800f8cc <realloc>
 800919a:	4602      	mov	r2, r0
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	605a      	str	r2, [r3, #4]
    if (item->clusters.value == NULL)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <ufs_GetListCluster+0xd8>
    {
        return UFS_NOT_OK;   // Memory allocation failure
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0d8      	b.n	800935e <ufs_GetListCluster+0x28a>
    }
    // Initialize the clusters array to invalid values (0xFFFF)
    memset(item->clusters.value, 0xFF, item->clusters.length * sizeof(uint16_t));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	6858      	ldr	r0, [r3, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	891b      	ldrh	r3, [r3, #8]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	461a      	mov	r2, r3
 80091b8:	21ff      	movs	r1, #255	@ 0xff
 80091ba:	f006 fcc2 	bl	800fb42 <memset>

    // Set the first cluster of the file from the file metadata
    item->clusters.value[0] = (item->info.comp.first_cluster.sector_id *
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	8c1a      	ldrh	r2, [r3, #32]
                               (ufs->conf->api->u16numberByteOfSector / 2)) +
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    item->clusters.value[0] = (item->info.comp.first_cluster.sector_id *
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	fb12 f303 	smulbb	r3, r2, r3
 80091d2:	b299      	uxth	r1, r3
                               item->info.comp.first_cluster.position;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
    item->clusters.value[0] = (item->info.comp.first_cluster.sector_id *
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
                               (ufs->conf->api->u16numberByteOfSector / 2)) +
 80091dc:	440a      	add	r2, r1
 80091de:	b292      	uxth	r2, r2
    item->clusters.value[0] = (item->info.comp.first_cluster.sector_id *
 80091e0:	801a      	strh	r2, [r3, #0]

    // Get the initial sector and position for the first cluster
    idSector = item->clusters.value[0] / (ufs->conf->api->u16numberByteOfSector / 2);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f8:	847b      	strh	r3, [r7, #34]	@ 0x22
    position = item->clusters.value[0] % (ufs->conf->api->u16numberByteOfSector / 2);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6952      	ldr	r2, [r2, #20]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009208:	0852      	lsrs	r2, r2, #1
 800920a:	b292      	uxth	r2, r2
 800920c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009210:	fb01 f202 	mul.w	r2, r1, r2
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	843b      	strh	r3, [r7, #32]
    idSector_old = idSector;
 8009218:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800921a:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Read the initial sector
    ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + idSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	8851      	ldrh	r1, [r2, #2]
 8009228:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800922a:	440a      	add	r2, r1
 800922c:	b290      	uxth	r0, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6952      	ldr	r2, [r2, #20]
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009236:	69b9      	ldr	r1, [r7, #24]
 8009238:	4798      	blx	r3

    // Iterate through the clusters and build the cluster chain
    for (uint16_t countSlot = 1; countSlot < item->clusters.length; countSlot++)
 800923a:	2301      	movs	r3, #1
 800923c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800923e:	e07b      	b.n	8009338 <ufs_GetListCluster+0x264>
    {
        // Update sector and position for the current cluster
        idSector = item->clusters.value[countSlot - 1] / (ufs->conf->api->u16numberByteOfSector / 2);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009246:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800924a:	3b01      	subs	r3, #1
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4413      	add	r3, r2
 8009250:	881a      	ldrh	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b29b      	uxth	r3, r3
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	847b      	strh	r3, [r7, #34]	@ 0x22
        position = item->clusters.value[countSlot - 1] % (ufs->conf->api->u16numberByteOfSector / 2);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800926a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800926e:	3b01      	subs	r3, #1
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	4413      	add	r3, r2
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6952      	ldr	r2, [r2, #20]
 800927a:	6812      	ldr	r2, [r2, #0]
 800927c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800927e:	0852      	lsrs	r2, r2, #1
 8009280:	b292      	uxth	r2, r2
 8009282:	fbb3 f1f2 	udiv	r1, r3, r2
 8009286:	fb01 f202 	mul.w	r2, r1, r2
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	843b      	strh	r3, [r7, #32]

        // If the sector has changed, read the new sector
        if (idSector_old != idSector)
 800928e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009290:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009292:	429a      	cmp	r2, r3
 8009294:	d010      	beq.n	80092b8 <ufs_GetListCluster+0x1e4>
        {
            idSector_old = idSector;
 8009296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009298:	84fb      	strh	r3, [r7, #38]	@ 0x26
            ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + idSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	8851      	ldrh	r1, [r2, #2]
 80092a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80092a8:	440a      	add	r2, r1
 80092aa:	b290      	uxth	r0, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6952      	ldr	r2, [r2, #20]
 80092b0:	6812      	ldr	r2, [r2, #0]
 80092b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80092b4:	69b9      	ldr	r1, [r7, #24]
 80092b6:	4798      	blx	r3
        }

        // Get the value of the next cluster in the chain
        valueSlot = (uint16_t *)&data_sector[position * 2];
 80092b8:	8c3b      	ldrh	r3, [r7, #32]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	4413      	add	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
        item->clusters.value[countSlot] = *valueSlot;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	4413      	add	r3, r2
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	8812      	ldrh	r2, [r2, #0]
 80092d0:	801a      	strh	r2, [r3, #0]

        // Handle different cluster states
        if (item->clusters.value[countSlot] == UFS_CLUSTER_END)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4413      	add	r3, r2
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d101      	bne.n	80092ea <ufs_GetListCluster+0x216>
        {
            return UFS_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e039      	b.n	800935e <ufs_GetListCluster+0x28a>
        }
        else if (item->clusters.value[countSlot] == UFS_CLUSTER_FREE)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d109      	bne.n	8009312 <ufs_GetListCluster+0x23e>
        {
            // If a free cluster is found, mark it as the end of the chain
            item->clusters.value[countSlot] = UFS_CLUSTER_END;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	4413      	add	r3, r2
 8009308:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800930c:	801a      	strh	r2, [r3, #0]
            return UFS_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e025      	b.n	800935e <ufs_GetListCluster+0x28a>
        }
        else if (item->clusters.value[countSlot] == UFS_CLUSTER_BAD)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009322:	4293      	cmp	r3, r2
 8009324:	d105      	bne.n	8009332 <ufs_GetListCluster+0x25e>
        {
            // If a bad cluster is encountered, set an error in the item
            item->err = UFS_ERROR_MEM_SECTOR_BAD;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2208      	movs	r2, #8
 800932a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
            return UFS_NOT_OK;
 800932e:	2301      	movs	r3, #1
 8009330:	e015      	b.n	800935e <ufs_GetListCluster+0x28a>
    for (uint16_t countSlot = 1; countSlot < item->clusters.length; countSlot++)
 8009332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009334:	3301      	adds	r3, #1
 8009336:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	891b      	ldrh	r3, [r3, #8]
 800933c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800933e:	429a      	cmp	r2, r3
 8009340:	f4ff af7e 	bcc.w	8009240 <ufs_GetListCluster+0x16c>
        }
    }

    // Ensure the last cluster in the list is marked as the end of the chain
    item->clusters.value[item->clusters.length - 1] = UFS_CLUSTER_END;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	891b      	ldrh	r3, [r3, #8]
 800934c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009350:	3b01      	subs	r3, #1
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	4413      	add	r3, r2
 8009356:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800935a:	801a      	strh	r2, [r3, #0]

    return UFS_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	46b5      	mov	sp, r6
}
 8009360:	4618      	mov	r0, r3
 8009362:	372c      	adds	r7, #44	@ 0x2c
 8009364:	46bd      	mov	sp, r7
 8009366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800936a:	bf00      	nop

0800936c <ufs_CleanClusters>:
 * @param[in]   length    Number of clusters in the list.
 *
 * @return      ufs_ReturnType    UFS_OK on success, UFS_NOT_OK on failure.
 */
static ufs_ReturnType ufs_CleanClusters(UFS *ufs, uint16_t *clusters, uint16_t length)
{
 800936c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009370:	b08b      	sub	sp, #44	@ 0x2c
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	4613      	mov	r3, r2
 800937a:	80fb      	strh	r3, [r7, #6]
 800937c:	466b      	mov	r3, sp
 800937e:	461e      	mov	r6, r3
    // If the cluster list is too short, there's nothing to clean
    if (length < 2)
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d801      	bhi.n	800938a <ufs_CleanClusters+0x1e>
    {
        return UFS_NOT_OK;
 8009386:	2301      	movs	r3, #1
 8009388:	e10a      	b.n	80095a0 <ufs_CleanClusters+0x234>
    }

    uint16_t idSector = 0, idSector_old = 0, position = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800938e:	2300      	movs	r3, #0
 8009390:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009392:	2300      	movs	r3, #0
 8009394:	843b      	strh	r3, [r7, #32]
    uint16_t *valueSlot;

    // Allocate memory for sector data
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800939e:	460b      	mov	r3, r1
 80093a0:	3b01      	subs	r3, #1
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	b28b      	uxth	r3, r1
 80093a6:	2200      	movs	r2, #0
 80093a8:	4698      	mov	r8, r3
 80093aa:	4691      	mov	r9, r2
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093c0:	b28b      	uxth	r3, r1
 80093c2:	2200      	movs	r2, #0
 80093c4:	461c      	mov	r4, r3
 80093c6:	4615      	mov	r5, r2
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	00eb      	lsls	r3, r5, #3
 80093d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093d6:	00e2      	lsls	r2, r4, #3
 80093d8:	460b      	mov	r3, r1
 80093da:	3307      	adds	r3, #7
 80093dc:	08db      	lsrs	r3, r3, #3
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	ebad 0d03 	sub.w	sp, sp, r3
 80093e4:	466b      	mov	r3, sp
 80093e6:	3300      	adds	r3, #0
 80093e8:	61bb      	str	r3, [r7, #24]

    // Start with the second-to-last cluster
    idSector = clusters[length - 2] / (ufs->conf->api->u16numberByteOfSector / 2);
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80093f0:	3b02      	subs	r3, #2
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	4413      	add	r3, r2
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	b29b      	uxth	r3, r3
 8009406:	fbb2 f3f3 	udiv	r3, r2, r3
 800940a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    position = clusters[length - 2] % (ufs->conf->api->u16numberByteOfSector / 2);
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009412:	3b02      	subs	r3, #2
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	6952      	ldr	r2, [r2, #20]
 8009420:	6812      	ldr	r2, [r2, #0]
 8009422:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009424:	0852      	lsrs	r2, r2, #1
 8009426:	b292      	uxth	r2, r2
 8009428:	fbb3 f1f2 	udiv	r1, r3, r2
 800942c:	fb01 f202 	mul.w	r2, r1, r2
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	843b      	strh	r3, [r7, #32]
    idSector_old = idSector;
 8009434:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009436:	84bb      	strh	r3, [r7, #36]	@ 0x24

    // Read the corresponding sector for the second-to-last cluster
    ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + idSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	8851      	ldrh	r1, [r2, #2]
 8009444:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009446:	440a      	add	r2, r1
 8009448:	b290      	uxth	r0, r2
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	6952      	ldr	r2, [r2, #20]
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009452:	69b9      	ldr	r1, [r7, #24]
 8009454:	4798      	blx	r3

    // Loop through clusters in reverse order, freeing them
    for (int16_t countSlot = length - 1; countSlot > 0; countSlot--)
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	3b01      	subs	r3, #1
 800945a:	b29b      	uxth	r3, r3
 800945c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800945e:	e07f      	b.n	8009560 <ufs_CleanClusters+0x1f4>
    {
        // Calculate the sector and position of the current cluster
        idSector = clusters[countSlot - 1] / (ufs->conf->api->u16numberByteOfSector / 2);
 8009460:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009464:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009468:	3b01      	subs	r3, #1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	4413      	add	r3, r2
 8009470:	881a      	ldrh	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	b29b      	uxth	r3, r3
 800947e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009482:	84fb      	strh	r3, [r7, #38]	@ 0x26
        position = clusters[countSlot - 1] % (ufs->conf->api->u16numberByteOfSector / 2);
 8009484:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009488:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800948c:	3b01      	subs	r3, #1
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	6952      	ldr	r2, [r2, #20]
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800949e:	0852      	lsrs	r2, r2, #1
 80094a0:	b292      	uxth	r2, r2
 80094a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a6:	fb01 f202 	mul.w	r2, r1, r2
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	843b      	strh	r3, [r7, #32]

        // If the sector changes, write the previous sector and read the new one
        if (idSector_old != idSector)
 80094ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d02a      	beq.n	800950c <ufs_CleanClusters+0x1a0>
        {
            // Write the modified sector back to the UFS
        	ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + idSector_old);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	8851      	ldrh	r1, [r2, #2]
 80094c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094c4:	440a      	add	r2, r1
 80094c6:	b292      	uxth	r2, r2
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
            ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + idSector_old, data_sector, ufs->conf->api->u16numberByteOfSector);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	8851      	ldrh	r1, [r2, #2]
 80094d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094da:	440a      	add	r2, r1
 80094dc:	b290      	uxth	r0, r2
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	6952      	ldr	r2, [r2, #20]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80094e6:	69b9      	ldr	r1, [r7, #24]
 80094e8:	4798      	blx	r3

            // Read the new sector
            idSector_old = idSector;
 80094ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80094ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
            ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + idSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	8851      	ldrh	r1, [r2, #2]
 80094fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80094fc:	440a      	add	r2, r1
 80094fe:	b290      	uxth	r0, r2
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	6952      	ldr	r2, [r2, #20]
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	4798      	blx	r3
        }

        // Mark the cluster as free
        valueSlot = (uint16_t *)&data_sector[position * 2];
 800950c:	8c3b      	ldrh	r3, [r7, #32]
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	4413      	add	r3, r2
 8009514:	617b      	str	r3, [r7, #20]
        if(*valueSlot != UFS_CLUSTER_BAD)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800951e:	4293      	cmp	r3, r2
 8009520:	d003      	beq.n	800952a <ufs_CleanClusters+0x1be>
        {
        	*valueSlot = UFS_CLUSTER_FREE;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009528:	801a      	strh	r2, [r3, #0]
        }

        // Update the used size
        ufs->UsedSize -= ufs->conf->api->u16numberByteOfSector * ufs->NumberSectorOfCluster;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009536:	4619      	mov	r1, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	88db      	ldrh	r3, [r3, #6]
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	611a      	str	r2, [r3, #16]
        if(ufs->UsedSize < 0)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	da02      	bge.n	8009554 <ufs_CleanClusters+0x1e8>
        {
        	ufs->UsedSize = 0;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	611a      	str	r2, [r3, #16]
    for (int16_t countSlot = length - 1; countSlot > 0; countSlot--)
 8009554:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29b      	uxth	r3, r3
 800955e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009560:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009564:	2b00      	cmp	r3, #0
 8009566:	f73f af7b 	bgt.w	8009460 <ufs_CleanClusters+0xf4>
        }
    }

    // Write the last modified sector back to the UFS
    ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + idSector);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	8851      	ldrh	r1, [r2, #2]
 8009576:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009578:	440a      	add	r2, r1
 800957a:	b292      	uxth	r2, r2
 800957c:	4610      	mov	r0, r2
 800957e:	4798      	blx	r3
    ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + idSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	8851      	ldrh	r1, [r2, #2]
 800958c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800958e:	440a      	add	r2, r1
 8009590:	b290      	uxth	r0, r2
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	6952      	ldr	r2, [r2, #20]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800959a:	69b9      	ldr	r1, [r7, #24]
 800959c:	4798      	blx	r3

    return UFS_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	46b5      	mov	sp, r6
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	372c      	adds	r7, #44	@ 0x2c
 80095a6:	46bd      	mov	sp, r7
 80095a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080095ac <ufs_OrderClusters>:
 * @param[in]   length    Number of clusters to allocate and order.
 *
 * @return      ufs_ReturnType    UFS_OK on success, UFS_NOT_OK on failure.
 */
static ufs_ReturnType ufs_OrderClusters(UFS *ufs, uint16_t *clusters, uint16_t length)
{
 80095ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095b0:	b08d      	sub	sp, #52	@ 0x34
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	4613      	mov	r3, r2
 80095ba:	80fb      	strh	r3, [r7, #6]
 80095bc:	466b      	mov	r3, sp
 80095be:	461e      	mov	r6, r3
    if (length < 2)
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d801      	bhi.n	80095ca <ufs_OrderClusters+0x1e>
    {
        return UFS_NOT_OK;  // No need to order if fewer than two clusters
 80095c6:	2301      	movs	r3, #1
 80095c8:	e1bc      	b.n	8009944 <ufs_OrderClusters+0x398>
    }

    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 80095d2:	460b      	mov	r3, r1
 80095d4:	3b01      	subs	r3, #1
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	b28b      	uxth	r3, r1
 80095da:	2200      	movs	r2, #0
 80095dc:	4698      	mov	r8, r3
 80095de:	4691      	mov	r9, r2
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095f4:	b28b      	uxth	r3, r1
 80095f6:	2200      	movs	r2, #0
 80095f8:	461c      	mov	r4, r3
 80095fa:	4615      	mov	r5, r2
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	00eb      	lsls	r3, r5, #3
 8009606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800960a:	00e2      	lsls	r2, r4, #3
 800960c:	460b      	mov	r3, r1
 800960e:	3307      	adds	r3, #7
 8009610:	08db      	lsrs	r3, r3, #3
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	ebad 0d03 	sub.w	sp, sp, r3
 8009618:	466b      	mov	r3, sp
 800961a:	3300      	adds	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]

    uint16_t sector_old = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t countSector = ufs->latest_cluster.sector_id;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8b1b      	ldrh	r3, [r3, #24]
 8009626:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t countSegment = ufs->latest_cluster.position;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8b5b      	ldrh	r3, [r3, #26]
 800962c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t *valueCluster;

    // Find and allocate free clusters
    for (uint16_t count_cluster = 0; count_cluster < (length - 1); count_cluster++)
 800962e:	2300      	movs	r3, #0
 8009630:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009632:	e0be      	b.n	80097b2 <ufs_OrderClusters+0x206>
    {
        clusters[count_cluster] = 0xFFFF;  // Initialize as invalid
 8009634:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4413      	add	r3, r2
 800963c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009640:	801a      	strh	r2, [r3, #0]

        // Search for free cluster
        do
        {
            if (++countSector >= (ufs->ClusterDataZoneFirstSector - ufs->ClusterMappingZoneFirstSector))
 8009642:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009644:	3301      	adds	r3, #1
 8009646:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009648:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	889b      	ldrh	r3, [r3, #4]
 800964e:	4619      	mov	r1, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	885b      	ldrh	r3, [r3, #2]
 8009654:	1acb      	subs	r3, r1, r3
 8009656:	429a      	cmp	r2, r3
 8009658:	db01      	blt.n	800965e <ufs_OrderClusters+0xb2>
            {
                countSector = 0x00;  // Wrap around if sector exceeds its range
 800965a:	2300      	movs	r3, #0
 800965c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            }

            if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) >= \
 800965e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	6952      	ldr	r2, [r2, #20]
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009668:	0852      	lsrs	r2, r2, #1
 800966a:	b292      	uxth	r2, r2
 800966c:	fb02 f303 	mul.w	r3, r2, r3
 8009670:	4619      	mov	r1, r3
               (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	8892      	ldrh	r2, [r2, #4]
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	88d2      	ldrh	r2, [r2, #6]
 8009684:	fbb3 f3f2 	udiv	r3, r3, r2
            if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) >= \
 8009688:	4299      	cmp	r1, r3
 800968a:	d301      	bcc.n	8009690 <ufs_OrderClusters+0xe4>
            {
            	countSector = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            }

            ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	8851      	ldrh	r1, [r2, #2]
 800969c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800969e:	440a      	add	r2, r1
 80096a0:	b290      	uxth	r0, r2
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	6952      	ldr	r2, [r2, #20]
 80096a6:	6812      	ldr	r2, [r2, #0]
 80096a8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80096aa:	69f9      	ldr	r1, [r7, #28]
 80096ac:	4798      	blx	r3

            countSegment = ufs->latest_cluster.position;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8b5b      	ldrh	r3, [r3, #26]
 80096b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
            do
            {
                if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 80096b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096b6:	3301      	adds	r3, #1
 80096b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096c2:	085b      	lsrs	r3, r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d301      	bcc.n	80096d0 <ufs_OrderClusters+0x124>
                {
                    countSegment = 0x00;  // Wrap around if segment exceeds its range
 80096cc:	2300      	movs	r3, #0
 80096ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
                }

                if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 80096d0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	68f9      	ldr	r1, [r7, #12]
 80096dc:	8889      	ldrh	r1, [r1, #4]
 80096de:	1a5b      	subs	r3, r3, r1
 80096e0:	68f9      	ldr	r1, [r7, #12]
 80096e2:	88c9      	ldrh	r1, [r1, #6]
 80096e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d301      	bcc.n	80096f0 <ufs_OrderClusters+0x144>
                {
                	countSegment = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
                }

                valueCluster = (uint16_t *)&data_sector[countSegment * 2];
 80096f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	4413      	add	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
                if (*valueCluster == UFS_CLUSTER_FREE)
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009702:	4293      	cmp	r3, r2
 8009704:	d13a      	bne.n	800977c <ufs_OrderClusters+0x1d0>
                {
                    clusters[count_cluster] = countSector * (ufs->conf->api->u16numberByteOfSector / 2) + countSegment;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	b29b      	uxth	r3, r3
 8009712:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009714:	fb12 f303 	smulbb	r3, r2, r3
 8009718:	b299      	uxth	r1, r3
 800971a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009724:	440a      	add	r2, r1
 8009726:	b292      	uxth	r2, r2
 8009728:	801a      	strh	r2, [r3, #0]
                    ufs->latest_cluster.sector_id = countSector;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800972e:	831a      	strh	r2, [r3, #24]
                    ufs->latest_cluster.position = countSegment;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009734:	835a      	strh	r2, [r3, #26]
                    if(ufs->NumberSectorOfCluster == ufs->conf->api->u16numberSectorOfBlock)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	88da      	ldrh	r2, [r3, #6]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009742:	429a      	cmp	r2, r3
 8009744:	d120      	bne.n	8009788 <ufs_OrderClusters+0x1dc>
                    {
                    	uint16_t sectorID = ufs->ClusterDataZoneFirstSector + clusters[count_cluster] * ufs->NumberSectorOfCluster;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	889a      	ldrh	r2, [r3, #4]
 800974a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	68b9      	ldr	r1, [r7, #8]
 8009750:	440b      	add	r3, r1
 8009752:	8819      	ldrh	r1, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88db      	ldrh	r3, [r3, #6]
 8009758:	fb11 f303 	smulbb	r3, r1, r3
 800975c:	b29b      	uxth	r3, r3
 800975e:	4413      	add	r3, r2
 8009760:	82fb      	strh	r3, [r7, #22]
                    	ufs->conf->api->EraseBlock(sectorID / ufs->NumberSectorOfCluster);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	88d2      	ldrh	r2, [r2, #6]
 800976e:	8af9      	ldrh	r1, [r7, #22]
 8009770:	fbb1 f2f2 	udiv	r2, r1, r2
 8009774:	b292      	uxth	r2, r2
 8009776:	4610      	mov	r0, r2
 8009778:	4798      	blx	r3
                    }
                    break;
 800977a:	e005      	b.n	8009788 <ufs_OrderClusters+0x1dc>
                }
            } while (countSegment != ufs->latest_cluster.position);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8b5b      	ldrh	r3, [r3, #26]
 8009780:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009782:	429a      	cmp	r2, r3
 8009784:	d196      	bne.n	80096b4 <ufs_OrderClusters+0x108>
 8009786:	e000      	b.n	800978a <ufs_OrderClusters+0x1de>
                    break;
 8009788:	bf00      	nop

        } while (countSector != ufs->latest_cluster.sector_id);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8b1b      	ldrh	r3, [r3, #24]
 800978e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	f47f af56 	bne.w	8009642 <ufs_OrderClusters+0x96>

        if (clusters[count_cluster] == 0xFFFF)  // If no free cluster found, fail
 8009796:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d101      	bne.n	80097ac <ufs_OrderClusters+0x200>
        {
            return UFS_NOT_OK;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0cb      	b.n	8009944 <ufs_OrderClusters+0x398>
    for (uint16_t count_cluster = 0; count_cluster < (length - 1); count_cluster++)
 80097ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097ae:	3301      	adds	r3, #1
 80097b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80097b2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	429a      	cmp	r2, r3
 80097ba:	f6ff af3b 	blt.w	8009634 <ufs_OrderClusters+0x88>
        }
    }

    // Order and link clusters
    clusters[length - 1] = UFS_CLUSTER_END;  // Mark end of cluster chain
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80097c4:	3b01      	subs	r3, #1
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	4413      	add	r3, r2
 80097cc:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80097d0:	801a      	strh	r2, [r3, #0]
    countSector = clusters[0] / (ufs->conf->api->u16numberByteOfSector / 2);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	881a      	ldrh	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097de:	085b      	lsrs	r3, r3, #1
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    countSegment = clusters[0] % (ufs->conf->api->u16numberByteOfSector / 2);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	6952      	ldr	r2, [r2, #20]
 80097f0:	6812      	ldr	r2, [r2, #0]
 80097f2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80097f4:	0852      	lsrs	r2, r2, #1
 80097f6:	b292      	uxth	r2, r2
 80097f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80097fc:	fb01 f202 	mul.w	r2, r1, r2
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	857b      	strh	r3, [r7, #42]	@ 0x2a

    ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	8851      	ldrh	r1, [r2, #2]
 8009810:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009812:	440a      	add	r2, r1
 8009814:	b290      	uxth	r0, r2
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	6952      	ldr	r2, [r2, #20]
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800981e:	69f9      	ldr	r1, [r7, #28]
 8009820:	4798      	blx	r3
    sector_old = countSector;
 8009822:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009824:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    for (uint16_t count_cluster = 0; count_cluster < (length - 1); count_cluster++)
 8009826:	2300      	movs	r3, #0
 8009828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800982a:	e06b      	b.n	8009904 <ufs_OrderClusters+0x358>
    {
        countSector = clusters[count_cluster] / (ufs->conf->api->u16numberByteOfSector / 2);
 800982c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	4413      	add	r3, r2
 8009834:	881a      	ldrh	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800983e:	085b      	lsrs	r3, r3, #1
 8009840:	b29b      	uxth	r3, r3
 8009842:	fbb2 f3f3 	udiv	r3, r2, r3
 8009846:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        countSegment = clusters[count_cluster] % (ufs->conf->api->u16numberByteOfSector / 2);
 8009848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	6952      	ldr	r2, [r2, #20]
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800985a:	0852      	lsrs	r2, r2, #1
 800985c:	b292      	uxth	r2, r2
 800985e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009862:	fb01 f202 	mul.w	r2, r1, r2
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if (sector_old != countSector)  // Write previous sector and read new one
 800986a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800986c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800986e:	429a      	cmp	r2, r3
 8009870:	d02a      	beq.n	80098c8 <ufs_OrderClusters+0x31c>
        {
        	ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + sector_old);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	8851      	ldrh	r1, [r2, #2]
 800987e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009880:	440a      	add	r2, r1
 8009882:	b292      	uxth	r2, r2
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
            ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + sector_old, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	8851      	ldrh	r1, [r2, #2]
 8009894:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009896:	440a      	add	r2, r1
 8009898:	b290      	uxth	r0, r2
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	6952      	ldr	r2, [r2, #20]
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80098a2:	69f9      	ldr	r1, [r7, #28]
 80098a4:	4798      	blx	r3
            ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	8851      	ldrh	r1, [r2, #2]
 80098b2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80098b4:	440a      	add	r2, r1
 80098b6:	b290      	uxth	r0, r2
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	6952      	ldr	r2, [r2, #20]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80098c0:	69f9      	ldr	r1, [r7, #28]
 80098c2:	4798      	blx	r3
            sector_old = countSector;
 80098c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80098c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        }

        // Link the current cluster to the next
        valueCluster = (uint16_t *)&data_sector[countSegment * 2];
 80098c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	4413      	add	r3, r2
 80098d0:	61bb      	str	r3, [r7, #24]
        *valueCluster = clusters[count_cluster + 1];
 80098d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80098d4:	3301      	adds	r3, #1
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4413      	add	r3, r2
 80098dc:	881a      	ldrh	r2, [r3, #0]
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	801a      	strh	r2, [r3, #0]

        // Update used size
        ufs->UsedSize += ufs->conf->api->u16numberByteOfSector * ufs->NumberSectorOfCluster;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	691a      	ldr	r2, [r3, #16]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098ee:	4619      	mov	r1, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	88db      	ldrh	r3, [r3, #6]
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	441a      	add	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	611a      	str	r2, [r3, #16]
    for (uint16_t count_cluster = 0; count_cluster < (length - 1); count_cluster++)
 80098fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009900:	3301      	adds	r3, #1
 8009902:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009904:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	3b01      	subs	r3, #1
 800990a:	429a      	cmp	r2, r3
 800990c:	db8e      	blt.n	800982c <ufs_OrderClusters+0x280>
    }

    // Write the final sector
    ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + countSector);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	8851      	ldrh	r1, [r2, #2]
 800991a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800991c:	440a      	add	r2, r1
 800991e:	b292      	uxth	r2, r2
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
    ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	8851      	ldrh	r1, [r2, #2]
 8009930:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009932:	440a      	add	r2, r1
 8009934:	b290      	uxth	r0, r2
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	6952      	ldr	r2, [r2, #20]
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800993e:	69f9      	ldr	r1, [r7, #28]
 8009940:	4798      	blx	r3

    return UFS_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	46b5      	mov	sp, r6
}
 8009946:	4618      	mov	r0, r3
 8009948:	3734      	adds	r7, #52	@ 0x34
 800994a:	46bd      	mov	sp, r7
 800994c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009950 <ufs_SetClusterMap>:
 * @param[in]   value           The value to set in the cluster map.
 *
 * @return      ufs_ReturnType  UFS_OK on success, UFS_NOT_OK on failure.
 */
ufs_ReturnType ufs_SetClusterMap(UFS *ufs, uint16_t cluster_index, uint16_t value)
{
 8009950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009954:	b087      	sub	sp, #28
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	807b      	strh	r3, [r7, #2]
 800995e:	4613      	mov	r3, r2
 8009960:	803b      	strh	r3, [r7, #0]
 8009962:	466b      	mov	r3, sp
 8009964:	461e      	mov	r6, r3
    // Calculate the sector index in the cluster map where the cluster index resides
    uint16_t sector_index = cluster_index / (ufs->conf->api->u16numberByteOfSector / 2);  // Divide by half the sector size (because of 16-bit values)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	b29b      	uxth	r3, r3
 8009972:	887a      	ldrh	r2, [r7, #2]
 8009974:	fbb2 f3f3 	udiv	r3, r2, r3
 8009978:	82fb      	strh	r3, [r7, #22]
    uint16_t offset_within_sector = cluster_index % (ufs->conf->api->u16numberByteOfSector / 2);  // Offset within the sector for the specific cluster entry
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	fbb3 f1f2 	udiv	r1, r3, r2
 800998c:	fb01 f202 	mul.w	r2, r1, r2
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	82bb      	strh	r3, [r7, #20]

    // Allocate memory for the sector buffer
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800999c:	460b      	mov	r3, r1
 800999e:	3b01      	subs	r3, #1
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	b28b      	uxth	r3, r1
 80099a4:	2200      	movs	r2, #0
 80099a6:	4698      	mov	r8, r3
 80099a8:	4691      	mov	r9, r2
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099be:	b28b      	uxth	r3, r1
 80099c0:	2200      	movs	r2, #0
 80099c2:	461c      	mov	r4, r3
 80099c4:	4615      	mov	r5, r2
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	00eb      	lsls	r3, r5, #3
 80099d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099d4:	00e2      	lsls	r2, r4, #3
 80099d6:	460b      	mov	r3, r1
 80099d8:	3307      	adds	r3, #7
 80099da:	08db      	lsrs	r3, r3, #3
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	ebad 0d03 	sub.w	sp, sp, r3
 80099e2:	466b      	mov	r3, sp
 80099e4:	3300      	adds	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]

    uint16_t *valueCluster = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60bb      	str	r3, [r7, #8]

    // Read the sector that contains the cluster map entry
    ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + sector_index, data_sector, ufs->conf->api->u16numberByteOfSector);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	8851      	ldrh	r1, [r2, #2]
 80099f8:	8afa      	ldrh	r2, [r7, #22]
 80099fa:	440a      	add	r2, r1
 80099fc:	b290      	uxth	r0, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6952      	ldr	r2, [r2, #20]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	4798      	blx	r3

    // Locate the exact position of the cluster map entry in the sector
    valueCluster = (uint16_t *)&data_sector[offset_within_sector * 2];  // Each entry is 2 bytes, so multiply offset by 2
 8009a0a:	8abb      	ldrh	r3, [r7, #20]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4413      	add	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

    // Update the value in the cluster map
    *valueCluster = value;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	883a      	ldrh	r2, [r7, #0]
 8009a18:	801a      	strh	r2, [r3, #0]

    // Write the updated sector back to the UFS
    ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + sector_index);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	8851      	ldrh	r1, [r2, #2]
 8009a26:	8afa      	ldrh	r2, [r7, #22]
 8009a28:	440a      	add	r2, r1
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
    ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + sector_index, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	8851      	ldrh	r1, [r2, #2]
 8009a3c:	8afa      	ldrh	r2, [r7, #22]
 8009a3e:	440a      	add	r2, r1
 8009a40:	b290      	uxth	r0, r2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	6952      	ldr	r2, [r2, #20]
 8009a46:	6812      	ldr	r2, [r2, #0]
 8009a48:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009a4a:	68f9      	ldr	r1, [r7, #12]
 8009a4c:	4798      	blx	r3

    // Return success
    return UFS_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	46b5      	mov	sp, r6
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009a5c <ufs_UpdateItemInfo>:
 * @param[in]   item  Pointer to the item (file) whose information will be updated.
 *
 * @return      ufs_ReturnType    UFS_OK on success, UFS_NOT_OK on failure.
 */
static ufs_ReturnType ufs_UpdateItemInfo(UFS *ufs, ufs_Item_Type *item)
{
 8009a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a60:	b087      	sub	sp, #28
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
 8009a68:	466b      	mov	r3, sp
 8009a6a:	461e      	mov	r6, r3
    // Allocate memory for the sector data
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8009a74:	460b      	mov	r3, r1
 8009a76:	3b01      	subs	r3, #1
 8009a78:	613b      	str	r3, [r7, #16]
 8009a7a:	b28b      	uxth	r3, r1
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4698      	mov	r8, r3
 8009a80:	4691      	mov	r9, r2
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a96:	b28b      	uxth	r3, r1
 8009a98:	2200      	movs	r2, #0
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	f04f 0200 	mov.w	r2, #0
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	00eb      	lsls	r3, r5, #3
 8009aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009aac:	00e2      	lsls	r2, r4, #3
 8009aae:	460b      	mov	r3, r1
 8009ab0:	3307      	adds	r3, #7
 8009ab2:	08db      	lsrs	r3, r3, #3
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8009aba:	466b      	mov	r3, sp
 8009abc:	3300      	adds	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

    // Check if the item has a valid sector ID and no prior error
    if (item->err != UFS_ERROR_NONE || item->location.sector_id == 0xFFFF)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <ufs_UpdateItemInfo+0x7a>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d105      	bne.n	8009ae2 <ufs_UpdateItemInfo+0x86>
    {
        item->err = UFS_ERROR_INVALID_SECTOR;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	220b      	movs	r2, #11
 8009ada:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return UFS_NOT_OK;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e06f      	b.n	8009bc2 <ufs_UpdateItemInfo+0x166>
    }

    // Read the sector containing the item information
    ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + item->location.sector_id, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	8811      	ldrh	r1, [r2, #0]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	8812      	ldrh	r2, [r2, #0]
 8009af2:	440a      	add	r2, r1
 8009af4:	b290      	uxth	r0, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6952      	ldr	r2, [r2, #20]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	4798      	blx	r3
    // Decode Header
    for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 8009b02:	2300      	movs	r3, #0
 8009b04:	82fb      	strh	r3, [r7, #22]
 8009b06:	e011      	b.n	8009b2c <ufs_UpdateItemInfo+0xd0>
    {
    	if(data_sector[countByte] != 0x00)
 8009b08:	8afb      	ldrh	r3, [r7, #22]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	5cd3      	ldrb	r3, [r2, r3]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <ufs_UpdateItemInfo+0xca>
    	{
    		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 8009b12:	8afb      	ldrh	r3, [r7, #22]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	5cd3      	ldrb	r3, [r2, r3]
 8009b18:	8afa      	ldrh	r2, [r7, #22]
 8009b1a:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 8009b1e:	43db      	mvns	r3, r3
 8009b20:	b2d9      	uxtb	r1, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	5499      	strb	r1, [r3, r2]
    for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 8009b26:	8afb      	ldrh	r3, [r7, #22]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	82fb      	strh	r3, [r7, #22]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b34:	8afa      	ldrh	r2, [r7, #22]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d3e6      	bcc.n	8009b08 <ufs_UpdateItemInfo+0xac>
    	}
    }

    // Update the item information in the sector data
    memcpy(&data_sector[item->location.position * sizeof(ufs_ItemInfo_Type)], item->info.data, sizeof(ufs_ItemInfo_Type));
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	885b      	ldrh	r3, [r3, #2]
 8009b3e:	015b      	lsls	r3, r3, #5
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	18d0      	adds	r0, r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	330c      	adds	r3, #12
 8009b48:	2220      	movs	r2, #32
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f006 f8f7 	bl	800fd3e <memcpy>

    // Encode Header
    for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 8009b50:	2300      	movs	r3, #0
 8009b52:	82bb      	strh	r3, [r7, #20]
 8009b54:	e011      	b.n	8009b7a <ufs_UpdateItemInfo+0x11e>
    {
    	if(data_sector[countByte] != 0x00)
 8009b56:	8abb      	ldrh	r3, [r7, #20]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	5cd3      	ldrb	r3, [r2, r3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <ufs_UpdateItemInfo+0x118>
    	{
    		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 8009b60:	8abb      	ldrh	r3, [r7, #20]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	5cd3      	ldrb	r3, [r2, r3]
 8009b66:	8aba      	ldrh	r2, [r7, #20]
 8009b68:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	b2d9      	uxtb	r1, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	5499      	strb	r1, [r3, r2]
    for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 8009b74:	8abb      	ldrh	r3, [r7, #20]
 8009b76:	3301      	adds	r3, #1
 8009b78:	82bb      	strh	r3, [r7, #20]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b82:	8aba      	ldrh	r2, [r7, #20]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d3e6      	bcc.n	8009b56 <ufs_UpdateItemInfo+0xfa>
    	}
    }

    // Write the updated sector back to the UFS
    ufs->conf->api->EraseSector(ufs->ItemZoneFirstSector + item->location.sector_id);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	8811      	ldrh	r1, [r2, #0]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	8812      	ldrh	r2, [r2, #0]
 8009b98:	440a      	add	r2, r1
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
    ufs->conf->api->WriteSector(ufs->ItemZoneFirstSector + item->location.sector_id, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	8811      	ldrh	r1, [r2, #0]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	8812      	ldrh	r2, [r2, #0]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	b290      	uxth	r0, r2
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	6952      	ldr	r2, [r2, #20]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	4798      	blx	r3

    // Return success
    return UFS_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	46b5      	mov	sp, r6
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bce:	bf00      	nop

08009bd0 <ufs_FastFormat>:
 * @param[in]   ufs   Pointer to the UFS (Universal File System) structure.
 *
 * @return      ufs_ReturnType    UFS_OK on success, UFS_NOT_OK on failure.
 */
ufs_ReturnType ufs_FastFormat(UFS *ufs)
{
 8009bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	b089      	sub	sp, #36	@ 0x24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	466b      	mov	r3, sp
 8009bdc:	461e      	mov	r6, r3
    // Allocate memory for one sector's worth of data
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8009be6:	460b      	mov	r3, r1
 8009be8:	3b01      	subs	r3, #1
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	b28b      	uxth	r3, r1
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	4691      	mov	r9, r2
 8009bf4:	f04f 0200 	mov.w	r2, #0
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c08:	b28b      	uxth	r3, r1
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	461c      	mov	r4, r3
 8009c0e:	4615      	mov	r5, r2
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	00eb      	lsls	r3, r5, #3
 8009c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c1e:	00e2      	lsls	r2, r4, #3
 8009c20:	460b      	mov	r3, r1
 8009c22:	3307      	adds	r3, #7
 8009c24:	08db      	lsrs	r3, r3, #3
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	ebad 0d03 	sub.w	sp, sp, r3
 8009c2c:	466b      	mov	r3, sp
 8009c2e:	3300      	adds	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]

    // Format the boot sector by erasing it
    ufs->conf->api->EraseBlock(BOOT_SECTOR_ID);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	4798      	blx	r3
    ufs->conf->api->EraseBlock(BOOT_SECTOR_ID + 1);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	2001      	movs	r0, #1
 8009c48:	4798      	blx	r3
    //ufs->conf->api->EraseSector(BOOT_SECTOR_ID);

    // Calculate key values to avoid redundant calculations
    uint16_t sector_size = ufs->conf->api->u16numberByteOfSector;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c52:	827b      	strh	r3, [r7, #18]
    uint16_t total_sectors = ufs->conf->api->u32numberSectorOfDevice;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	823b      	strh	r3, [r7, #16]
    uint16_t max_files = ufs->conf->u8NumberFileMaxOfDevice;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	795b      	ldrb	r3, [r3, #5]
 8009c64:	81fb      	strh	r3, [r7, #14]

    // Set up the item zone and cluster mapping zone
    ufs->ItemZoneFirstSector = 0x01;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	801a      	strh	r2, [r3, #0]
    ufs->ClusterMappingZoneFirstSector = ((sizeof(ufs_ItemInfo_Type) * max_files) / sector_size) + ufs->ItemZoneFirstSector + 1;
 8009c6c:	89fb      	ldrh	r3, [r7, #14]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	8a7b      	ldrh	r3, [r7, #18]
 8009c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3301      	adds	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	805a      	strh	r2, [r3, #2]

    // Calculate sectors required for cluster mapping
    uint16_t numberClusterMappingOfSector = sector_size / 2;
 8009c88:	8a7b      	ldrh	r3, [r7, #18]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	81bb      	strh	r3, [r7, #12]
    uint16_t numberSectorForClusterMapping = ((total_sectors - (ufs->ClusterMappingZoneFirstSector + 1)) / numberClusterMappingOfSector) + 1;
 8009c8e:	8a3a      	ldrh	r2, [r7, #16]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	885b      	ldrh	r3, [r3, #2]
 8009c94:	3301      	adds	r3, #1
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	89bb      	ldrh	r3, [r7, #12]
 8009c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	817b      	strh	r3, [r7, #10]

    // Calculate maximum sectors for cluster mapping and set up the number of sectors per cluster
    uint16_t numberSectorMaxForClusterMapping = total_sectors / 50;
 8009ca4:	8a3b      	ldrh	r3, [r7, #16]
 8009ca6:	4a85      	ldr	r2, [pc, #532]	@ (8009ebc <ufs_FastFormat+0x2ec>)
 8009ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cac:	091b      	lsrs	r3, r3, #4
 8009cae:	813b      	strh	r3, [r7, #8]
    ufs->NumberSectorOfCluster = numberSectorForClusterMapping / numberSectorMaxForClusterMapping + 1;
 8009cb0:	897a      	ldrh	r2, [r7, #10]
 8009cb2:	893b      	ldrh	r3, [r7, #8]
 8009cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	80da      	strh	r2, [r3, #6]

    if(ufs->conf->api->u16numberSectorOfBlock != 0 && ufs->NumberSectorOfCluster < ufs->conf->api->u16numberSectorOfBlock)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00d      	beq.n	8009cea <ufs_FastFormat+0x11a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	88da      	ldrh	r2, [r3, #6]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d205      	bcs.n	8009cea <ufs_FastFormat+0x11a>
    {
    	ufs->NumberSectorOfCluster = ufs->conf->api->u16numberSectorOfBlock;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	80da      	strh	r2, [r3, #6]
    }

    // Determine the start of the cluster data zone
    ufs->ClusterDataZoneFirstSector = ufs->ClusterMappingZoneFirstSector +
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	885a      	ldrh	r2, [r3, #2]
                                      ((ufs->NumberSectorOfCluster != 1) ? numberSectorMaxForClusterMapping : numberSectorForClusterMapping) + 1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	88db      	ldrh	r3, [r3, #6]
    ufs->ClusterDataZoneFirstSector = ufs->ClusterMappingZoneFirstSector +
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d001      	beq.n	8009cfa <ufs_FastFormat+0x12a>
 8009cf6:	893b      	ldrh	r3, [r7, #8]
 8009cf8:	e000      	b.n	8009cfc <ufs_FastFormat+0x12c>
 8009cfa:	897b      	ldrh	r3, [r7, #10]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	b29b      	uxth	r3, r3
                                      ((ufs->NumberSectorOfCluster != 1) ? numberSectorMaxForClusterMapping : numberSectorForClusterMapping) + 1;
 8009d00:	3301      	adds	r3, #1
 8009d02:	b29a      	uxth	r2, r3
    ufs->ClusterDataZoneFirstSector = ufs->ClusterMappingZoneFirstSector +
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	809a      	strh	r2, [r3, #4]

    ufs->ClusterDataZoneFirstSector = (ufs->ClusterDataZoneFirstSector + 0x0F) & ~0x0F;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	889b      	ldrh	r3, [r3, #4]
 8009d0c:	330f      	adds	r3, #15
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	f023 030f 	bic.w	r3, r3, #15
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	809a      	strh	r2, [r3, #4]

    // Read and store the unique device ID
    ufs->conf->api->ReadUniqueID(ufs->DeviceId, 8);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	3208      	adds	r2, #8
 8009d26:	2108      	movs	r1, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3

    // Initialize boot sector metadata
    memset(data_sector, 0x00, sector_size);
 8009d2c:	8a7b      	ldrh	r3, [r7, #18]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2100      	movs	r1, #0
 8009d32:	6978      	ldr	r0, [r7, #20]
 8009d34:	f005 ff05 	bl	800fb42 <memset>
    data_sector[0] = 'U';
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2255      	movs	r2, #85	@ 0x55
 8009d3c:	701a      	strb	r2, [r3, #0]
    data_sector[1] = 'F';
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2246      	movs	r2, #70	@ 0x46
 8009d42:	705a      	strb	r2, [r3, #1]
    data_sector[2] = 'S';
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2253      	movs	r2, #83	@ 0x53
 8009d48:	709a      	strb	r2, [r3, #2]
    data_sector[4] = (ufs->ItemZoneFirstSector >> 8) & 0xFF;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	711a      	strb	r2, [r3, #4]
    data_sector[5] = ufs->ItemZoneFirstSector & 0xFF;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	715a      	strb	r2, [r3, #5]
    data_sector[6] = (ufs->ClusterMappingZoneFirstSector >> 8) & 0xFF;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	0a1b      	lsrs	r3, r3, #8
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	719a      	strb	r2, [r3, #6]
    data_sector[7] = ufs->ClusterMappingZoneFirstSector & 0xFF;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	885b      	ldrh	r3, [r3, #2]
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	71da      	strb	r2, [r3, #7]
    data_sector[8] = (ufs->ClusterDataZoneFirstSector >> 8) & 0xFF;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	889b      	ldrh	r3, [r3, #4]
 8009d7e:	0a1b      	lsrs	r3, r3, #8
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	721a      	strb	r2, [r3, #8]
    data_sector[9] = ufs->ClusterDataZoneFirstSector & 0xFF;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	889b      	ldrh	r3, [r3, #4]
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	725a      	strb	r2, [r3, #9]
    data_sector[10] = (ufs->NumberSectorOfCluster >> 8) & 0xFF;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	0a1b      	lsrs	r3, r3, #8
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	729a      	strb	r2, [r3, #10]
    data_sector[11] = ufs->NumberSectorOfCluster & 0xFF;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	88db      	ldrh	r3, [r3, #6]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	72da      	strb	r2, [r3, #11]

    // Copy the device ID into the boot sector
    memcpy(&data_sector[12], ufs->DeviceId, 8);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f103 000c 	add.w	r0, r3, #12
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3308      	adds	r3, #8
 8009db4:	2208      	movs	r2, #8
 8009db6:	4619      	mov	r1, r3
 8009db8:	f005 ffc1 	bl	800fd3e <memcpy>

    // Add end-of-sector markers
    data_sector[sector_size - 3] = '\r';
 8009dbc:	8a7b      	ldrh	r3, [r7, #18]
 8009dbe:	3b03      	subs	r3, #3
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	210d      	movs	r1, #13
 8009dc4:	54d1      	strb	r1, [r2, r3]
    data_sector[sector_size - 2] = '\n';
 8009dc6:	8a7b      	ldrh	r3, [r7, #18]
 8009dc8:	3b02      	subs	r3, #2
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	210a      	movs	r1, #10
 8009dce:	54d1      	strb	r1, [r2, r3]
    data_sector[sector_size - 1] = ufs_CheckSum(data_sector, sector_size - 1);
 8009dd0:	8a7b      	ldrh	r3, [r7, #18]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	8a7b      	ldrh	r3, [r7, #18]
 8009dd8:	1e5c      	subs	r4, r3, #1
 8009dda:	4611      	mov	r1, r2
 8009ddc:	6978      	ldr	r0, [r7, #20]
 8009dde:	f7ff f8c3 	bl	8008f68 <ufs_CheckSum>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	551a      	strb	r2, [r3, r4]

    // Write the boot sector to the device
    ufs->conf->api->WriteSector(BOOT_SECTOR_ID, data_sector, sector_size);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	8a7a      	ldrh	r2, [r7, #18]
 8009df4:	6979      	ldr	r1, [r7, #20]
 8009df6:	2000      	movs	r0, #0
 8009df8:	4798      	blx	r3

    // Format the item zone by erasing and initializing each sector
    memset(data_sector, 0x00, sector_size);
 8009dfa:	8a7b      	ldrh	r3, [r7, #18]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6978      	ldr	r0, [r7, #20]
 8009e02:	f005 fe9e 	bl	800fb42 <memset>
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	83fb      	strh	r3, [r7, #30]
 8009e0a:	e014      	b.n	8009e36 <ufs_FastFormat+0x266>
    {
    	if(countSector == 0)
 8009e0c:	8bfb      	ldrh	r3, [r7, #30]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <ufs_FastFormat+0x248>
    	{
    		// Folder '/' for root in first sector of item zone
    		data_sector[0] = (uint8_t)'/' ^ BYTE_CODEC_DEFAULT;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2285      	movs	r2, #133	@ 0x85
 8009e16:	701a      	strb	r2, [r3, #0]
    	}
    	//ufs->conf->api->EraseSector(ufs->ItemZoneFirstSector + countSector);
        ufs->conf->api->WriteSector(ufs->ItemZoneFirstSector + countSector, data_sector, sector_size);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	8811      	ldrh	r1, [r2, #0]
 8009e24:	8bfa      	ldrh	r2, [r7, #30]
 8009e26:	440a      	add	r2, r1
 8009e28:	b290      	uxth	r0, r2
 8009e2a:	8a7a      	ldrh	r2, [r7, #18]
 8009e2c:	6979      	ldr	r1, [r7, #20]
 8009e2e:	4798      	blx	r3
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 8009e30:	8bfb      	ldrh	r3, [r7, #30]
 8009e32:	3301      	adds	r3, #1
 8009e34:	83fb      	strh	r3, [r7, #30]
 8009e36:	8bfa      	ldrh	r2, [r7, #30]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	885b      	ldrh	r3, [r3, #2]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	1acb      	subs	r3, r1, r3
 8009e44:	429a      	cmp	r2, r3
 8009e46:	dbe1      	blt.n	8009e0c <ufs_FastFormat+0x23c>
    }

    // Format the cluster mapping zone by erasing and initializing each sector
    memset(data_sector, 0xFF, sector_size);  // Pre-fill data_sector with 0xFF for efficiency
 8009e48:	8a7b      	ldrh	r3, [r7, #18]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	21ff      	movs	r1, #255	@ 0xff
 8009e4e:	6978      	ldr	r0, [r7, #20]
 8009e50:	f005 fe77 	bl	800fb42 <memset>
    for (uint16_t countSector = 0; countSector < (ufs->ClusterDataZoneFirstSector - ufs->ClusterMappingZoneFirstSector); countSector++)
 8009e54:	2300      	movs	r3, #0
 8009e56:	83bb      	strh	r3, [r7, #28]
 8009e58:	e017      	b.n	8009e8a <ufs_FastFormat+0x2ba>
    {
    	if(countSector == 0)
 8009e5a:	8bbb      	ldrh	r3, [r7, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d105      	bne.n	8009e6c <ufs_FastFormat+0x29c>
    	{
    		// Cluter Mapping for root is UFS_CLUSTER_END
    		data_sector[0] = 0xFF ^ BYTE_CODEC_DEFAULT;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2255      	movs	r2, #85	@ 0x55
 8009e64:	701a      	strb	r2, [r3, #0]
    		data_sector[1] = 0xFD ^ BYTE_CODEC_DEFAULT;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2257      	movs	r2, #87	@ 0x57
 8009e6a:	705a      	strb	r2, [r3, #1]
    	}
    	//ufs->conf->api->EraseBlock(ufs->ClusterMappingZoneFirstSector + countSector);
        ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, sector_size);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	8851      	ldrh	r1, [r2, #2]
 8009e78:	8bba      	ldrh	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	b290      	uxth	r0, r2
 8009e7e:	8a7a      	ldrh	r2, [r7, #18]
 8009e80:	6979      	ldr	r1, [r7, #20]
 8009e82:	4798      	blx	r3
    for (uint16_t countSector = 0; countSector < (ufs->ClusterDataZoneFirstSector - ufs->ClusterMappingZoneFirstSector); countSector++)
 8009e84:	8bbb      	ldrh	r3, [r7, #28]
 8009e86:	3301      	adds	r3, #1
 8009e88:	83bb      	strh	r3, [r7, #28]
 8009e8a:	8bba      	ldrh	r2, [r7, #28]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	889b      	ldrh	r3, [r3, #4]
 8009e90:	4619      	mov	r1, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	1acb      	subs	r3, r1, r3
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	dbde      	blt.n	8009e5a <ufs_FastFormat+0x28a>
    }

    ufs->path.id = 0;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	839a      	strh	r2, [r3, #28]
    ufs->path.name = (uint8_t *)"/";
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a06      	ldr	r2, [pc, #24]	@ (8009ec0 <ufs_FastFormat+0x2f0>)
 8009ea6:	621a      	str	r2, [r3, #32]
    // Set the used size to zero since the device has been formatted
    ufs->UsedSize = 0;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	611a      	str	r2, [r3, #16]

    return UFS_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	46b5      	mov	sp, r6
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3724      	adds	r7, #36	@ 0x24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ebc:	51eb851f 	.word	0x51eb851f
 8009ec0:	08010a00 	.word	0x08010a00

08009ec4 <newUFS>:
 *
 * @return     UFS*      Pointer to the initialized UFS instance, or NULL if
 *                       initialization failed.
 */
UFS *newUFS(ufs_Cfg_Type *pUfsCfg)
{
 8009ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ec8:	b087      	sub	sp, #28
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	466b      	mov	r3, sp
 8009ed0:	461e      	mov	r6, r3
    // Check if the required API functions are set
    if (pUfsCfg->api->Init == NULL || pUfsCfg->api->ReadSector == NULL ||
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01d      	beq.n	8009f18 <newUFS+0x54>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d018      	beq.n	8009f18 <newUFS+0x54>
        pUfsCfg->api->WriteSector == NULL || pUfsCfg->api->EraseSector == NULL ||
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
    if (pUfsCfg->api->Init == NULL || pUfsCfg->api->ReadSector == NULL ||
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d013      	beq.n	8009f18 <newUFS+0x54>
        pUfsCfg->api->WriteSector == NULL || pUfsCfg->api->EraseSector == NULL ||
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00e      	beq.n	8009f18 <newUFS+0x54>
        pUfsCfg->api->EraseBlock == NULL || pUfsCfg->api->EraseChip == NULL||
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
        pUfsCfg->api->WriteSector == NULL || pUfsCfg->api->EraseSector == NULL ||
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <newUFS+0x54>
        pUfsCfg->api->EraseBlock == NULL || pUfsCfg->api->EraseChip == NULL||
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <newUFS+0x54>
		pUfsCfg->api->ReadUniqueID == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
        pUfsCfg->api->EraseBlock == NULL || pUfsCfg->api->EraseChip == NULL||
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <newUFS+0x58>
    {
        return NULL;  // Return NULL if any essential function is missing
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e0cd      	b.n	800a0b8 <newUFS+0x1f4>
    }

    // Allocate memory for sector data and UFS instance
    uint8_t data_sector[pUfsCfg->api->u16numberByteOfSector];
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8009f22:	460b      	mov	r3, r1
 8009f24:	3b01      	subs	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	b28b      	uxth	r3, r1
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4698      	mov	r8, r3
 8009f2e:	4691      	mov	r9, r2
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f44:	b28b      	uxth	r3, r1
 8009f46:	2200      	movs	r2, #0
 8009f48:	461c      	mov	r4, r3
 8009f4a:	4615      	mov	r5, r2
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	00eb      	lsls	r3, r5, #3
 8009f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f5a:	00e2      	lsls	r2, r4, #3
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	3307      	adds	r3, #7
 8009f60:	08db      	lsrs	r3, r3, #3
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	ebad 0d03 	sub.w	sp, sp, r3
 8009f68:	466b      	mov	r3, sp
 8009f6a:	3300      	adds	r3, #0
 8009f6c:	613b      	str	r3, [r7, #16]

    UFS *ufs = (UFS *)malloc(sizeof(UFS));
 8009f6e:	2024      	movs	r0, #36	@ 0x24
 8009f70:	f005 fbb0 	bl	800f6d4 <malloc>
 8009f74:	4603      	mov	r3, r0
 8009f76:	60fb      	str	r3, [r7, #12]
    if (!ufs)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <newUFS+0xbe>
    {
        return NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e09a      	b.n	800a0b8 <newUFS+0x1f4>
    }

    // Initialize UFS configuration
    ufs->conf = pUfsCfg;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	615a      	str	r2, [r3, #20]
    ufs->conf->api->Init();
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4798      	blx	r3

    // Read boot sector
    ufs->conf->api->ReadSector(BOOT_SECTOR_ID, data_sector, ufs->conf->api->u16numberByteOfSector);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	6952      	ldr	r2, [r2, #20]
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009fa2:	6939      	ldr	r1, [r7, #16]
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	4798      	blx	r3

    // Check if the boot sector is valid
    if (UFS_OK != ufs_BytesCmp(data_sector, (uint8_t *)"UFS", 3) ||
 8009fa8:	2203      	movs	r2, #3
 8009faa:	4946      	ldr	r1, [pc, #280]	@ (800a0c4 <newUFS+0x200>)
 8009fac:	6938      	ldr	r0, [r7, #16]
 8009fae:	f7fe ffb7 	bl	8008f20 <ufs_BytesCmp>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d121      	bne.n	8009ffc <newUFS+0x138>
        UFS_OK != ufs_BytesCmp(&data_sector[ufs->conf->api->u16numberByteOfSector - 3], (uint8_t *)"\r\n", 2) ||
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fc0:	3b03      	subs	r3, #3
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	493f      	ldr	r1, [pc, #252]	@ (800a0c8 <newUFS+0x204>)
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ffa8 	bl	8008f20 <ufs_BytesCmp>
 8009fd0:	4603      	mov	r3, r0
    if (UFS_OK != ufs_BytesCmp(data_sector, (uint8_t *)"UFS", 3) ||
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d112      	bne.n	8009ffc <newUFS+0x138>
        data_sector[ufs->conf->api->u16numberByteOfSector - 1] != ufs_CheckSum(data_sector, ufs->conf->api->u16numberByteOfSector - 1))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	5cd4      	ldrb	r4, [r2, r3]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fec:	3b01      	subs	r3, #1
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6938      	ldr	r0, [r7, #16]
 8009ff2:	f7fe ffb9 	bl	8008f68 <ufs_CheckSum>
 8009ff6:	4603      	mov	r3, r0
        UFS_OK != ufs_BytesCmp(&data_sector[ufs->conf->api->u16numberByteOfSector - 3], (uint8_t *)"\r\n", 2) ||
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d004      	beq.n	800a006 <newUFS+0x142>
    {
        // Perform fast format if boot sector is invalid
        ufs_FastFormat(ufs);
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7ff fde7 	bl	8009bd0 <ufs_FastFormat>
        return ufs;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	e058      	b.n	800a0b8 <newUFS+0x1f4>
    }

    // Initialize UFS parameters from the boot sector
    ufs->latest_cluster.sector_id = 0x00;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	831a      	strh	r2, [r3, #24]
    ufs->latest_cluster.position = 0x00;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	835a      	strh	r2, [r3, #26]

    ufs->ItemZoneFirstSector = (data_sector[4] << 8) | data_sector[5];
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	791b      	ldrb	r3, [r3, #4]
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	b21a      	sxth	r2, r3
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	795b      	ldrb	r3, [r3, #5]
 800a01e:	b21b      	sxth	r3, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	b21b      	sxth	r3, r3
 800a024:	b29a      	uxth	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	801a      	strh	r2, [r3, #0]
    ufs->ClusterMappingZoneFirstSector = (data_sector[6] << 8) | data_sector[7];
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	799b      	ldrb	r3, [r3, #6]
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	b21a      	sxth	r2, r3
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	79db      	ldrb	r3, [r3, #7]
 800a036:	b21b      	sxth	r3, r3
 800a038:	4313      	orrs	r3, r2
 800a03a:	b21b      	sxth	r3, r3
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	805a      	strh	r2, [r3, #2]
    ufs->ClusterDataZoneFirstSector = (data_sector[8] << 8) | data_sector[9];
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	7a1b      	ldrb	r3, [r3, #8]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	b21a      	sxth	r2, r3
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	7a5b      	ldrb	r3, [r3, #9]
 800a04e:	b21b      	sxth	r3, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	b21b      	sxth	r3, r3
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	809a      	strh	r2, [r3, #4]
    ufs->NumberSectorOfCluster = (data_sector[10] << 8) | data_sector[11];
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	7a9b      	ldrb	r3, [r3, #10]
 800a05e:	021b      	lsls	r3, r3, #8
 800a060:	b21a      	sxth	r2, r3
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	7adb      	ldrb	r3, [r3, #11]
 800a066:	b21b      	sxth	r3, r3
 800a068:	4313      	orrs	r3, r2
 800a06a:	b21b      	sxth	r3, r3
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	80da      	strh	r2, [r3, #6]

    // Copy device ID from the boot sector
    memcpy(ufs->DeviceId, &data_sector[12], 8);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f103 0008 	add.w	r0, r3, #8
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	330c      	adds	r3, #12
 800a07c:	2208      	movs	r2, #8
 800a07e:	4619      	mov	r1, r3
 800a080:	f005 fe5d 	bl	800fd3e <memcpy>

    ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + 0, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	8850      	ldrh	r0, [r2, #2]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	6952      	ldr	r2, [r2, #20]
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a098:	6939      	ldr	r1, [r7, #16]
 800a09a:	4798      	blx	r3

    // Calculate the used size of the UFS
    ufs->UsedSize = ufs_GetUsedSize(ufs);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fcf9 	bl	800aa94 <ufs_GetUsedSize>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	611a      	str	r2, [r3, #16]

    ufs->path.id = 0x00;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	839a      	strh	r2, [r3, #28]
    ufs->path.name   = (uint8_t *)"/";
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a06      	ldr	r2, [pc, #24]	@ (800a0cc <newUFS+0x208>)
 800a0b4:	621a      	str	r2, [r3, #32]

    return ufs;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	46b5      	mov	sp, r6
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0c4:	08010a04 	.word	0x08010a04
 800a0c8:	08010a08 	.word	0x08010a08
 800a0cc:	08010a00 	.word	0x08010a00

0800a0d0 <ufs_OpenItem>:
 *
 * @return ufs_ReturnType UFS_OK on success, UFS_NOT_OK if the file cannot be opened.
 */
__fast
ufs_ReturnType ufs_OpenItem(UFS *ufs, uint8_t *name_file, ufs_Item_Type *item)
{
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	b085      	sub	sp, #20
    ufs_Location_Type slotItem; // Temporary variable to hold available slot information.
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Allocates memory to read sector data.
 800a0d6:	6943      	ldr	r3, [r0, #20]
{
 800a0d8:	4680      	mov	r8, r0
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Allocates memory to read sector data.
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 800a0de:	3307      	adds	r3, #7
 800a0e0:	466c      	mov	r4, sp
 800a0e2:	08db      	lsrs	r3, r3, #3
{
 800a0e4:	460d      	mov	r5, r1
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Allocates memory to read sector data.
 800a0e6:	eba4 03c3 	sub.w	r3, r4, r3, lsl #3
        item->err = UFS_ERROR_ALLOCATE_MEM;
        return UFS_NOT_OK;
    }

    // Lock the mutex to ensure thread safety (check LockMutex and mutex)
    if (ufs->conf->api->LockMutex && ufs->conf->api->mutex)
 800a0ea:	69c1      	ldr	r1, [r0, #28]
{
 800a0ec:	af00      	add	r7, sp, #0
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Allocates memory to read sector data.
 800a0ee:	469d      	mov	sp, r3
{
 800a0f0:	4691      	mov	r9, r2
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Allocates memory to read sector data.
 800a0f2:	46eb      	mov	fp, sp
    if (ufs->conf->api->LockMutex && ufs->conf->api->mutex)
 800a0f4:	b111      	cbz	r1, 800a0fc <ufs_OpenItem+0x2c>
 800a0f6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a0f8:	b100      	cbz	r0, 800a0fc <ufs_OpenItem+0x2c>
    {
        ufs->conf->api->LockMutex((void *)ufs->conf->api->mutex);  // Lock the mutex
 800a0fa:	4788      	blx	r1
    item->location.sector_id = 0xFFFF;
    item->status = UFS_ITEM_FREE;
    item->ufs = NULL;

    // Parse the name of the file and store it in the item structure.
    ufs_ParseNameFile(name_file, &item->info.comp.name);
 800a0fc:	f109 030c 	add.w	r3, r9, #12
    item->status = UFS_ITEM_FREE;
 800a100:	2400      	movs	r4, #0
    item->location.sector_id = 0xFFFF;
 800a102:	f64f 76ff 	movw	r6, #65535	@ 0xffff
    ufs_ParseNameFile(name_file, &item->info.comp.name);
 800a106:	4619      	mov	r1, r3
    item->location.sector_id = 0xFFFF;
 800a108:	f8a9 6000 	strh.w	r6, [r9]
    item->status = UFS_ITEM_FREE;
 800a10c:	f889 402c 	strb.w	r4, [r9, #44]	@ 0x2c
    item->ufs = NULL;
 800a110:	f8c9 4030 	str.w	r4, [r9, #48]	@ 0x30
    ufs_ParseNameFile(name_file, &item->info.comp.name);
 800a114:	4628      	mov	r0, r5
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	f7fe ff7a 	bl	8009010 <ufs_ParseNameFile>

    // Iterate through the sectors in the item zone to find the file or an empty slot.
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 800a11c:	f8b8 3000 	ldrh.w	r3, [r8]
 800a120:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800a124:	429a      	cmp	r2, r3
 800a126:	f340 81ed 	ble.w	800a504 <ufs_OpenItem+0x434>
 800a12a:	f04f 32ff 	mov.w	r2, #4294967295
 800a12e:	607a      	str	r2, [r7, #4]
        {
            // Check if the file name matches the current segment.
        	uint16_t *path_id = (uint16_t *)&data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + 24u];
            if (
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a130:	f109 021c 	add.w	r2, r9, #28
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 800a134:	60bc      	str	r4, [r7, #8]
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a136:	603a      	str	r2, [r7, #0]
        ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a138:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	440b      	add	r3, r1
 800a142:	6894      	ldr	r4, [r2, #8]
 800a144:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a146:	b298      	uxth	r0, r3
 800a148:	4659      	mov	r1, fp
 800a14a:	47a0      	blx	r4
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a14c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 800a154:	2800      	cmp	r0, #0
 800a156:	f000 809f 	beq.w	800a298 <ufs_OpenItem+0x1c8>
 800a15a:	2300      	movs	r3, #0
        	if(data_sector[countByte] != 0x00)
 800a15c:	b299      	uxth	r1, r3
 800a15e:	f81b 2001 	ldrb.w	r2, [fp, r1]
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a162:	f082 04aa 	eor.w	r4, r2, #170	@ 0xaa
        	if(data_sector[countByte] != 0x00)
 800a166:	2a00      	cmp	r2, #0
 800a168:	f000 8090 	beq.w	800a28c <ufs_OpenItem+0x1bc>
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a16c:	f80b 4001 	strb.w	r4, [fp, r1]
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a170:	6829      	ldr	r1, [r5, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 800a176:	b29a      	uxth	r2, r3
 800a178:	4282      	cmp	r2, r0
 800a17a:	d3ef      	bcc.n	800a15c <ufs_OpenItem+0x8c>
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a17c:	0940      	lsrs	r0, r0, #5
 800a17e:	f000 808b 	beq.w	800a298 <ufs_OpenItem+0x1c8>
 800a182:	f04f 0a00 	mov.w	sl, #0
 800a186:	f10b 0410 	add.w	r4, fp, #16
 800a18a:	4655      	mov	r5, sl
 800a18c:	e010      	b.n	800a1b0 <ufs_OpenItem+0xe0>

                break;
            }

            // Save the first empty slot in case we need to create a new file.
            if (data_sector[countSegment * sizeof(ufs_ItemInfo_Type)] == UFS_ITEM_FREE)
 800a18e:	f814 2c10 	ldrb.w	r2, [r4, #-16]
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a192:	3420      	adds	r4, #32
            if (data_sector[countSegment * sizeof(ufs_ItemInfo_Type)] == UFS_ITEM_FREE)
 800a194:	b91a      	cbnz	r2, 800a19e <ufs_OpenItem+0xce>
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a19c:	607b      	str	r3, [r7, #4]
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a19e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a1a6:	fa1f f58a 	uxth.w	r5, sl
 800a1aa:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
 800a1ae:	d273      	bcs.n	800a298 <ufs_OpenItem+0x1c8>
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
 800a1b0:	f1a4 0610 	sub.w	r6, r4, #16
 800a1b4:	f899 201f 	ldrb.w	r2, [r9, #31]
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	4631      	mov	r1, r6
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a1bc:	f10a 0a01 	add.w	sl, sl, #1
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
 800a1c0:	f7fe feae 	bl	8008f20 <ufs_BytesCmp>
            if (
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1e2      	bne.n	800a18e <ufs_OpenItem+0xbe>
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a1c8:	6838      	ldr	r0, [r7, #0]
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	2203      	movs	r2, #3
 800a1ce:	f7fe fea7 	bl	8008f20 <ufs_BytesCmp>
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1db      	bne.n	800a18e <ufs_OpenItem+0xbe>
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a1d6:	8922      	ldrh	r2, [r4, #8]
 800a1d8:	f8b8 101c 	ldrh.w	r1, [r8, #28]
 800a1dc:	4291      	cmp	r1, r2
 800a1de:	d1d6      	bne.n	800a18e <ufs_OpenItem+0xbe>
				ufs->path.id == *path_id &&
 800a1e0:	78e2      	ldrb	r2, [r4, #3]
 800a1e2:	f899 101f 	ldrb.w	r1, [r9, #31]
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	d1d1      	bne.n	800a18e <ufs_OpenItem+0xbe>
                memcpy(item->info.data, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], sizeof(ufs_ItemInfo_Type));
 800a1ea:	68fa      	ldr	r2, [r7, #12]
                item->location.sector_id = countSector;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f8a9 3000 	strh.w	r3, [r9]
                memcpy(item->info.data, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], sizeof(ufs_ItemInfo_Type));
 800a1f2:	f854 3c10 	ldr.w	r3, [r4, #-16]
                item->location.position  = countSegment;
 800a1f6:	f8a9 5002 	strh.w	r5, [r9, #2]
                memcpy(item->info.data, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], sizeof(ufs_ItemInfo_Type));
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800a200:	6053      	str	r3, [r2, #4]
 800a202:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a206:	6093      	str	r3, [r2, #8]
 800a208:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a20c:	60d3      	str	r3, [r2, #12]
 800a20e:	6933      	ldr	r3, [r6, #16]
 800a210:	6113      	str	r3, [r2, #16]
 800a212:	6863      	ldr	r3, [r4, #4]
 800a214:	6153      	str	r3, [r2, #20]
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	6193      	str	r3, [r2, #24]
 800a21a:	68e3      	ldr	r3, [r4, #12]
 800a21c:	61d3      	str	r3, [r2, #28]
                if(item->info.comp.name.extention[0] != 0x00)
 800a21e:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 8147 	bne.w	800a4b6 <ufs_OpenItem+0x3e6>
            ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);  // Unlock the mutex
        }
        return UFS_NOT_OK;
    }

    for(uint8_t count = 0; count < ufs->conf->u8NumberEncodeFileExtension; count ++)
 800a228:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a22c:	791a      	ldrb	r2, [r3, #4]
 800a22e:	b1aa      	cbz	r2, 800a25c <ufs_OpenItem+0x18c>
    {
    	if(UFS_OK == ufs_BytesCmp((uint8_t *)ufs->conf->pExtensionEncodeFileList[count].pListExtensionName, item->info.comp.name.extention, 3))
 800a230:	2400      	movs	r4, #0
 800a232:	f109 051c 	add.w	r5, r9, #28
 800a236:	4621      	mov	r1, r4
    	{
    		item->EncodeEnable = UFS_ENCODE_ENABLE;
 800a238:	2601      	movs	r6, #1
    	if(UFS_OK == ufs_BytesCmp((uint8_t *)ufs->conf->pExtensionEncodeFileList[count].pListExtensionName, item->info.comp.name.extention, 3))
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2203      	movs	r2, #3
 800a23e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800a242:	4629      	mov	r1, r5
 800a244:	f7fe fe6c 	bl	8008f20 <ufs_BytesCmp>
 800a248:	b908      	cbnz	r0, 800a24e <ufs_OpenItem+0x17e>
    		item->EncodeEnable = UFS_ENCODE_ENABLE;
 800a24a:	f889 6034 	strb.w	r6, [r9, #52]	@ 0x34
    for(uint8_t count = 0; count < ufs->conf->u8NumberEncodeFileExtension; count ++)
 800a24e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a252:	3401      	adds	r4, #1
 800a254:	791a      	ldrb	r2, [r3, #4]
 800a256:	b2e1      	uxtb	r1, r4
 800a258:	428a      	cmp	r2, r1
 800a25a:	d8ee      	bhi.n	800a23a <ufs_OpenItem+0x16a>
    }

    // Mark the item as successfully opened.
    item->ufs = ufs;
    item->err = UFS_ERROR_NONE;
    if(item->info.comp.name.extention[0] != 0x00)
 800a25c:	f899 201c 	ldrb.w	r2, [r9, #28]
    item->err = UFS_ERROR_NONE;
 800a260:	2100      	movs	r1, #0
    {
    	item->status = UFS_FILE_EXIST;
 800a262:	428a      	cmp	r2, r1
 800a264:	bf0c      	ite	eq
 800a266:	2204      	moveq	r2, #4
 800a268:	2202      	movne	r2, #2
    item->err = UFS_ERROR_NONE;
 800a26a:	f889 102d 	strb.w	r1, [r9, #45]	@ 0x2d
 800a26e:	f889 202c 	strb.w	r2, [r9, #44]	@ 0x2c
    {
    	item->status = UFS_FOLDER_EXIST;
    }

    // Unlock the mutex after the file operation (check UnlockMutex and mutex)
    if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a272:	681b      	ldr	r3, [r3, #0]
    item->ufs = ufs;
 800a274:	f8c9 8030 	str.w	r8, [r9, #48]	@ 0x30
    if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a278:	6a1a      	ldr	r2, [r3, #32]
 800a27a:	b112      	cbz	r2, 800a282 <ufs_OpenItem+0x1b2>
 800a27c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a27e:	b100      	cbz	r0, 800a282 <ufs_OpenItem+0x1b2>
    {
        ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);  // Unlock the mutex
 800a280:	4790      	blx	r2
    }
    return UFS_OK;
 800a282:	2000      	movs	r0, #0
}
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a28c:	3301      	adds	r3, #1
 800a28e:	b29a      	uxth	r2, r3
 800a290:	4282      	cmp	r2, r0
 800a292:	f4ff af63 	bcc.w	800a15c <ufs_OpenItem+0x8c>
 800a296:	e771      	b.n	800a17c <ufs_OpenItem+0xac>
        if (item->location.sector_id != 0xFFFF)
 800a298:	f8b9 4000 	ldrh.w	r4, [r9]
 800a29c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d1c1      	bne.n	800a228 <ufs_OpenItem+0x158>
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	f8b8 3000 	ldrh.w	r3, [r8]
 800a2aa:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800a2ae:	f102 0a01 	add.w	sl, r2, #1
 800a2b2:	fa1f f28a 	uxth.w	r2, sl
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	60ba      	str	r2, [r7, #8]
 800a2ba:	1ac2      	subs	r2, r0, r3
 800a2bc:	4291      	cmp	r1, r2
 800a2be:	f6ff af3b 	blt.w	800a138 <ufs_OpenItem+0x68>
 800a2c2:	88bb      	ldrh	r3, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
    if (item->location.sector_id == 0xFFFF && slotItem.sector_id != 0xFFFF)
 800a2c6:	42a3      	cmp	r3, r4
 800a2c8:	f000 8123 	beq.w	800a512 <ufs_OpenItem+0x442>
    	if(item->info.comp.name.extention[0] != 0x00)
 800a2cc:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 80f7 	beq.w	800a4c4 <ufs_OpenItem+0x3f4>
        if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a2d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
			countSector = ufs->latest_cluster.sector_id;
 800a2da:	f8b8 5018 	ldrh.w	r5, [r8, #24]
        if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a2de:	f8d3 e000 	ldr.w	lr, [r3]
			item->info.comp.parent = ufs->path.id;
 800a2e2:	f8b8 301c 	ldrh.w	r3, [r8, #28]
 800a2e6:	f8a9 3024 	strh.w	r3, [r9, #36]	@ 0x24
			item->info.comp.size = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
				if (++countSector >= (ufs->ClusterDataZoneFirstSector - ufs->ClusterMappingZoneFirstSector))
 800a2f0:	f8b8 a004 	ldrh.w	sl, [r8, #4]
				if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) > \
 800a2f4:	f8be 3028 	ldrh.w	r3, [lr, #40]	@ 0x28
			item->info.comp.first_cluster.sector_id = 0xFFFF;
 800a2f8:	f8a9 4020 	strh.w	r4, [r9, #32]
				if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) > \
 800a2fc:	60bb      	str	r3, [r7, #8]
				if (++countSector >= (ufs->ClusterDataZoneFirstSector - ufs->ClusterMappingZoneFirstSector))
 800a2fe:	3501      	adds	r5, #1
 800a300:	b2ad      	uxth	r5, r5
 800a302:	ebaa 0300 	sub.w	r3, sl, r0
 800a306:	429d      	cmp	r5, r3
 800a308:	da0e      	bge.n	800a328 <ufs_OpenItem+0x258>
				if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) > \
 800a30a:	68ba      	ldr	r2, [r7, #8]
				   (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a30c:	f8de 302c 	ldr.w	r3, [lr, #44]	@ 0x2c
 800a310:	f8b8 1006 	ldrh.w	r1, [r8, #6]
				if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) > \
 800a314:	0852      	lsrs	r2, r2, #1
 800a316:	fb05 f202 	mul.w	r2, r5, r2
				   (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a31a:	eba3 030a 	sub.w	r3, r3, sl
 800a31e:	fbb3 f3f1 	udiv	r3, r3, r1
				if(countSector * (ufs->conf->api->u16numberByteOfSector / 2) > \
 800a322:	429a      	cmp	r2, r3
 800a324:	f240 8113 	bls.w	800a54e <ufs_OpenItem+0x47e>
					countSector = 0;
 800a328:	2500      	movs	r5, #0
				ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a32a:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4659      	mov	r1, fp
 800a332:	4798      	blx	r3
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a334:	f8d8 3014 	ldr.w	r3, [r8, #20]
				countSegment = ufs->latest_cluster.position;
 800a338:	f8b8 601a 	ldrh.w	r6, [r8, #26]
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a33c:	f8d3 e000 	ldr.w	lr, [r3]
					if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a340:	f8b8 a004 	ldrh.w	sl, [r8, #4]
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a344:	f8be 2028 	ldrh.w	r2, [lr, #40]	@ 0x28
					if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a348:	f8de 302c 	ldr.w	r3, [lr, #44]	@ 0x2c
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a34c:	60ba      	str	r2, [r7, #8]
					if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a34e:	eba3 000a 	sub.w	r0, r3, sl
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a352:	ea4f 0c52 	mov.w	ip, r2, lsr #1
				countSegment = ufs->latest_cluster.position;
 800a356:	4633      	mov	r3, r6
					if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a358:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800a35c:	fbb0 f0f2 	udiv	r0, r0, r2
 800a360:	e002      	b.n	800a368 <ufs_OpenItem+0x298>
				} while (countSegment != ufs->latest_cluster.position);
 800a362:	42b3      	cmp	r3, r6
 800a364:	f000 80bc 	beq.w	800a4e0 <ufs_OpenItem+0x410>
					if (++countSegment >= (ufs->conf->api->u16numberByteOfSector / 2))
 800a368:	3301      	adds	r3, #1
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	459c      	cmp	ip, r3
 800a36e:	bf98      	it	ls
 800a370:	2300      	movls	r3, #0
					if(countSegment >= (ufs->conf->api->u32numberSectorOfDevice - ufs->ClusterDataZoneFirstSector) / ufs->NumberSectorOfCluster)
 800a372:	4298      	cmp	r0, r3
						countSegment = 0x00;
 800a374:	461a      	mov	r2, r3
					value_cluster = (uint16_t *)&data_sector[countSegment * 2];
 800a376:	bf8e      	itee	hi
 800a378:	eb0b 0243 	addhi.w	r2, fp, r3, lsl #1
 800a37c:	465a      	movls	r2, fp
						countSegment = 0x00;
 800a37e:	2300      	movls	r3, #0
					if (*value_cluster == UFS_CLUSTER_FREE)
 800a380:	8811      	ldrh	r1, [r2, #0]
 800a382:	42a1      	cmp	r1, r4
 800a384:	d1ed      	bne.n	800a362 <ufs_OpenItem+0x292>
						item->info.comp.first_cluster.sector_id = countSector;
 800a386:	f8a9 5020 	strh.w	r5, [r9, #32]
						item->info.comp.first_cluster.position = countSegment;
 800a38a:	f8a9 3022 	strh.w	r3, [r9, #34]	@ 0x22
						ufs->latest_cluster.position = countSegment;
 800a38e:	f8a8 301a 	strh.w	r3, [r8, #26]
						ufs->latest_cluster.sector_id = countSector;
 800a392:	f8a8 5018 	strh.w	r5, [r8, #24]
				ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + item->info.comp.first_cluster.sector_id);
 800a396:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800a39a:	f8de 300c 	ldr.w	r3, [lr, #12]
 800a39e:	1868      	adds	r0, r5, r1
				*value_cluster = UFS_CLUSTER_END;
 800a3a0:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 800a3a4:	8011      	strh	r1, [r2, #0]
				ufs->conf->api->EraseSector(ufs->ClusterMappingZoneFirstSector + item->info.comp.first_cluster.sector_id);
 800a3a6:	b280      	uxth	r0, r0
 800a3a8:	4798      	blx	r3
				ufs->conf->api->WriteSector(ufs->ClusterMappingZoneFirstSector + item->info.comp.first_cluster.sector_id, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a3aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a3ae:	f8b9 2020 	ldrh.w	r2, [r9, #32]
 800a3b2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4410      	add	r0, r2
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	b280      	uxth	r0, r0
 800a3c2:	4798      	blx	r3
				item->location.sector_id = slotItem.sector_id;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8c9 3000 	str.w	r3, [r9]
				ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + item->location.sector_id, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a3ca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a3ce:	f8b8 2000 	ldrh.w	r2, [r8]
 800a3d2:	6838      	ldr	r0, [r7, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4410      	add	r0, r2
 800a3d8:	689c      	ldr	r4, [r3, #8]
 800a3da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3dc:	b280      	uxth	r0, r0
 800a3de:	4659      	mov	r1, fp
 800a3e0:	47a0      	blx	r4
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a3e2:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	b170      	cbz	r0, 800a40c <ufs_OpenItem+0x33c>
					if(data_sector[countByte] != 0x00)
 800a3ee:	b299      	uxth	r1, r3
 800a3f0:	f81b 2001 	ldrb.w	r2, [fp, r1]
						data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a3f4:	f082 05aa 	eor.w	r5, r2, #170	@ 0xaa
					if(data_sector[countByte] != 0x00)
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d07d      	beq.n	800a4f8 <ufs_OpenItem+0x428>
						data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a3fc:	f80b 5001 	strb.w	r5, [fp, r1]
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a400:	6821      	ldr	r1, [r4, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 800a406:	b29a      	uxth	r2, r3
 800a408:	4282      	cmp	r2, r0
 800a40a:	d3f0      	bcc.n	800a3ee <ufs_OpenItem+0x31e>
				memcpy(&data_sector[item->location.position * sizeof(ufs_ItemInfo_Type)], item->info.data, sizeof(ufs_ItemInfo_Type));
 800a40c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
				item->info.comp.parent = ufs->path.id;
 800a410:	f8b8 301c 	ldrh.w	r3, [r8, #28]
 800a414:	f8a9 3024 	strh.w	r3, [r9, #36]	@ 0x24
				memcpy(&data_sector[item->location.position * sizeof(ufs_ItemInfo_Type)], item->info.data, sizeof(ufs_ItemInfo_Type));
 800a418:	eb0b 1342 	add.w	r3, fp, r2, lsl #5
 800a41c:	0152      	lsls	r2, r2, #5
 800a41e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800a422:	f84b 1002 	str.w	r1, [fp, r2]
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	684a      	ldr	r2, [r1, #4]
 800a42a:	605a      	str	r2, [r3, #4]
 800a42c:	688a      	ldr	r2, [r1, #8]
 800a42e:	609a      	str	r2, [r3, #8]
 800a430:	68ca      	ldr	r2, [r1, #12]
 800a432:	60da      	str	r2, [r3, #12]
 800a434:	460a      	mov	r2, r1
 800a436:	6909      	ldr	r1, [r1, #16]
 800a438:	6119      	str	r1, [r3, #16]
 800a43a:	4611      	mov	r1, r2
 800a43c:	6952      	ldr	r2, [r2, #20]
 800a43e:	615a      	str	r2, [r3, #20]
 800a440:	698a      	ldr	r2, [r1, #24]
 800a442:	619a      	str	r2, [r3, #24]
 800a444:	69ca      	ldr	r2, [r1, #28]
 800a446:	61da      	str	r2, [r3, #28]
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a448:	6825      	ldr	r5, [r4, #0]
 800a44a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800a44c:	2300      	movs	r3, #0
 800a44e:	b170      	cbz	r0, 800a46e <ufs_OpenItem+0x39e>
					if(data_sector[countByte] != 0x00)
 800a450:	b299      	uxth	r1, r3
 800a452:	f81b 2001 	ldrb.w	r2, [fp, r1]
						data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a456:	f082 06aa 	eor.w	r6, r2, #170	@ 0xaa
					if(data_sector[countByte] != 0x00)
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d047      	beq.n	800a4ee <ufs_OpenItem+0x41e>
						data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a45e:	f80b 6001 	strb.w	r6, [fp, r1]
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800a468:	b29a      	uxth	r2, r3
 800a46a:	4282      	cmp	r2, r0
 800a46c:	d3f0      	bcc.n	800a450 <ufs_OpenItem+0x380>
				ufs->conf->api->EraseSector(ufs->ItemZoneFirstSector + item->location.sector_id);
 800a46e:	f8b9 2000 	ldrh.w	r2, [r9]
 800a472:	f8b8 0000 	ldrh.w	r0, [r8]
 800a476:	68eb      	ldr	r3, [r5, #12]
 800a478:	4410      	add	r0, r2
 800a47a:	b280      	uxth	r0, r0
 800a47c:	4798      	blx	r3
				ufs->conf->api->WriteSector(ufs->ItemZoneFirstSector + item->location.sector_id, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a47e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a482:	f8b9 2000 	ldrh.w	r2, [r9]
 800a486:	f8b8 0000 	ldrh.w	r0, [r8]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4410      	add	r0, r2
 800a48e:	685c      	ldr	r4, [r3, #4]
 800a490:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a492:	4659      	mov	r1, fp
 800a494:	b280      	uxth	r0, r0
 800a496:	47a0      	blx	r4
				ufs_GetListCluster(ufs, item);
 800a498:	4649      	mov	r1, r9
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7fe fe1a 	bl	80090d4 <ufs_GetListCluster>
				ufs->UsedSize += ufs->conf->api->u16numberByteOfSector * ufs->NumberSectorOfCluster;
 800a4a0:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a4a4:	6819      	ldr	r1, [r3, #0]
 800a4a6:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800a4aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a4ac:	fb00 2201 	mla	r2, r0, r1, r2
 800a4b0:	f8c8 2010 	str.w	r2, [r8, #16]
 800a4b4:	e6ba      	b.n	800a22c <ufs_OpenItem+0x15c>
                	ufs_GetListCluster(ufs, item);
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f7fe fe0b 	bl	80090d4 <ufs_GetListCluster>
        if (item->location.sector_id != 0xFFFF)
 800a4be:	f8b9 4000 	ldrh.w	r4, [r9]
 800a4c2:	e6eb      	b.n	800a29c <ufs_OpenItem+0x1cc>
			item->location.sector_id = slotItem.sector_id;
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	f8c9 2000 	str.w	r2, [r9]
			item->clusters.length = 0;
 800a4ca:	f8a9 3008 	strh.w	r3, [r9, #8]
			item->info.comp.first_cluster.sector_id = 0x00;
 800a4ce:	f8c9 3020 	str.w	r3, [r9, #32]
			item->err = UFS_ERROR_NONE;
 800a4d2:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
			ufs_UpdateItemInfo(ufs, item);
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f7ff fabf 	bl	8009a5c <ufs_UpdateItemInfo>
 800a4de:	e6a3      	b.n	800a228 <ufs_OpenItem+0x158>
			} while (countSector != ufs->latest_cluster.sector_id);
 800a4e0:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	d021      	beq.n	800a52c <ufs_OpenItem+0x45c>
 800a4e8:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800a4ec:	e707      	b.n	800a2fe <ufs_OpenItem+0x22e>
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	4282      	cmp	r2, r0
 800a4f4:	d3ac      	bcc.n	800a450 <ufs_OpenItem+0x380>
 800a4f6:	e7ba      	b.n	800a46e <ufs_OpenItem+0x39e>
				for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	4282      	cmp	r2, r0
 800a4fe:	f4ff af76 	bcc.w	800a3ee <ufs_OpenItem+0x31e>
 800a502:	e783      	b.n	800a40c <ufs_OpenItem+0x33c>
    if (item->location.sector_id == 0xFFFF && slotItem.sector_id != 0xFFFF)
 800a504:	f8b9 2000 	ldrh.w	r2, [r9]
        if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a508:	f8d8 3014 	ldr.w	r3, [r8, #20]
    if (item->location.sector_id == 0xFFFF && slotItem.sector_id != 0xFFFF)
 800a50c:	42b2      	cmp	r2, r6
 800a50e:	f47f ae8d 	bne.w	800a22c <ufs_OpenItem+0x15c>
        item->err = UFS_ERROR_FULL_FILE;
 800a512:	2309      	movs	r3, #9
 800a514:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
        if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a518:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	6a13      	ldr	r3, [r2, #32]
 800a520:	b113      	cbz	r3, 800a528 <ufs_OpenItem+0x458>
 800a522:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800a524:	b100      	cbz	r0, 800a528 <ufs_OpenItem+0x458>
            ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);  // Unlock the mutex
 800a526:	4798      	blx	r3
				return UFS_NOT_OK;
 800a528:	2001      	movs	r0, #1
 800a52a:	e6ab      	b.n	800a284 <ufs_OpenItem+0x1b4>
			if (item->info.comp.first_cluster.sector_id != 0xFFFF)
 800a52c:	f8b9 5020 	ldrh.w	r5, [r9, #32]
 800a530:	42a5      	cmp	r5, r4
 800a532:	f47f af30 	bne.w	800a396 <ufs_OpenItem+0x2c6>
				item->err = UFS_ERROR_FULL_CLUSTER;
 800a536:	230a      	movs	r3, #10
 800a538:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
				if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800a53c:	f8de 3020 	ldr.w	r3, [lr, #32]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0f1      	beq.n	800a528 <ufs_OpenItem+0x458>
 800a544:	f8de 0024 	ldr.w	r0, [lr, #36]	@ 0x24
 800a548:	2800      	cmp	r0, #0
 800a54a:	d1ec      	bne.n	800a526 <ufs_OpenItem+0x456>
 800a54c:	e7ec      	b.n	800a528 <ufs_OpenItem+0x458>
				ufs->conf->api->ReadSector(ufs->ClusterMappingZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a54e:	4428      	add	r0, r5
 800a550:	b280      	uxth	r0, r0
 800a552:	e6ea      	b.n	800a32a <ufs_OpenItem+0x25a>

0800a554 <ufs_DeleteItem>:
 * @param[in] item Pointer to the UFS item structure.
 *
 * @return ufs_ReturnType UFS_OK on success, UFS_NOT_OK if the item is invalid.
 */
ufs_ReturnType ufs_DeleteItem(ufs_Item_Type *item)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
    if (item == NULL || item->ufs == NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <ufs_DeleteItem+0x16>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a566:	2b00      	cmp	r3, #0
 800a568:	d105      	bne.n	800a576 <ufs_DeleteItem+0x22>
    {
        item->err = UFS_ERROR_ALLOCATE_MEM;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2206      	movs	r2, #6
 800a56e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return UFS_NOT_OK;
 800a572:	2301      	movs	r3, #1
 800a574:	e046      	b.n	800a604 <ufs_DeleteItem+0xb0>
    }

    if(item->err != UFS_ERROR_NONE)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <ufs_DeleteItem+0x38>
    {
    	item->err = UFS_ERROR_NOT_EXISTED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2205      	movs	r2, #5
 800a584:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    	return UFS_NOT_OK;
 800a588:	2301      	movs	r3, #1
 800a58a:	e03b      	b.n	800a604 <ufs_DeleteItem+0xb0>
    }

    // Update cluter  list
    ufs_GetListCluster(item->ufs, item);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fd9e 	bl	80090d4 <ufs_GetListCluster>

    // Clean up the cluster list
    ufs_CleanClusters(item->ufs, item->clusters.value, item->clusters.length);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6859      	ldr	r1, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	891b      	ldrh	r3, [r3, #8]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	f7fe fee1 	bl	800936c <ufs_CleanClusters>

    free(item->clusters.value);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f005 f898 	bl	800f6e4 <free>
    item->clusters.length = 0;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	811a      	strh	r2, [r3, #8]

    // Reset item info to indicate deletion
    item->info.data[0] = UFS_ITEM_FREE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	731a      	strb	r2, [r3, #12]
    item->info.comp.name.length = 0;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	77da      	strb	r2, [r3, #31]
    item->info.comp.size = 0;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	629a      	str	r2, [r3, #40]	@ 0x28
    item->info.comp.first_cluster.sector_id = 0xFFFF;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5d2:	841a      	strh	r2, [r3, #32]
    item->info.comp.first_cluster.position = 0;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Update UFS with the changes
    ufs_UpdateItemInfo(item->ufs, item);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fa3b 	bl	8009a5c <ufs_UpdateItemInfo>

    // Reset item location
    item->location.sector_id = 0xFFFF;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5ec:	801a      	strh	r2, [r3, #0]
    item->location.position = 0;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	805a      	strh	r2, [r3, #2]

    // Mark the item as free and detach it from UFS
    item->status = UFS_ITEM_FREE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    item->ufs = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	@ 0x30

    return UFS_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <ufs_CountItem>:
 * @note        The function allocates memory dynamically for sector data. Ensure
 *              that there is enough system memory available, and the allocated memory
 *              is properly freed after usage.
 */
uint16_t ufs_CountItem(UFS *ufs)
{
 800a60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a610:	b089      	sub	sp, #36	@ 0x24
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	466b      	mov	r3, sp
 800a618:	461e      	mov	r6, r3
    uint16_t count = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	83fb      	strh	r3, [r7, #30]
    // Allocate memory for one sector worth of data
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800a626:	460b      	mov	r3, r1
 800a628:	3b01      	subs	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	b28b      	uxth	r3, r1
 800a62e:	2200      	movs	r2, #0
 800a630:	4698      	mov	r8, r3
 800a632:	4691      	mov	r9, r2
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a648:	b28b      	uxth	r3, r1
 800a64a:	2200      	movs	r2, #0
 800a64c:	461c      	mov	r4, r3
 800a64e:	4615      	mov	r5, r2
 800a650:	f04f 0200 	mov.w	r2, #0
 800a654:	f04f 0300 	mov.w	r3, #0
 800a658:	00eb      	lsls	r3, r5, #3
 800a65a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a65e:	00e2      	lsls	r2, r4, #3
 800a660:	460b      	mov	r3, r1
 800a662:	3307      	adds	r3, #7
 800a664:	08db      	lsrs	r3, r3, #3
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	ebad 0d03 	sub.w	sp, sp, r3
 800a66c:	466b      	mov	r3, sp
 800a66e:	3300      	adds	r3, #0
 800a670:	613b      	str	r3, [r7, #16]

    uint16_t totalSectors = ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	885a      	ldrh	r2, [r3, #2]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	81fb      	strh	r3, [r7, #14]
    uint16_t itemsPerSector = ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	81bb      	strh	r3, [r7, #12]

    for (uint16_t sector = 0; sector < totalSectors; sector ++)
 800a68a:	2300      	movs	r3, #0
 800a68c:	83bb      	strh	r3, [r7, #28]
 800a68e:	e04d      	b.n	800a72c <ufs_CountItem+0x120>
    {
        // Read sector data into the allocated memory
        ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + sector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	8811      	ldrh	r1, [r2, #0]
 800a69c:	8bba      	ldrh	r2, [r7, #28]
 800a69e:	440a      	add	r2, r1
 800a6a0:	b290      	uxth	r0, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6952      	ldr	r2, [r2, #20]
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a6aa:	6939      	ldr	r1, [r7, #16]
 800a6ac:	4798      	blx	r3
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	837b      	strh	r3, [r7, #26]
 800a6b2:	e011      	b.n	800a6d8 <ufs_CountItem+0xcc>
        {
        	if(data_sector[countByte] != 0x00)
 800a6b4:	8b7b      	ldrh	r3, [r7, #26]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	5cd3      	ldrb	r3, [r2, r3]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <ufs_CountItem+0xc6>
        	{
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a6be:	8b7b      	ldrh	r3, [r7, #26]
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	5cd3      	ldrb	r3, [r2, r3]
 800a6c4:	8b7a      	ldrh	r2, [r7, #26]
 800a6c6:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 800a6ca:	43db      	mvns	r3, r3
 800a6cc:	b2d9      	uxtb	r1, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	5499      	strb	r1, [r3, r2]
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a6d2:	8b7b      	ldrh	r3, [r7, #26]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	837b      	strh	r3, [r7, #26]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e0:	8b7a      	ldrh	r2, [r7, #26]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d3e6      	bcc.n	800a6b4 <ufs_CountItem+0xa8>
        	}
        }

        // Iterate through each item in the sector
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	833b      	strh	r3, [r7, #24]
 800a6ea:	e018      	b.n	800a71e <ufs_CountItem+0x112>
        {
            uint8_t  itemStatus = data_sector[segment * sizeof(ufs_ItemInfo_Type)];
 800a6ec:	8b3b      	ldrh	r3, [r7, #24]
 800a6ee:	015b      	lsls	r3, r3, #5
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	5cd3      	ldrb	r3, [r2, r3]
 800a6f4:	72fb      	strb	r3, [r7, #11]
            uint16_t parent = data_sector[segment * sizeof(ufs_ItemInfo_Type) + 24u];
 800a6f6:	8b3b      	ldrh	r3, [r7, #24]
 800a6f8:	015b      	lsls	r3, r3, #5
 800a6fa:	3318      	adds	r3, #24
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	5cd3      	ldrb	r3, [r2, r3]
 800a700:	813b      	strh	r3, [r7, #8]

            // If the item is not free, count it
            if (itemStatus != UFS_ITEM_FREE && parent == ufs->path.id)
 800a702:	7afb      	ldrb	r3, [r7, #11]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d007      	beq.n	800a718 <ufs_CountItem+0x10c>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	8b9b      	ldrh	r3, [r3, #28]
 800a70c:	893a      	ldrh	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d102      	bne.n	800a718 <ufs_CountItem+0x10c>
            {
                count++;
 800a712:	8bfb      	ldrh	r3, [r7, #30]
 800a714:	3301      	adds	r3, #1
 800a716:	83fb      	strh	r3, [r7, #30]
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800a718:	8b3b      	ldrh	r3, [r7, #24]
 800a71a:	3301      	adds	r3, #1
 800a71c:	833b      	strh	r3, [r7, #24]
 800a71e:	8b3a      	ldrh	r2, [r7, #24]
 800a720:	89bb      	ldrh	r3, [r7, #12]
 800a722:	429a      	cmp	r2, r3
 800a724:	d3e2      	bcc.n	800a6ec <ufs_CountItem+0xe0>
    for (uint16_t sector = 0; sector < totalSectors; sector ++)
 800a726:	8bbb      	ldrh	r3, [r7, #28]
 800a728:	3301      	adds	r3, #1
 800a72a:	83bb      	strh	r3, [r7, #28]
 800a72c:	8bba      	ldrh	r2, [r7, #28]
 800a72e:	89fb      	ldrh	r3, [r7, #14]
 800a730:	429a      	cmp	r2, r3
 800a732:	d3ad      	bcc.n	800a690 <ufs_CountItem+0x84>
            }
        }
    }

    return count;       // Return the count of items
 800a734:	8bfb      	ldrh	r3, [r7, #30]
 800a736:	46b5      	mov	sp, r6
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3724      	adds	r7, #36	@ 0x24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a742:	bf00      	nop

0800a744 <ufs_CheckExistence>:
 * @param[out] item  Pointer to store detailed information of the item if found.
 *
 * @return ufs_ReturnType UFS_OK if the item exists within the mounted folder, UFS_NOT_OK otherwise.
 */
ufs_ReturnType ufs_CheckExistence(UFS *ufs, uint8_t *name, ufs_Item_Type *item)
{
 800a744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a748:	b08b      	sub	sp, #44	@ 0x2c
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	466b      	mov	r3, sp
 800a754:	461e      	mov	r6, r3
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector]; // Buffer for reading sector data
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800a75e:	460b      	mov	r3, r1
 800a760:	3b01      	subs	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
 800a764:	b28b      	uxth	r3, r1
 800a766:	2200      	movs	r2, #0
 800a768:	4698      	mov	r8, r3
 800a76a:	4691      	mov	r9, r2
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a778:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a77c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a780:	b28b      	uxth	r3, r1
 800a782:	2200      	movs	r2, #0
 800a784:	461c      	mov	r4, r3
 800a786:	4615      	mov	r5, r2
 800a788:	f04f 0200 	mov.w	r2, #0
 800a78c:	f04f 0300 	mov.w	r3, #0
 800a790:	00eb      	lsls	r3, r5, #3
 800a792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a796:	00e2      	lsls	r2, r4, #3
 800a798:	460b      	mov	r3, r1
 800a79a:	3307      	adds	r3, #7
 800a79c:	08db      	lsrs	r3, r3, #3
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	ebad 0d03 	sub.w	sp, sp, r3
 800a7a4:	466b      	mov	r3, sp
 800a7a6:	3300      	adds	r3, #0
 800a7a8:	61bb      	str	r3, [r7, #24]

    // Parse the file or directory name
    ufs_ParseNameFile(name, &item->info.comp.name);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	330c      	adds	r3, #12
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68b8      	ldr	r0, [r7, #8]
 800a7b2:	f7fe fc2d 	bl	8009010 <ufs_ParseNameFile>

    item->err = UFS_ERROR_NONE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    // Traverse each sector in the item zone to search for the item
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a7c2:	e093      	b.n	800a8ec <ufs_CheckExistence+0x1a8>
    {
        // Read data from the current sector
        ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + countSector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	8811      	ldrh	r1, [r2, #0]
 800a7d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a7d2:	440a      	add	r2, r1
 800a7d4:	b290      	uxth	r0, r2
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	6952      	ldr	r2, [r2, #20]
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a7de:	69b9      	ldr	r1, [r7, #24]
 800a7e0:	4798      	blx	r3

        // Decode the sector data
        for (uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte++)
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a7e6:	e011      	b.n	800a80c <ufs_CheckExistence+0xc8>
        {
            if (data_sector[countByte] != 0x00)
 800a7e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	5cd3      	ldrb	r3, [r2, r3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <ufs_CheckExistence+0xc2>
            {
                data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a7f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	5cd3      	ldrb	r3, [r2, r3]
 800a7f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a7fa:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 800a7fe:	43db      	mvns	r3, r3
 800a800:	b2d9      	uxtb	r1, r3
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	5499      	strb	r1, [r3, r2]
        for (uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte++)
 800a806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a808:	3301      	adds	r3, #1
 800a80a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a814:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a816:	429a      	cmp	r2, r3
 800a818:	d3e6      	bcc.n	800a7e8 <ufs_CheckExistence+0xa4>
            }
        }

        // Traverse each segment within the sector
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a81a:	2300      	movs	r3, #0
 800a81c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a81e:	e059      	b.n	800a8d4 <ufs_CheckExistence+0x190>
        {
            // Retrieve the path ID of the current segment
            uint16_t *path_id = (uint16_t *)&data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + 24u];
 800a820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a822:	015b      	lsls	r3, r3, #5
 800a824:	3318      	adds	r3, #24
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	4413      	add	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

            // Compare the item name, type, and path ID to check for a match within the mounted folder
            if (
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f103 000c 	add.w	r0, r3, #12
 800a832:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a834:	015b      	lsls	r3, r3, #5
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	18d1      	adds	r1, r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	7fdb      	ldrb	r3, [r3, #31]
 800a83e:	461a      	mov	r2, r3
 800a840:	f7fe fb6e 	bl	8008f20 <ufs_BytesCmp>
 800a844:	4603      	mov	r3, r0
            if (
 800a846:	2b00      	cmp	r3, #0
 800a848:	d141      	bne.n	800a8ce <ufs_CheckExistence+0x18a>
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f103 001c 	add.w	r0, r3, #28
 800a850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a852:	015b      	lsls	r3, r3, #5
 800a854:	3310      	adds	r3, #16
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	4413      	add	r3, r2
 800a85a:	2203      	movs	r2, #3
 800a85c:	4619      	mov	r1, r3
 800a85e:	f7fe fb5f 	bl	8008f20 <ufs_BytesCmp>
 800a862:	4603      	mov	r3, r0
                UFS_OK == ufs_BytesCmp(item->info.comp.name.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], item->info.comp.name.length) &&
 800a864:	2b00      	cmp	r3, #0
 800a866:	d132      	bne.n	800a8ce <ufs_CheckExistence+0x18a>
				item->info.comp.name.length == data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH + 3] &&
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7fda      	ldrb	r2, [r3, #31]
 800a86c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a86e:	015b      	lsls	r3, r3, #5
 800a870:	3313      	adds	r3, #19
 800a872:	69b9      	ldr	r1, [r7, #24]
 800a874:	5ccb      	ldrb	r3, [r1, r3]
                UFS_OK == ufs_BytesCmp(item->info.comp.name.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800a876:	429a      	cmp	r2, r3
 800a878:	d129      	bne.n	800a8ce <ufs_CheckExistence+0x18a>
                ufs->path.id == *path_id)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8b9a      	ldrh	r2, [r3, #28]
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	881b      	ldrh	r3, [r3, #0]
				item->info.comp.name.length == data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH + 3] &&
 800a882:	429a      	cmp	r2, r3
 800a884:	d123      	bne.n	800a8ce <ufs_CheckExistence+0x18a>
            {
                // Populate the item structure with details of the found item
                item->location.sector_id = countSector;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a88a:	801a      	strh	r2, [r3, #0]
                item->location.position = countSegment;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a890:	805a      	strh	r2, [r3, #2]
                item->status = (item->info.comp.name.extention[0] == 0x00) ? UFS_FOLDER_EXIST : UFS_FILE_EXIST;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	7f1b      	ldrb	r3, [r3, #28]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <ufs_CheckExistence+0x15a>
 800a89a:	2204      	movs	r2, #4
 800a89c:	e000      	b.n	800a8a0 <ufs_CheckExistence+0x15c>
 800a89e:	2202      	movs	r2, #2
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                item->err = UFS_ERROR_NONE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                item->ufs = ufs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	631a      	str	r2, [r3, #48]	@ 0x30
                memcpy(item->info.data, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], sizeof(ufs_ItemInfo_Type));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f103 000c 	add.w	r0, r3, #12
 800a8ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8bc:	015b      	lsls	r3, r3, #5
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f005 fa3a 	bl	800fd3e <memcpy>
                return UFS_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e029      	b.n	800a922 <ufs_CheckExistence+0x1de>
        for (uint16_t countSegment = 0; countSegment < (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800a8ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d39c      	bcc.n	800a820 <ufs_CheckExistence+0xdc>
    for (uint16_t countSector = 0; countSector < (ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector); countSector++)
 800a8e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a8ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	1acb      	subs	r3, r1, r3
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	f6ff af62 	blt.w	800a7c4 <ufs_CheckExistence+0x80>
            }
        }
    }

    // If the item was not found, mark it as not existing and return failure
    item->location.sector_id = 0xFFFF;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a906:	801a      	strh	r2, [r3, #0]
    item->location.position = 0xFFFF;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a90e:	805a      	strh	r2, [r3, #2]
    item->status = UFS_ITEM_FREE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    item->err = UFS_ERROR_NOT_EXISTED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2205      	movs	r2, #5
 800a91c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    return UFS_NOT_OK;
 800a920:	2301      	movs	r3, #1
 800a922:	46b5      	mov	sp, r6
}
 800a924:	4618      	mov	r0, r3
 800a926:	372c      	adds	r7, #44	@ 0x2c
 800a928:	46bd      	mov	sp, r7
 800a92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92e:	bf00      	nop

0800a930 <ufs_GetListItem>:
 * @note        The function allocates memory for sector data and frees it after
 *              use. Ensure that the `item_info` array is large enough to hold the
 *              number of items specified by `length`.
 */
uint16_t ufs_GetListItem(UFS *ufs, ufs_ItemInfo_Type *item_info, uint16_t length)
{
 800a930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a934:	b08b      	sub	sp, #44	@ 0x2c
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	4613      	mov	r3, r2
 800a93e:	80fb      	strh	r3, [r7, #6]
 800a940:	466b      	mov	r3, sp
 800a942:	461e      	mov	r6, r3
    uint16_t item_read = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	84fb      	strh	r3, [r7, #38]	@ 0x26
    // Allocate memory for one sector worth of data
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800a950:	460b      	mov	r3, r1
 800a952:	3b01      	subs	r3, #1
 800a954:	61fb      	str	r3, [r7, #28]
 800a956:	b28b      	uxth	r3, r1
 800a958:	2200      	movs	r2, #0
 800a95a:	4698      	mov	r8, r3
 800a95c:	4691      	mov	r9, r2
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a96a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a96e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a972:	b28b      	uxth	r3, r1
 800a974:	2200      	movs	r2, #0
 800a976:	461c      	mov	r4, r3
 800a978:	4615      	mov	r5, r2
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	f04f 0300 	mov.w	r3, #0
 800a982:	00eb      	lsls	r3, r5, #3
 800a984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a988:	00e2      	lsls	r2, r4, #3
 800a98a:	460b      	mov	r3, r1
 800a98c:	3307      	adds	r3, #7
 800a98e:	08db      	lsrs	r3, r3, #3
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	ebad 0d03 	sub.w	sp, sp, r3
 800a996:	466b      	mov	r3, sp
 800a998:	3300      	adds	r3, #0
 800a99a:	61bb      	str	r3, [r7, #24]

    uint16_t totalSectors = ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	885a      	ldrh	r2, [r3, #2]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	82fb      	strh	r3, [r7, #22]
    uint16_t itemsPerSector = ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b0:	095b      	lsrs	r3, r3, #5
 800a9b2:	82bb      	strh	r3, [r7, #20]

    for (uint16_t sector = 0; sector < totalSectors; sector++)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a9b8:	e060      	b.n	800aa7c <ufs_GetListItem+0x14c>
    {
        // Read sector data into the allocated memory
        ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + sector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	8811      	ldrh	r1, [r2, #0]
 800a9c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9c8:	440a      	add	r2, r1
 800a9ca:	b290      	uxth	r0, r2
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	6952      	ldr	r2, [r2, #20]
 800a9d0:	6812      	ldr	r2, [r2, #0]
 800a9d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a9d4:	69b9      	ldr	r1, [r7, #24]
 800a9d6:	4798      	blx	r3
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a9dc:	e011      	b.n	800aa02 <ufs_GetListItem+0xd2>
        {
        	if(data_sector[countByte] != 0x00)
 800a9de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	5cd3      	ldrb	r3, [r2, r3]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <ufs_GetListItem+0xcc>
        	{
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800a9e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	5cd3      	ldrb	r3, [r2, r3]
 800a9ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a9f0:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	b2d9      	uxtb	r1, r3
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	5499      	strb	r1, [r3, r2]
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800a9fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9fe:	3301      	adds	r3, #1
 800aa00:	847b      	strh	r3, [r7, #34]	@ 0x22
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa0a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d3e6      	bcc.n	800a9de <ufs_GetListItem+0xae>
        	}
        }
        // Iterate through each item in the sector
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800aa10:	2300      	movs	r3, #0
 800aa12:	843b      	strh	r3, [r7, #32]
 800aa14:	e02b      	b.n	800aa6e <ufs_GetListItem+0x13e>
        {
            uint8_t itemStatus = data_sector[segment * sizeof(ufs_ItemInfo_Type)];
 800aa16:	8c3b      	ldrh	r3, [r7, #32]
 800aa18:	015b      	lsls	r3, r3, #5
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	5cd3      	ldrb	r3, [r2, r3]
 800aa1e:	74fb      	strb	r3, [r7, #19]
            uint16_t parent = data_sector[segment * sizeof(ufs_ItemInfo_Type) + 24u];
 800aa20:	8c3b      	ldrh	r3, [r7, #32]
 800aa22:	015b      	lsls	r3, r3, #5
 800aa24:	3318      	adds	r3, #24
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	5cd3      	ldrb	r3, [r2, r3]
 800aa2a:	823b      	strh	r3, [r7, #16]

            // If the item is not free, copy its data
            if (itemStatus != UFS_ITEM_FREE &&  parent == ufs->path.id)
 800aa2c:	7cfb      	ldrb	r3, [r7, #19]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d01a      	beq.n	800aa68 <ufs_GetListItem+0x138>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8b9b      	ldrh	r3, [r3, #28]
 800aa36:	8a3a      	ldrh	r2, [r7, #16]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d115      	bne.n	800aa68 <ufs_GetListItem+0x138>
            {
                memcpy(item_info[item_read].data, &data_sector[segment * sizeof(ufs_ItemInfo_Type)], sizeof(ufs_ItemInfo_Type));
 800aa3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa3e:	015b      	lsls	r3, r3, #5
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	4413      	add	r3, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	8c3b      	ldrh	r3, [r7, #32]
 800aa48:	015b      	lsls	r3, r3, #5
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	2220      	movs	r2, #32
 800aa50:	4619      	mov	r1, r3
 800aa52:	f005 f974 	bl	800fd3e <memcpy>

                // If the desired number of items has been read, return immediately
                if (++item_read == length)
 800aa56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa58:	3301      	adds	r3, #1
 800aa5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800aa5c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d101      	bne.n	800aa68 <ufs_GetListItem+0x138>
                {
                    return length;
 800aa64:	88fb      	ldrh	r3, [r7, #6]
 800aa66:	e00e      	b.n	800aa86 <ufs_GetListItem+0x156>
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800aa68:	8c3b      	ldrh	r3, [r7, #32]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	843b      	strh	r3, [r7, #32]
 800aa6e:	8c3a      	ldrh	r2, [r7, #32]
 800aa70:	8abb      	ldrh	r3, [r7, #20]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d3cf      	bcc.n	800aa16 <ufs_GetListItem+0xe6>
    for (uint16_t sector = 0; sector < totalSectors; sector++)
 800aa76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa78:	3301      	adds	r3, #1
 800aa7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aa7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aa7e:	8afb      	ldrh	r3, [r7, #22]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d39a      	bcc.n	800a9ba <ufs_GetListItem+0x8a>
                }
            }
        }
    }

    return item_read;   // Return the actual number of items read
 800aa84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa86:	46b5      	mov	sp, r6
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	372c      	adds	r7, #44	@ 0x2c
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa92:	bf00      	nop

0800aa94 <ufs_GetUsedSize>:
 *
 * @note        The function dynamically allocates memory for storing item information.
 *              Ensure sufficient memory is available.
 */
uint32_t ufs_GetUsedSize(UFS *ufs)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
    uint32_t used_size = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
    ufs_ItemInfo_Type *items_info = NULL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	617b      	str	r3, [r7, #20]

    // Get the number of items in the item zone
    uint16_t numberItem = ufs_CountItem(ufs);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fdb1 	bl	800a60c <ufs_CountItem>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	827b      	strh	r3, [r7, #18]

    // Allocate memory to store information about each item
    items_info = (ufs_ItemInfo_Type *)calloc(numberItem, sizeof(ufs_ItemInfo_Type));
 800aaae:	8a7b      	ldrh	r3, [r7, #18]
 800aab0:	2120      	movs	r1, #32
 800aab2:	4618      	mov	r0, r3
 800aab4:	f004 fdf2 	bl	800f69c <calloc>
 800aab8:	4603      	mov	r3, r0
 800aaba:	617b      	str	r3, [r7, #20]
    if (!items_info)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <ufs_GetUsedSize+0x32>
    {
        // Handle memory allocation failure
        return used_size;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	e058      	b.n	800ab78 <ufs_GetUsedSize+0xe4>
    }

    // Lock the mutex to ensure thread safety (check LockMutex and mutex)
    if (ufs->conf->api->LockMutex && ufs->conf->api->mutex)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00f      	beq.n	800aaf2 <ufs_GetUsedSize+0x5e>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <ufs_GetUsedSize+0x5e>
    {
        ufs->conf->api->LockMutex((void *)ufs->conf->api->mutex);  // Lock the mutex
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6952      	ldr	r2, [r2, #20]
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4798      	blx	r3
    }

    // Retrieve the list of used items
    ufs_GetListItem(ufs, items_info, numberItem);
 800aaf2:	8a7b      	ldrh	r3, [r7, #18]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	6979      	ldr	r1, [r7, #20]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ff19 	bl	800a930 <ufs_GetListItem>

    // Iterate through the items and calculate their used size
    for (uint16_t countItem = 0; countItem < numberItem; countItem++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	837b      	strh	r3, [r7, #26]
 800ab02:	e018      	b.n	800ab36 <ufs_GetUsedSize+0xa2>
    {
        uint32_t itemSize = items_info[countItem].comp.size;
 800ab04:	8b7b      	ldrh	r3, [r7, #26]
 800ab06:	015b      	lsls	r3, r3, #5
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	60fb      	str	r3, [r7, #12]
        uint32_t sectorSize = ufs->conf->api->u16numberByteOfSector;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab18:	60bb      	str	r3, [r7, #8]

        // Calculate the total size for this item in terms of full sectors
        used_size += ((itemSize / sectorSize) + 1) * sectorSize;
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab22:	3301      	adds	r3, #1
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	fb02 f303 	mul.w	r3, r2, r3
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	61fb      	str	r3, [r7, #28]
    for (uint16_t countItem = 0; countItem < numberItem; countItem++)
 800ab30:	8b7b      	ldrh	r3, [r7, #26]
 800ab32:	3301      	adds	r3, #1
 800ab34:	837b      	strh	r3, [r7, #26]
 800ab36:	8b7a      	ldrh	r2, [r7, #26]
 800ab38:	8a7b      	ldrh	r3, [r7, #18]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d3e2      	bcc.n	800ab04 <ufs_GetUsedSize+0x70>
    }

    // Free the allocated memory for items_info
    free(items_info);
 800ab3e:	6978      	ldr	r0, [r7, #20]
 800ab40:	f004 fdd0 	bl	800f6e4 <free>

    ufs->UsedSize = used_size;
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	611a      	str	r2, [r3, #16]

    // Unlock the mutex after the file operation (check UnlockMutex and mutex)
    if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00f      	beq.n	800ab76 <ufs_GetUsedSize+0xe2>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <ufs_GetUsedSize+0xe2>
    {
        ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);  // Unlock the mutex
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6952      	ldr	r2, [r2, #20]
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab72:	4610      	mov	r0, r2
 800ab74:	4798      	blx	r3
    }
    return used_size;
 800ab76:	69fb      	ldr	r3, [r7, #28]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <ufs_ReadFile>:
 *
 * @return      uint32_t  The number of bytes successfully read from the file.
 */
__fast
uint32_t ufs_ReadFile(ufs_Item_Type *file, uint32_t position, uint8_t *data, uint32_t length)
{
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	b083      	sub	sp, #12
 800ab86:	4605      	mov	r5, r0
	if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800ab88:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800ab8a:	af00      	add	r7, sp, #0
	if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800ab8c:	b150      	cbz	r0, 800aba4 <ufs_ReadFile+0x24>
 800ab8e:	4698      	mov	r8, r3
 800ab90:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800ab94:	b933      	cbnz	r3, 800aba4 <ufs_ReadFile+0x24>
	{
		 return UFS_NOT_OK;
	}

    if(file->status != UFS_FILE_EXIST)
 800ab96:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d008      	beq.n	800abb0 <ufs_ReadFile+0x30>
    {
    	file->err = UFS_ERROR_ITEM_NOT_FILE;
 800ab9e:	230d      	movs	r3, #13
 800aba0:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
		 return UFS_NOT_OK;
 800aba4:	2601      	movs	r6, #1
    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
    {
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex
    }
    return bytes_read;  // Return the number of bytes successfully read
}
 800aba6:	4630      	mov	r0, r6
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t cluster_index = position / (file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster);
 800abb0:	6943      	ldr	r3, [r0, #20]
 800abb2:	88c4      	ldrh	r4, [r0, #6]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4691      	mov	r9, r2
 800abb8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800abba:	fb02 f404 	mul.w	r4, r2, r4
    uint8_t data_sector[file->ufs->conf->api->u16numberByteOfSector];
 800abbe:	3207      	adds	r2, #7
 800abc0:	466e      	mov	r6, sp
 800abc2:	08d2      	lsrs	r2, r2, #3
 800abc4:	eba6 02c2 	sub.w	r2, r6, r2, lsl #3
 800abc8:	4695      	mov	sp, r2
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800abca:	69da      	ldr	r2, [r3, #28]
    uint32_t cluster_index = position / (file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster);
 800abcc:	fbb1 f6f4 	udiv	r6, r1, r4
    uint8_t data_sector[file->ufs->conf->api->u16numberByteOfSector];
 800abd0:	46eb      	mov	fp, sp
    uint32_t cluster_index = position / (file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster);
 800abd2:	607e      	str	r6, [r7, #4]
    uint32_t offset_within_cluster = position % (file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster);
 800abd4:	fb04 1416 	mls	r4, r4, r6, r1
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800abd8:	b132      	cbz	r2, 800abe8 <ufs_ReadFile+0x68>
 800abda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800abdc:	b121      	cbz	r1, 800abe8 <ufs_ReadFile+0x68>
        file->ufs->conf->api->LockMutex((void *)file->ufs->conf->api->mutex);  // Lock the mutex
 800abde:	4608      	mov	r0, r1
 800abe0:	4790      	blx	r2
    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800abe2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800abe4:	6943      	ldr	r3, [r0, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
    while (bytes_read < length && cluster_index < file->clusters.length)
 800abe8:	4646      	mov	r6, r8
 800abea:	f1b8 0f00 	cmp.w	r8, #0
 800abee:	d044      	beq.n	800ac7a <ufs_ReadFile+0xfa>
 800abf0:	2600      	movs	r6, #0
 800abf2:	892a      	ldrh	r2, [r5, #8]
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4291      	cmp	r1, r2
 800abf8:	d23f      	bcs.n	800ac7a <ufs_ReadFile+0xfa>
    	uint16_t sector_start = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;
 800abfa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
        for (uint16_t sector_in_cluster = sector_start; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800abfc:	f8b0 e006 	ldrh.w	lr, [r0, #6]
    	uint16_t sector_start = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;
 800ac00:	fbb4 faf2 	udiv	sl, r4, r2
    	uint16_t offset_within_sector = offset_within_cluster % file->ufs->conf->api->u16numberByteOfSector;
 800ac04:	fb02 441a 	mls	r4, r2, sl, r4
    	uint16_t sector_start = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;
 800ac08:	fa1f fa8a 	uxth.w	sl, sl
        for (uint16_t sector_in_cluster = sector_start; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800ac0c:	45f2      	cmp	sl, lr
    	uint16_t offset_within_sector = offset_within_cluster % file->ufs->conf->api->u16numberByteOfSector;
 800ac0e:	b2a4      	uxth	r4, r4
        for (uint16_t sector_in_cluster = sector_start; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800ac10:	d249      	bcs.n	800aca6 <ufs_ReadFile+0x126>
 800ac12:	0049      	lsls	r1, r1, #1
 800ac14:	6039      	str	r1, [r7, #0]
            file->ufs->conf->api->ReadSector(file->ufs->ClusterDataZoneFirstSector + file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_in_cluster,
 800ac16:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6868      	ldr	r0, [r5, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	5a40      	ldrh	r0, [r0, r1]
 800ac22:	fb10 c00e 	smlabb	r0, r0, lr, ip
 800ac26:	4450      	add	r0, sl
 800ac28:	b280      	uxth	r0, r0
 800ac2a:	4659      	mov	r1, fp
 800ac2c:	4798      	blx	r3
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac2e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ac30:	6943      	ldr	r3, [r0, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ac36:	4294      	cmp	r4, r2
 800ac38:	d22b      	bcs.n	800ac92 <ufs_ReadFile+0x112>
 800ac3a:	1e71      	subs	r1, r6, #1
 800ac3c:	4449      	add	r1, r9
 800ac3e:	e005      	b.n	800ac4c <ufs_ReadFile+0xcc>
                if (bytes_read == length || bytes_read == file->info.comp.size)  // Stop reading once we've read the requested amount
 800ac40:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800ac42:	42b2      	cmp	r2, r6
 800ac44:	d019      	beq.n	800ac7a <ufs_ReadFile+0xfa>
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac46:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ac48:	42a2      	cmp	r2, r4
 800ac4a:	d922      	bls.n	800ac92 <ufs_ReadFile+0x112>
                data[bytes_read] = data_sector[countByte];
 800ac4c:	f81b 2004 	ldrb.w	r2, [fp, r4]
 800ac50:	f801 2f01 	strb.w	r2, [r1, #1]!
                if(file->EncodeEnable == UFS_ENCODE_ENABLE)
 800ac54:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac58:	3401      	adds	r4, #1
                if(file->EncodeEnable == UFS_ENCODE_ENABLE)
 800ac5a:	2b01      	cmp	r3, #1
                bytes_read++;
 800ac5c:	f106 0601 	add.w	r6, r6, #1
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac60:	b2a4      	uxth	r4, r4
                if(file->EncodeEnable == UFS_ENCODE_ENABLE)
 800ac62:	d105      	bne.n	800ac70 <ufs_ReadFile+0xf0>
                	data[bytes_read] ^= file->ufs->DeviceId[0] |  BYTE_CODEC_DEFAULT;
 800ac64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ac66:	7a1b      	ldrb	r3, [r3, #8]
 800ac68:	f063 0355 	orn	r3, r3, #85	@ 0x55
 800ac6c:	405a      	eors	r2, r3
 800ac6e:	700a      	strb	r2, [r1, #0]
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac70:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ac72:	6943      	ldr	r3, [r0, #20]
                if (bytes_read == length || bytes_read == file->info.comp.size)  // Stop reading once we've read the requested amount
 800ac74:	45b0      	cmp	r8, r6
            for (uint16_t countByte = offset_within_sector; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800ac76:	681b      	ldr	r3, [r3, #0]
                if (bytes_read == length || bytes_read == file->info.comp.size)  // Stop reading once we've read the requested amount
 800ac78:	d1e2      	bne.n	800ac40 <ufs_ReadFile+0xc0>
    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800ac7a:	6a1a      	ldr	r2, [r3, #32]
 800ac7c:	2a00      	cmp	r2, #0
 800ac7e:	d092      	beq.n	800aba6 <ufs_ReadFile+0x26>
 800ac80:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d08f      	beq.n	800aba6 <ufs_ReadFile+0x26>
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex
 800ac86:	4790      	blx	r2
}
 800ac88:	4630      	mov	r0, r6
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (uint16_t sector_in_cluster = sector_start; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800ac92:	f8b0 e006 	ldrh.w	lr, [r0, #6]
 800ac96:	f10a 0a01 	add.w	sl, sl, #1
 800ac9a:	fa1f fa8a 	uxth.w	sl, sl
 800ac9e:	45d6      	cmp	lr, sl
            offset_within_sector =  0;
 800aca0:	f04f 0400 	mov.w	r4, #0
        for (uint16_t sector_in_cluster = sector_start; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800aca4:	d8b7      	bhi.n	800ac16 <ufs_ReadFile+0x96>
        cluster_index++;
 800aca6:	687a      	ldr	r2, [r7, #4]
    while (bytes_read < length && cluster_index < file->clusters.length)
 800aca8:	45b0      	cmp	r8, r6
        cluster_index++;
 800acaa:	f102 0201 	add.w	r2, r2, #1
 800acae:	607a      	str	r2, [r7, #4]
        offset_within_cluster = 0;
 800acb0:	f04f 0400 	mov.w	r4, #0
    while (bytes_read < length && cluster_index < file->clusters.length)
 800acb4:	d89d      	bhi.n	800abf2 <ufs_ReadFile+0x72>
 800acb6:	e7e0      	b.n	800ac7a <ufs_ReadFile+0xfa>

0800acb8 <ufs_WriteFile>:
 *
 * @return      ufs_ReturnType  UFS_OK on success, UFS_NOT_OK on failure.
 */
__fast
ufs_ReturnType ufs_WriteFile(ufs_Item_Type *file, uint8_t *data, uint32_t length, ufs_CheckSumStatus sumEnable)
{
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	b089      	sub	sp, #36	@ 0x24
 800acbe:	4680      	mov	r8, r0
 800acc0:	af00      	add	r7, sp, #0
	if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800acc2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800acc4:	61bb      	str	r3, [r7, #24]
	if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800acc6:	b148      	cbz	r0, 800acdc <ufs_WriteFile+0x24>
 800acc8:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 800accc:	b933      	cbnz	r3, 800acdc <ufs_WriteFile+0x24>
	{
		 return UFS_NOT_OK;
	}

    if(file->status != UFS_FILE_EXIST)
 800acce:	f898 302c 	ldrb.w	r3, [r8, #44]	@ 0x2c
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d009      	beq.n	800acea <ufs_WriteFile+0x32>
    {
    	file->err = UFS_ERROR_ITEM_NOT_FILE;
 800acd6:	230d      	movs	r3, #13
 800acd8:	f888 302d 	strb.w	r3, [r8, #45]	@ 0x2d
		 return UFS_NOT_OK;
 800acdc:	2301      	movs	r3, #1
 800acde:	60fb      	str	r3, [r7, #12]
    {
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex
    }

    return UFS_OK;
}
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	3724      	adds	r7, #36	@ 0x24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t cluster_size = file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster;
 800acea:	6943      	ldr	r3, [r0, #20]
 800acec:	88c4      	ldrh	r4, [r0, #6]
 800acee:	4692      	mov	sl, r2
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 800acf4:	fb03 f404 	mul.w	r4, r3, r4
    uint8_t sector_buffer[file->ufs->conf->api->u16numberByteOfSector];
 800acf8:	3307      	adds	r3, #7
 800acfa:	468b      	mov	fp, r1
 800acfc:	08db      	lsrs	r3, r3, #3
 800acfe:	4669      	mov	r1, sp
 800ad00:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800ad04:	469d      	mov	sp, r3
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800ad06:	69d1      	ldr	r1, [r2, #28]
    uint32_t number_clusters = (length + cluster_size - 1) / cluster_size + 1;  // Calculate number of clusters needed
 800ad08:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad0c:	4423      	add	r3, r4
 800ad0e:	fbb3 f3f4 	udiv	r3, r3, r4
 800ad12:	3301      	adds	r3, #1
 800ad14:	607b      	str	r3, [r7, #4]
    uint8_t sector_buffer[file->ufs->conf->api->u16numberByteOfSector];
 800ad16:	466d      	mov	r5, sp
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800ad18:	b129      	cbz	r1, 800ad26 <ufs_WriteFile+0x6e>
 800ad1a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800ad1c:	b11b      	cbz	r3, 800ad26 <ufs_WriteFile+0x6e>
        file->ufs->conf->api->LockMutex((void *)file->ufs->conf->api->mutex);  // Lock the mutex
 800ad1e:	4618      	mov	r0, r3
 800ad20:	4788      	blx	r1
    ufs_CleanClusters(file->ufs, file->clusters.value, file->clusters.length);
 800ad22:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 800ad26:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800ad2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad2e:	f7fe fb1d 	bl	800936c <ufs_CleanClusters>
    file->clusters.value = (uint16_t *)realloc(file->clusters.value, number_clusters * sizeof(uint16_t));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad38:	0059      	lsls	r1, r3, #1
 800ad3a:	f004 fdc7 	bl	800f8cc <realloc>
 800ad3e:	4601      	mov	r1, r0
 800ad40:	f8c8 0004 	str.w	r0, [r8, #4]
    if (file->clusters.value == NULL)
 800ad44:	2800      	cmp	r0, #0
 800ad46:	f000 80f1 	beq.w	800af2c <ufs_WriteFile+0x274>
    file->clusters.length = number_clusters;
 800ad4a:	687c      	ldr	r4, [r7, #4]
    if (ufs_OrderClusters(file->ufs, file->clusters.value, number_clusters) != UFS_OK)
 800ad4c:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
    file->clusters.length = number_clusters;
 800ad50:	b2a3      	uxth	r3, r4
 800ad52:	f8a8 3008 	strh.w	r3, [r8, #8]
    if (ufs_OrderClusters(file->ufs, file->clusters.value, number_clusters) != UFS_OK)
 800ad56:	461a      	mov	r2, r3
    file->clusters.length = number_clusters;
 800ad58:	603b      	str	r3, [r7, #0]
    if (ufs_OrderClusters(file->ufs, file->clusters.value, number_clusters) != UFS_OK)
 800ad5a:	f7fe fc27 	bl	80095ac <ufs_OrderClusters>
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d175      	bne.n	800ae50 <ufs_WriteFile+0x198>
    file->info.comp.first_cluster.sector_id = file->clusters.value[0] / (file->ufs->conf->api->u16numberByteOfSector / 2);
 800ad64:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
    for (cluster_index = 0; cluster_index < number_clusters; cluster_index++)
 800ad68:	2c00      	cmp	r4, #0
 800ad6a:	d04c      	beq.n	800ae06 <ufs_WriteFile+0x14e>
    uint32_t bytes_written = 0;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
    for (cluster_index = 0; cluster_index < number_clusters; cluster_index++)
 800ad6e:	60bb      	str	r3, [r7, #8]
    uint32_t bytes_written = 0;
 800ad70:	461c      	mov	r4, r3
                    sector_buffer[byte_in_sector] = UFS_BYTE_VALUE_AFTER_ERASE;  // Pad remaining sector bytes with 0 if needed
 800ad72:	f04f 09ff 	mov.w	r9, #255	@ 0xff
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800ad76:	88c2      	ldrh	r2, [r0, #6]
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	f000 80d3 	beq.w	800af24 <ufs_WriteFile+0x26c>
                                      (file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster) + sector_in_cluster;
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	617b      	str	r3, [r7, #20]
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800ad86:	6943      	ldr	r3, [r0, #20]
                                      (file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster) + sector_in_cluster;
 800ad88:	697e      	ldr	r6, [r7, #20]
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
                                      (file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster) + sector_in_cluster;
 800ad8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad92:	5b9b      	ldrh	r3, [r3, r6]
            uint32_t cluster_offset = file->ufs->ClusterDataZoneFirstSector +
 800ad94:	8886      	ldrh	r6, [r0, #4]
 800ad96:	fb02 6603 	mla	r6, r2, r3, r6
                                      (file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster) + sector_in_cluster;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	fa16 f683 	uxtah	r6, r6, r3
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800ada0:	b1a1      	cbz	r1, 800adcc <ufs_WriteFile+0x114>
 800ada2:	2300      	movs	r3, #0
                if (bytes_written < length)
 800ada4:	45a2      	cmp	sl, r4
 800ada6:	d864      	bhi.n	800ae72 <ufs_WriteFile+0x1ba>
                    sector_buffer[byte_in_sector] = UFS_BYTE_VALUE_AFTER_ERASE;  // Pad remaining sector bytes with 0 if needed
 800ada8:	f805 9003 	strb.w	r9, [r5, r3]
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800adac:	6942      	ldr	r2, [r0, #20]
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	428b      	cmp	r3, r1
 800adb8:	d208      	bcs.n	800adcc <ufs_WriteFile+0x114>
                    sector_buffer[byte_in_sector] = UFS_BYTE_VALUE_AFTER_ERASE;  // Pad remaining sector bytes with 0 if needed
 800adba:	f805 9003 	strb.w	r9, [r5, r3]
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800adbe:	6942      	ldr	r2, [r0, #20]
 800adc0:	6812      	ldr	r2, [r2, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	4299      	cmp	r1, r3
 800adca:	d8f6      	bhi.n	800adba <ufs_WriteFile+0x102>
            if(sumEnable == CHECKSUM_ENABLE)
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	2b01      	cmp	r3, #1
            file->ufs->conf->api->WriteSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800add0:	b2b6      	uxth	r6, r6
            if(sumEnable == CHECKSUM_ENABLE)
 800add2:	d067      	beq.n	800aea4 <ufs_WriteFile+0x1ec>
            file->ufs->conf->api->WriteSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800add4:	6943      	ldr	r3, [r0, #20]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	4630      	mov	r0, r6
 800adda:	6853      	ldr	r3, [r2, #4]
 800addc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800adde:	4629      	mov	r1, r5
 800ade0:	4798      	blx	r3
            if (bytes_written == length)  // Stop if all data has been written
 800ade2:	45a2      	cmp	sl, r4
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800ade4:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
            if (bytes_written == length)  // Stop if all data has been written
 800ade8:	d00d      	beq.n	800ae06 <ufs_WriteFile+0x14e>
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	88c2      	ldrh	r2, [r0, #6]
 800adee:	3301      	adds	r3, #1
 800adf0:	61fb      	str	r3, [r7, #28]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d3c6      	bcc.n	800ad86 <ufs_WriteFile+0xce>
    for (cluster_index = 0; cluster_index < number_clusters; cluster_index++)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	3301      	adds	r3, #1
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	428b      	cmp	r3, r1
 800ae02:	60bb      	str	r3, [r7, #8]
 800ae04:	d3b7      	bcc.n	800ad76 <ufs_WriteFile+0xbe>
    file->info.comp.first_cluster.sector_id = file->clusters.value[0] / (file->ufs->conf->api->u16numberByteOfSector / 2);
 800ae06:	6943      	ldr	r3, [r0, #20]
 800ae08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
    file->info.comp.size = length;
 800ae0e:	f8c8 a028 	str.w	sl, [r8, #40]	@ 0x28
    file->info.comp.first_cluster.sector_id = file->clusters.value[0] / (file->ufs->conf->api->u16numberByteOfSector / 2);
 800ae12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae14:	880a      	ldrh	r2, [r1, #0]
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae1c:	f8a8 2020 	strh.w	r2, [r8, #32]
    file->info.comp.first_cluster.position = file->clusters.value[0] % (file->ufs->conf->api->u16numberByteOfSector / 2);
 800ae20:	880a      	ldrh	r2, [r1, #0]
 800ae22:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae26:	fb03 2211 	mls	r2, r3, r1, r2
 800ae2a:	f8a8 2022 	strh.w	r2, [r8, #34]	@ 0x22
    ufs_UpdateItemInfo(file->ufs, file);
 800ae2e:	4641      	mov	r1, r8
 800ae30:	f7fe fe14 	bl	8009a5c <ufs_UpdateItemInfo>
    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800ae34:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	6a13      	ldr	r3, [r2, #32]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f af4e 	beq.w	800ace0 <ufs_WriteFile+0x28>
 800ae44:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f af4a 	beq.w	800ace0 <ufs_WriteFile+0x28>
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex
 800ae4c:	4798      	blx	r3
 800ae4e:	e747      	b.n	800ace0 <ufs_WriteFile+0x28>
        if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800ae50:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
        file->err = UFS_ERROR_FULL_MEM;
 800ae54:	2201      	movs	r2, #1
            	    file->err = UFS_ERROR_SUM_SECTOR_FAIL;
 800ae56:	f888 202d 	strb.w	r2, [r8, #45]	@ 0x2d
            	    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	6a13      	ldr	r3, [r2, #32]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f43f af3b 	beq.w	800acdc <ufs_WriteFile+0x24>
 800ae66:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f43f af37 	beq.w	800acdc <ufs_WriteFile+0x24>
            	        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);
 800ae6e:	4798      	blx	r3
 800ae70:	e734      	b.n	800acdc <ufs_WriteFile+0x24>
                    if(file->EncodeEnable == UFS_ENCODE_ENABLE)
 800ae72:	f898 1034 	ldrb.w	r1, [r8, #52]	@ 0x34
                    sector_buffer[byte_in_sector] = data[bytes_written++];
 800ae76:	f81b 2004 	ldrb.w	r2, [fp, r4]
 800ae7a:	54ea      	strb	r2, [r5, r3]
                    if(file->EncodeEnable == UFS_ENCODE_ENABLE)
 800ae7c:	2901      	cmp	r1, #1
 800ae7e:	d104      	bne.n	800ae8a <ufs_WriteFile+0x1d2>
                    	sector_buffer[byte_in_sector] ^= file->ufs->DeviceId[0] | BYTE_CODEC_DEFAULT;
 800ae80:	7a01      	ldrb	r1, [r0, #8]
 800ae82:	f061 0155 	orn	r1, r1, #85	@ 0x55
 800ae86:	404a      	eors	r2, r1
 800ae88:	54ea      	strb	r2, [r5, r3]
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800ae8a:	6942      	ldr	r2, [r0, #20]
 800ae8c:	6812      	ldr	r2, [r2, #0]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4299      	cmp	r1, r3
                    sector_buffer[byte_in_sector] = data[bytes_written++];
 800ae96:	f104 0401 	add.w	r4, r4, #1
            for (uint16_t byte_in_sector = 0; byte_in_sector < file->ufs->conf->api->u16numberByteOfSector; byte_in_sector++)
 800ae9a:	d883      	bhi.n	800ada4 <ufs_WriteFile+0xec>
            if(sumEnable == CHECKSUM_ENABLE)
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b01      	cmp	r3, #1
            file->ufs->conf->api->WriteSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aea0:	b2b6      	uxth	r6, r6
            if(sumEnable == CHECKSUM_ENABLE)
 800aea2:	d197      	bne.n	800add4 <ufs_WriteFile+0x11c>
            	sumSector = ufs_CheckSum(sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aea4:	4628      	mov	r0, r5
 800aea6:	f7fe f85f 	bl	8008f68 <ufs_CheckSum>
            file->ufs->conf->api->WriteSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aeaa:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
            	sumSector = ufs_CheckSum(sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aeae:	6138      	str	r0, [r7, #16]
            file->ufs->conf->api->WriteSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4630      	mov	r0, r6
 800aebc:	4798      	blx	r3
            	file->ufs->conf->api->ReadSector(cluster_offset, sector_buffer, file->ufs->conf->api->u16numberByteOfSector);
 800aebe:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4629      	mov	r1, r5
 800aec8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	4630      	mov	r0, r6
 800aece:	4798      	blx	r3
            	if(sumSector != ufs_CheckSum(sector_buffer, file->ufs->conf->api->u16numberByteOfSector))
 800aed0:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4628      	mov	r0, r5
 800aeda:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800aedc:	f7fe f844 	bl	8008f68 <ufs_CheckSum>
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	4298      	cmp	r0, r3
 800aee4:	f43f af7d 	beq.w	800ade2 <ufs_WriteFile+0x12a>
            		file->info.comp.size += bytes_written;
 800aee8:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
            		ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], number_clusters - cluster_index);
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
            		file->info.comp.size += bytes_written;
 800aef4:	4423      	add	r3, r4
            		ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], number_clusters - cluster_index);
 800aef6:	1a52      	subs	r2, r2, r1
 800aef8:	697c      	ldr	r4, [r7, #20]
 800aefa:	f8d8 1004 	ldr.w	r1, [r8, #4]
            		file->info.comp.size += bytes_written;
 800aefe:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
            		ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], number_clusters - cluster_index);
 800af02:	b292      	uxth	r2, r2
 800af04:	4421      	add	r1, r4
 800af06:	f7fe fa31 	bl	800936c <ufs_CleanClusters>
            		ufs_SetClusterMap(file->ufs ,file->clusters.value[cluster_index], UFS_CLUSTER_BAD);
 800af0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af0e:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 800af12:	5b19      	ldrh	r1, [r3, r4]
 800af14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af18:	f7fe fd1a 	bl	8009950 <ufs_SetClusterMap>
            	    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800af1c:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
            	    file->err = UFS_ERROR_SUM_SECTOR_FAIL;
 800af20:	220c      	movs	r2, #12
 800af22:	e798      	b.n	800ae56 <ufs_WriteFile+0x19e>
        if (bytes_written == length)
 800af24:	45a2      	cmp	sl, r4
 800af26:	f47f af67 	bne.w	800adf8 <ufs_WriteFile+0x140>
 800af2a:	e76c      	b.n	800ae06 <ufs_WriteFile+0x14e>
        if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800af2c:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
        file->err = UFS_ERROR_ALLOCATE_MEM;
 800af30:	2206      	movs	r2, #6
 800af32:	e790      	b.n	800ae56 <ufs_WriteFile+0x19e>

0800af34 <ufs_WriteAppendFile>:
 *
 * @return      ufs_ReturnType  UFS_OK on success, UFS_NOT_OK on failure.
 */
__fast
ufs_ReturnType ufs_WriteAppendFile(ufs_Item_Type *file, uint8_t *data, uint32_t length, ufs_CheckSumStatus sumEnable)
{
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	b08f      	sub	sp, #60	@ 0x3c
 800af3a:	4606      	mov	r6, r0
    if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800af3c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800af3e:	af00      	add	r7, sp, #0
 800af40:	e9c7 310c 	strd	r3, r1, [r7, #48]	@ 0x30
    if(file->ufs == NULL || file->err != UFS_ERROR_NONE)
 800af44:	b150      	cbz	r0, 800af5c <ufs_WriteAppendFile+0x28>
 800af46:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 800af4a:	623b      	str	r3, [r7, #32]
 800af4c:	b933      	cbnz	r3, 800af5c <ufs_WriteAppendFile+0x28>
	{
		return UFS_NOT_OK;
	}

    if(file->status != UFS_FILE_EXIST)
 800af4e:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 800af52:	2b02      	cmp	r3, #2
 800af54:	d009      	beq.n	800af6a <ufs_WriteAppendFile+0x36>
    {
    	file->err = UFS_ERROR_ITEM_NOT_FILE;
 800af56:	230d      	movs	r3, #13
 800af58:	f886 302d 	strb.w	r3, [r6, #45]	@ 0x2d
		return UFS_NOT_OK;
 800af5c:	2301      	movs	r3, #1
 800af5e:	623b      	str	r3, [r7, #32]
    {
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);
    }

    return UFS_OK;
}
 800af60:	6a38      	ldr	r0, [r7, #32]
 800af62:	373c      	adds	r7, #60	@ 0x3c
 800af64:	46bd      	mov	sp, r7
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t cluster_size = file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster; // Calculate total cluster size
 800af6a:	6943      	ldr	r3, [r0, #20]
 800af6c:	88c1      	ldrh	r1, [r0, #6]
    uint32_t current_file_size = file->info.comp.size;  // Get current file size
 800af6e:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
    uint32_t new_size = current_file_size + length;     // Calculate new size after appending
 800af70:	4693      	mov	fp, r2
    uint32_t cluster_size = file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster; // Calculate total cluster size
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 800af76:	fb03 f101 	mul.w	r1, r3, r1
    uint8_t data_sector[file->ufs->conf->api->u16numberByteOfSector];
 800af7a:	3307      	adds	r3, #7
 800af7c:	4668      	mov	r0, sp
 800af7e:	08db      	lsrs	r3, r3, #3
 800af80:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 800af84:	469d      	mov	sp, r3
    uint32_t new_size = current_file_size + length;     // Calculate new size after appending
 800af86:	eb04 000b 	add.w	r0, r4, fp
    uint16_t current_cluster_count = (current_file_size + cluster_size - 1) / cluster_size + 1;
 800af8a:	1e63      	subs	r3, r4, #1
 800af8c:	440b      	add	r3, r1
 800af8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af92:	b29d      	uxth	r5, r3
    uint16_t new_cluster_count = (new_size + cluster_size - 1) / cluster_size + 1;
 800af94:	1e43      	subs	r3, r0, #1
 800af96:	440b      	add	r3, r1
 800af98:	fbb3 f3f1 	udiv	r3, r3, r1
 800af9c:	3301      	adds	r3, #1
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	617b      	str	r3, [r7, #20]
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800afa2:	69d3      	ldr	r3, [r2, #28]
    uint16_t current_cluster_count = (current_file_size + cluster_size - 1) / cluster_size + 1;
 800afa4:	61bd      	str	r5, [r7, #24]
 800afa6:	f105 0901 	add.w	r9, r5, #1
    uint32_t offset_within_cluster = current_file_size % cluster_size;  // Get the offset within the last cluster
 800afaa:	fbb4 f8f1 	udiv	r8, r4, r1
    uint32_t cluster_size = file->ufs->conf->api->u16numberByteOfSector * file->ufs->NumberSectorOfCluster; // Calculate total cluster size
 800afae:	61f9      	str	r1, [r7, #28]
    uint32_t new_size = current_file_size + length;     // Calculate new size after appending
 800afb0:	60f8      	str	r0, [r7, #12]
    uint16_t current_cluster_count = (current_file_size + cluster_size - 1) / cluster_size + 1;
 800afb2:	fa1f f989 	uxth.w	r9, r9
    uint32_t offset_within_cluster = current_file_size % cluster_size;  // Get the offset within the last cluster
 800afb6:	fb01 4418 	mls	r4, r1, r8, r4
    uint8_t data_sector[file->ufs->conf->api->u16numberByteOfSector];
 800afba:	466d      	mov	r5, sp
    if (file->ufs->conf->api->LockMutex && file->ufs->conf->api->mutex)
 800afbc:	b113      	cbz	r3, 800afc4 <ufs_WriteAppendFile+0x90>
 800afbe:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800afc0:	b100      	cbz	r0, 800afc4 <ufs_WriteAppendFile+0x90>
        file->ufs->conf->api->LockMutex((void *)file->ufs->conf->api->mutex);  // Lock the mutex
 800afc2:	4798      	blx	r3
    if (new_cluster_count > current_cluster_count)
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	4599      	cmp	r9, r3
 800afc8:	f0c0 8121 	bcc.w	800b20e <ufs_WriteAppendFile+0x2da>
        uint16_t sector_offset = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;  // Calculate sector offset
 800afcc:	6b30      	ldr	r0, [r6, #48]	@ 0x30
    if (offset_within_cluster > 0)
 800afce:	2c00      	cmp	r4, #0
 800afd0:	f000 80c4 	beq.w	800b15c <ufs_WriteAppendFile+0x228>
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800afd4:	fa1f f288 	uxth.w	r2, r8
 800afd8:	6873      	ldr	r3, [r6, #4]
 800afda:	60ba      	str	r2, [r7, #8]
    cluster_index = current_file_size / cluster_size;
 800afdc:	607a      	str	r2, [r7, #4]
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800afde:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
        uint16_t sector_offset = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;  // Calculate sector offset
 800afe2:	6943      	ldr	r3, [r0, #20]
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800afe4:	f8b0 c006 	ldrh.w	ip, [r0, #6]
        uint32_t cluster_offset = file->ufs->ClusterDataZoneFirstSector +
 800afe8:	8881      	ldrh	r1, [r0, #4]
        uint16_t sector_offset = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;  // Calculate sector offset
 800afea:	681b      	ldr	r3, [r3, #0]
        uint32_t cluster_offset = file->ufs->ClusterDataZoneFirstSector +
 800afec:	fb0c 1102 	mla	r1, ip, r2, r1
        uint16_t sector_offset = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;  // Calculate sector offset
 800aff0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
        file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800aff2:	f8d3 c008 	ldr.w	ip, [r3, #8]
        uint16_t sector_offset = offset_within_cluster / file->ufs->conf->api->u16numberByteOfSector;  // Calculate sector offset
 800aff6:	fbb4 f0f2 	udiv	r0, r4, r2
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	fa11 fa80 	uxtah	sl, r1, r0
        file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b000:	fa1f f88a 	uxth.w	r8, sl
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b004:	005b      	lsls	r3, r3, #1
        file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b006:	4629      	mov	r1, r5
 800b008:	4640      	mov	r0, r8
                                  file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b00a:	627b      	str	r3, [r7, #36]	@ 0x24
        file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b00c:	47e0      	blx	ip
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b00e:	f8d6 c030 	ldr.w	ip, [r6, #48]	@ 0x30
        for (uint32_t countByte = offset_within_cluster; countByte < cluster_size && bytes_written < length; countByte++)
 800b012:	f1bb 0f00 	cmp.w	fp, #0
 800b016:	f000 81e6 	beq.w	800b3e6 <ufs_WriteAppendFile+0x4b2>
 800b01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01c:	3b01      	subs	r3, #1
 800b01e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t bytes_written = 0;                         // Track how many bytes have been written
 800b020:	f04f 0900 	mov.w	r9, #0
 800b024:	e036      	b.n	800b094 <ufs_WriteAppendFile+0x160>
                file->ufs->conf->api->WriteSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b026:	f8de 3004 	ldr.w	r3, [lr, #4]
 800b02a:	4629      	mov	r1, r5
 800b02c:	4798      	blx	r3
                file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b02e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b030:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	4629      	mov	r1, r5
 800b038:	6893      	ldr	r3, [r2, #8]
 800b03a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b03c:	4798      	blx	r3
            data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] = data[bytes_written++];
 800b03e:	f8d6 c030 	ldr.w	ip, [r6, #48]	@ 0x30
 800b042:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b04a:	fbb4 f3f1 	udiv	r3, r4, r1
 800b04e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
            if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b050:	f896 2034 	ldrb.w	r2, [r6, #52]	@ 0x34
            data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] = data[bytes_written++];
 800b054:	fb01 4313 	mls	r3, r1, r3, r4
            if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b058:	2a01      	cmp	r2, #1
            data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] = data[bytes_written++];
 800b05a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800b05e:	54e9      	strb	r1, [r5, r3]
 800b060:	f109 0901 	add.w	r9, r9, #1
 800b064:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b066:	d10e      	bne.n	800b086 <ufs_WriteAppendFile+0x152>
                data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] ^= file->ufs->DeviceId[0] | BYTE_CODEC_DEFAULT;
 800b068:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b070:	fbb4 f2f3 	udiv	r2, r4, r3
 800b074:	fb03 4212 	mls	r2, r3, r2, r4
 800b078:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800b07c:	5ca9      	ldrb	r1, [r5, r2]
 800b07e:	f063 0355 	orn	r3, r3, #85	@ 0x55
 800b082:	404b      	eors	r3, r1
 800b084:	54ab      	strb	r3, [r5, r2]
        for (uint32_t countByte = offset_within_cluster; countByte < cluster_size && bytes_written < length; countByte++)
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	3401      	adds	r4, #1
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	f240 8172 	bls.w	800b374 <ufs_WriteAppendFile+0x440>
 800b090:	45cb      	cmp	fp, r9
 800b092:	d050      	beq.n	800b136 <ufs_WriteAppendFile+0x202>
            sector_offset = countByte / file->ufs->conf->api->u16numberByteOfSector;
 800b094:	f8dc 2014 	ldr.w	r2, [ip, #20]
            cluster_offset = file->ufs->ClusterDataZoneFirstSector + file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b09a:	6873      	ldr	r3, [r6, #4]
            sector_offset = countByte / file->ufs->conf->api->u16numberByteOfSector;
 800b09c:	f8d2 e000 	ldr.w	lr, [r2]
            cluster_offset = file->ufs->ClusterDataZoneFirstSector + file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b0a0:	5a5b      	ldrh	r3, [r3, r1]
 800b0a2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800b0a6:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800b0aa:	fb01 2203 	mla	r2, r1, r3, r2
            sector_offset = countByte / file->ufs->conf->api->u16numberByteOfSector;
 800b0ae:	f8be 1028 	ldrh.w	r1, [lr, #40]	@ 0x28
 800b0b2:	fbb4 f3f1 	udiv	r3, r4, r1
            cluster_offset = file->ufs->ClusterDataZoneFirstSector + file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b0b6:	fa12 f283 	uxtah	r2, r2, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	46d0      	mov	r8, sl
            if (cluster_offset != cluster_offset_old)
 800b0be:	4540      	cmp	r0, r8
                file->ufs->conf->api->WriteSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b0c0:	fa1f f888 	uxth.w	r8, r8
            cluster_offset = file->ufs->ClusterDataZoneFirstSector + file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_offset;
 800b0c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b0c6:	4682      	mov	sl, r0
                file->ufs->conf->api->WriteSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b0c8:	460a      	mov	r2, r1
 800b0ca:	4640      	mov	r0, r8
            if (cluster_offset != cluster_offset_old)
 800b0cc:	d0bf      	beq.n	800b04e <ufs_WriteAppendFile+0x11a>
                if (sumEnable == CHECKSUM_ENABLE)
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d1a8      	bne.n	800b026 <ufs_WriteAppendFile+0xf2>
                    sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate checksum for the sector
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f7fd ff47 	bl	8008f68 <ufs_CheckSum>
                file->ufs->conf->api->WriteSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b0da:	6b33      	ldr	r3, [r6, #48]	@ 0x30
                    sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate checksum for the sector
 800b0dc:	6138      	str	r0, [r7, #16]
                file->ufs->conf->api->WriteSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4798      	blx	r3
                    file->ufs->conf->api->ReadSector(cluster_offset_old, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b0ec:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4798      	blx	r3
                    if (sumSector != ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector))
 800b0fc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4628      	mov	r0, r5
 800b104:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b106:	f7fd ff2f 	bl	8008f68 <ufs_CheckSum>
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4298      	cmp	r0, r3
 800b10e:	d08e      	beq.n	800b02e <ufs_WriteAppendFile+0xfa>
                        file->info.comp.size += bytes_written;  // Update file size to account for the error
 800b110:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800b112:	444b      	add	r3, r9
                ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], file->clusters.length - cluster_index);
 800b114:	8932      	ldrh	r2, [r6, #8]
                file->info.comp.size += bytes_written;
 800b116:	62b3      	str	r3, [r6, #40]	@ 0x28
                ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], file->clusters.length - cluster_index);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6871      	ldr	r1, [r6, #4]
 800b11c:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	b292      	uxth	r2, r2
 800b124:	4419      	add	r1, r3
 800b126:	f7fe f921 	bl	800936c <ufs_CleanClusters>
                ufs_SetClusterMap(file->ufs, file->clusters.value[cluster_index], UFS_CLUSTER_BAD);
 800b12a:	6873      	ldr	r3, [r6, #4]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800b130:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800b134:	e0e0      	b.n	800b2f8 <ufs_WriteAppendFile+0x3c4>
        file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b136:	f8b7 8028 	ldrh.w	r8, [r7, #40]	@ 0x28
            data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] = data[bytes_written++];
 800b13a:	465c      	mov	r4, fp
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b13c:	f8dc 3014 	ldr.w	r3, [ip, #20]
        if (sumEnable == CHECKSUM_ENABLE)
 800b140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b142:	681b      	ldr	r3, [r3, #0]
        if (sumEnable == CHECKSUM_ENABLE)
 800b144:	2901      	cmp	r1, #1
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b146:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
        if (sumEnable == CHECKSUM_ENABLE)
 800b148:	f000 8118 	beq.w	800b37c <ufs_WriteAppendFile+0x448>
        file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4640      	mov	r0, r8
 800b150:	4629      	mov	r1, r5
 800b152:	4798      	blx	r3
        if (bytes_written == length)
 800b154:	45a3      	cmp	fp, r4
            ufs_UpdateItemInfo(file->ufs, file);  // Update file metadata
 800b156:	6b30      	ldr	r0, [r6, #48]	@ 0x30
        if (bytes_written == length)
 800b158:	f000 80eb 	beq.w	800b332 <ufs_WriteAppendFile+0x3fe>
    for (cluster_index = (current_cluster_count - 1); cluster_index < file->clusters.length; cluster_index++)
 800b15c:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	459e      	cmp	lr, r3
 800b164:	f240 80e5 	bls.w	800b332 <ufs_WriteAppendFile+0x3fe>
 800b168:	627b      	str	r3, [r7, #36]	@ 0x24
                	data_sector[countByte] = UFS_BYTE_VALUE_AFTER_ERASE;
 800b16a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
        if (file->clusters.value[cluster_index] == UFS_CLUSTER_END || file->clusters.value[cluster_index] == UFS_CLUSTER_BAD)
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	6871      	ldr	r1, [r6, #4]
 800b172:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 800b176:	005a      	lsls	r2, r3, #1
 800b178:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800b17c:	f10c 0303 	add.w	r3, ip, #3
 800b180:	b29b      	uxth	r3, r3
 800b182:	2b01      	cmp	r3, #1
 800b184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b186:	f240 811b 	bls.w	800b3c0 <ufs_WriteAppendFile+0x48c>
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800b18a:	88c3      	ldrh	r3, [r0, #6]
 800b18c:	f04f 0a00 	mov.w	sl, #0
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 80c5 	beq.w	800b320 <ufs_WriteAppendFile+0x3ec>
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b196:	6942      	ldr	r2, [r0, #20]
            uint32_t cluster_offset = file->ufs->ClusterDataZoneFirstSector +
 800b198:	f8b0 8004 	ldrh.w	r8, [r0, #4]
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
            uint32_t cluster_offset = file->ufs->ClusterDataZoneFirstSector +
 800b1a0:	fb03 880c 	mla	r8, r3, ip, r8
                                      file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_in_cluster;
 800b1a4:	fa18 f88a 	uxtah	r8, r8, sl
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b1a8:	b1a1      	cbz	r1, 800b1d4 <ufs_WriteAppendFile+0x2a0>
 800b1aa:	2300      	movs	r3, #0
                if (bytes_written < length)
 800b1ac:	45a3      	cmp	fp, r4
 800b1ae:	d85b      	bhi.n	800b268 <ufs_WriteAppendFile+0x334>
                	data_sector[countByte] = UFS_BYTE_VALUE_AFTER_ERASE;
 800b1b0:	f805 9003 	strb.w	r9, [r5, r3]
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b1b4:	6942      	ldr	r2, [r0, #20]
 800b1b6:	6812      	ldr	r2, [r2, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	428b      	cmp	r3, r1
 800b1c0:	d208      	bcs.n	800b1d4 <ufs_WriteAppendFile+0x2a0>
                	data_sector[countByte] = UFS_BYTE_VALUE_AFTER_ERASE;
 800b1c2:	f805 9003 	strb.w	r9, [r5, r3]
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b1c6:	6942      	ldr	r2, [r0, #20]
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	4299      	cmp	r1, r3
 800b1d2:	d8f6      	bhi.n	800b1c2 <ufs_WriteAppendFile+0x28e>
            if (sumEnable == CHECKSUM_ENABLE)
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	2b01      	cmp	r3, #1
            file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b1d8:	fa1f f888 	uxth.w	r8, r8
            if (sumEnable == CHECKSUM_ENABLE)
 800b1dc:	d05e      	beq.n	800b29c <ufs_WriteAppendFile+0x368>
            file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b1de:	6943      	ldr	r3, [r0, #20]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	6853      	ldr	r3, [r2, #4]
 800b1e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4798      	blx	r3
            if (bytes_written >= length)
 800b1ec:	45a3      	cmp	fp, r4
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800b1ee:	6b30      	ldr	r0, [r6, #48]	@ 0x30
            if (bytes_written >= length)
 800b1f0:	f240 809f 	bls.w	800b332 <ufs_WriteAppendFile+0x3fe>
        for (uint16_t sector_in_cluster = 0; sector_in_cluster < file->ufs->NumberSectorOfCluster; sector_in_cluster++)
 800b1f4:	88c3      	ldrh	r3, [r0, #6]
 800b1f6:	f10a 0a01 	add.w	sl, sl, #1
 800b1fa:	fa1f f28a 	uxth.w	r2, sl
 800b1fe:	4293      	cmp	r3, r2
 800b200:	f240 80a9 	bls.w	800b356 <ufs_WriteAppendFile+0x422>
                                      file->clusters.value[cluster_index] * file->ufs->NumberSectorOfCluster + sector_in_cluster;
 800b204:	6872      	ldr	r2, [r6, #4]
 800b206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b208:	f832 c001 	ldrh.w	ip, [r2, r1]
 800b20c:	e7c3      	b.n	800b196 <ufs_WriteAppendFile+0x262>
        uint16_t additional_clusters = new_cluster_count - current_cluster_count + 1;
 800b20e:	461a      	mov	r2, r3
 800b210:	69bb      	ldr	r3, [r7, #24]
        file->clusters.value = (uint16_t *)realloc(file->clusters.value, new_cluster_count * sizeof(uint16_t));
 800b212:	6870      	ldr	r0, [r6, #4]
        uint16_t additional_clusters = new_cluster_count - current_cluster_count + 1;
 800b214:	1ad3      	subs	r3, r2, r3
        file->clusters.value = (uint16_t *)realloc(file->clusters.value, new_cluster_count * sizeof(uint16_t));
 800b216:	0051      	lsls	r1, r2, #1
        uint16_t additional_clusters = new_cluster_count - current_cluster_count + 1;
 800b218:	fa1f fa83 	uxth.w	sl, r3
        file->clusters.value = (uint16_t *)realloc(file->clusters.value, new_cluster_count * sizeof(uint16_t));
 800b21c:	f004 fb56 	bl	800f8cc <realloc>
 800b220:	6070      	str	r0, [r6, #4]
        if (file->clusters.value == NULL)
 800b222:	2800      	cmp	r0, #0
 800b224:	f000 80e1 	beq.w	800b3ea <ufs_WriteAppendFile+0x4b6>
        if (ufs_OrderClusters(file->ufs, &file->clusters.value[current_cluster_count - 1], additional_clusters) != UFS_OK)
 800b228:	f109 4900 	add.w	r9, r9, #2147483648	@ 0x80000000
 800b22c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b230:	eb00 0149 	add.w	r1, r0, r9, lsl #1
 800b234:	4652      	mov	r2, sl
 800b236:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800b238:	f7fe f9b8 	bl	80095ac <ufs_OrderClusters>
 800b23c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800b240:	2800      	cmp	r0, #0
 800b242:	f000 808b 	beq.w	800b35c <ufs_WriteAppendFile+0x428>
            if (file->ufs->conf->api->LockMutex != NULL && file->ufs->conf->api->mutex)
 800b246:	6b33      	ldr	r3, [r6, #48]	@ 0x30
            file->err = UFS_ERROR_FULL_MEM;  // Handle cluster allocation failure
 800b248:	2201      	movs	r2, #1
 800b24a:	f886 202d 	strb.w	r2, [r6, #45]	@ 0x2d
            if (file->ufs->conf->api->LockMutex != NULL && file->ufs->conf->api->mutex)
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69da      	ldr	r2, [r3, #28]
 800b254:	2a00      	cmp	r2, #0
 800b256:	f43f ae81 	beq.w	800af5c <ufs_WriteAppendFile+0x28>
 800b25a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f43f ae7d 	beq.w	800af5c <ufs_WriteAppendFile+0x28>
            	file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	4798      	blx	r3
 800b266:	e679      	b.n	800af5c <ufs_WriteAppendFile+0x28>
                    if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b268:	f896 1034 	ldrb.w	r1, [r6, #52]	@ 0x34
                    data_sector[countByte] = data[bytes_written++];  // Write data to the buffer
 800b26c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
                    if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b26e:	2901      	cmp	r1, #1
                    data_sector[countByte] = data[bytes_written++];  // Write data to the buffer
 800b270:	5d12      	ldrb	r2, [r2, r4]
 800b272:	54ea      	strb	r2, [r5, r3]
                    if (file->EncodeEnable == UFS_ENCODE_ENABLE)
 800b274:	d104      	bne.n	800b280 <ufs_WriteAppendFile+0x34c>
                        data_sector[countByte] ^= file->ufs->DeviceId[0] | BYTE_CODEC_DEFAULT;
 800b276:	7a01      	ldrb	r1, [r0, #8]
 800b278:	f061 0155 	orn	r1, r1, #85	@ 0x55
 800b27c:	404a      	eors	r2, r1
 800b27e:	54ea      	strb	r2, [r5, r3]
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b280:	6942      	ldr	r2, [r0, #20]
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	3301      	adds	r3, #1
 800b286:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 800b288:	b29b      	uxth	r3, r3
 800b28a:	428b      	cmp	r3, r1
                    data_sector[countByte] = data[bytes_written++];  // Write data to the buffer
 800b28c:	f104 0401 	add.w	r4, r4, #1
            for (uint16_t countByte = 0; countByte < file->ufs->conf->api->u16numberByteOfSector; countByte++)
 800b290:	d38c      	bcc.n	800b1ac <ufs_WriteAppendFile+0x278>
            if (sumEnable == CHECKSUM_ENABLE)
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	2b01      	cmp	r3, #1
            file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b296:	fa1f f888 	uxth.w	r8, r8
            if (sumEnable == CHECKSUM_ENABLE)
 800b29a:	d1a0      	bne.n	800b1de <ufs_WriteAppendFile+0x2aa>
                sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b29c:	4628      	mov	r0, r5
 800b29e:	f7fd fe63 	bl	8008f68 <ufs_CheckSum>
            file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b2a2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
                sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b2a4:	62b8      	str	r0, [r7, #40]	@ 0x28
            file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4798      	blx	r3
                file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b2b4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4798      	blx	r3
                if (sumSector != ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector))
 800b2c4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b2ce:	f7fd fe4b 	bl	8008f68 <ufs_CheckSum>
 800b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d4:	4298      	cmp	r0, r3
 800b2d6:	d089      	beq.n	800b1ec <ufs_WriteAppendFile+0x2b8>
                    file->info.comp.size += bytes_written;  // Update file size to account for failure
 800b2d8:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
                    ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], file->clusters.length - cluster_index);  // Clean bad clusters
 800b2da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2dc:	8932      	ldrh	r2, [r6, #8]
 800b2de:	6b30      	ldr	r0, [r6, #48]	@ 0x30
                    file->info.comp.size += bytes_written;  // Update file size to account for failure
 800b2e0:	4423      	add	r3, r4
                    ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], file->clusters.length - cluster_index);  // Clean bad clusters
 800b2e2:	1a52      	subs	r2, r2, r1
 800b2e4:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800b2e6:	6871      	ldr	r1, [r6, #4]
                    file->info.comp.size += bytes_written;  // Update file size to account for failure
 800b2e8:	62b3      	str	r3, [r6, #40]	@ 0x28
                    ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], file->clusters.length - cluster_index);  // Clean bad clusters
 800b2ea:	4421      	add	r1, r4
 800b2ec:	b292      	uxth	r2, r2
 800b2ee:	f7fe f83d 	bl	800936c <ufs_CleanClusters>
                    ufs_SetClusterMap(file->ufs, file->clusters.value[cluster_index], UFS_CLUSTER_BAD);  // Mark the cluster as bad
 800b2f2:	6873      	ldr	r3, [r6, #4]
 800b2f4:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800b2f6:	5b19      	ldrh	r1, [r3, r4]
 800b2f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2fc:	f7fe fb28 	bl	8009950 <ufs_SetClusterMap>
                    file->err = UFS_ERROR_SUM_SECTOR_FAIL;  // Set error for checksum failure
 800b300:	220c      	movs	r2, #12
                    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800b302:	6b33      	ldr	r3, [r6, #48]	@ 0x30
                    file->err = UFS_ERROR_SUM_SECTOR_FAIL;  // Set error for checksum failure
 800b304:	f886 202d 	strb.w	r2, [r6, #45]	@ 0x2d
                    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6a13      	ldr	r3, [r2, #32]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f43f ae24 	beq.w	800af5c <ufs_WriteAppendFile+0x28>
 800b314:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f ae20 	beq.w	800af5c <ufs_WriteAppendFile+0x28>
                        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);
 800b31c:	4798      	blx	r3
 800b31e:	e61d      	b.n	800af5c <ufs_WriteAppendFile+0x28>
        if (bytes_written >= length)
 800b320:	45a3      	cmp	fp, r4
 800b322:	d906      	bls.n	800b332 <ufs_WriteAppendFile+0x3fe>
    for (cluster_index = (current_cluster_count - 1); cluster_index < file->clusters.length; cluster_index++)
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	3301      	adds	r3, #1
 800b328:	b29b      	uxth	r3, r3
 800b32a:	459e      	cmp	lr, r3
 800b32c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b32e:	f63f af1e 	bhi.w	800b16e <ufs_WriteAppendFile+0x23a>
    file->info.comp.size = new_size;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	62b3      	str	r3, [r6, #40]	@ 0x28
    ufs_UpdateItemInfo(file->ufs, file);
 800b336:	4631      	mov	r1, r6
 800b338:	f7fe fb90 	bl	8009a5c <ufs_UpdateItemInfo>
    if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800b33c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	6a13      	ldr	r3, [r2, #32]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f43f ae0b 	beq.w	800af60 <ufs_WriteAppendFile+0x2c>
 800b34a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f43f ae07 	beq.w	800af60 <ufs_WriteAppendFile+0x2c>
        file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);
 800b352:	4798      	blx	r3
 800b354:	e604      	b.n	800af60 <ufs_WriteAppendFile+0x2c>
 800b356:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800b35a:	e7e3      	b.n	800b324 <ufs_WriteAppendFile+0x3f0>
        ufs_SetClusterMap(file->ufs, file->clusters.value[current_cluster_count - 2], file->clusters.value[current_cluster_count - 1]);
 800b35c:	6872      	ldr	r2, [r6, #4]
 800b35e:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800b360:	4413      	add	r3, r2
 800b362:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 800b366:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800b36a:	f7fe faf1 	bl	8009950 <ufs_SetClusterMap>
        file->clusters.length = new_cluster_count;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	8133      	strh	r3, [r6, #8]
 800b372:	e62b      	b.n	800afcc <ufs_WriteAppendFile+0x98>
        file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b374:	f8b7 8028 	ldrh.w	r8, [r7, #40]	@ 0x28
            data_sector[countByte % file->ufs->conf->api->u16numberByteOfSector] = data[bytes_written++];
 800b378:	464c      	mov	r4, r9
 800b37a:	e6df      	b.n	800b13c <ufs_WriteAppendFile+0x208>
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b37c:	4611      	mov	r1, r2
 800b37e:	4628      	mov	r0, r5
 800b380:	f7fd fdf2 	bl	8008f68 <ufs_CheckSum>
        file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b384:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	681b      	ldr	r3, [r3, #0]
            sumSector = ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector);  // Calculate final checksum for the sector
 800b38a:	4681      	mov	r9, r0
        file->ufs->conf->api->WriteSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b38c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	4629      	mov	r1, r5
 800b392:	4640      	mov	r0, r8
 800b394:	4798      	blx	r3
            file->ufs->conf->api->ReadSector(cluster_offset, data_sector, file->ufs->conf->api->u16numberByteOfSector);
 800b396:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4629      	mov	r1, r5
 800b39e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4798      	blx	r3
            if (sumSector != ufs_CheckSum(data_sector, file->ufs->conf->api->u16numberByteOfSector))
 800b3a6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b3b0:	f7fd fdda 	bl	8008f68 <ufs_CheckSum>
 800b3b4:	4548      	cmp	r0, r9
 800b3b6:	f43f aecd 	beq.w	800b154 <ufs_WriteAppendFile+0x220>
                file->info.comp.size += bytes_written;
 800b3ba:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800b3bc:	4423      	add	r3, r4
 800b3be:	e6a9      	b.n	800b114 <ufs_WriteAppendFile+0x1e0>
            ufs_CleanClusters(file->ufs, &file->clusters.value[cluster_index], new_cluster_count - current_cluster_count + 1);
 800b3c0:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
 800b3c4:	1a9a      	subs	r2, r3, r2
 800b3c6:	b292      	uxth	r2, r2
 800b3c8:	f7fd ffd0 	bl	800936c <ufs_CleanClusters>
            file->ufs->conf->api->UnlockMutex((void *)file->ufs->conf->api->mutex);  // Unlock the mutex before returning
 800b3cc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	e9d3 2008 	ldrd	r2, r0, [r3, #32]
 800b3d6:	4790      	blx	r2
            if (file->ufs->conf->api->UnlockMutex && file->ufs->conf->api->mutex)
 800b3d8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	6a13      	ldr	r3, [r2, #32]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d197      	bne.n	800b314 <ufs_WriteAppendFile+0x3e0>
 800b3e4:	e5ba      	b.n	800af5c <ufs_WriteAppendFile+0x28>
    uint32_t bytes_written = 0;                         // Track how many bytes have been written
 800b3e6:	465c      	mov	r4, fp
 800b3e8:	e6a8      	b.n	800b13c <ufs_WriteAppendFile+0x208>
            if (file->ufs->conf->api->LockMutex != NULL && file->ufs->conf->api->mutex)
 800b3ea:	6b33      	ldr	r3, [r6, #48]	@ 0x30
            file->err = UFS_ERROR_ALLOCATE_MEM;  // Handle memory allocation failure
 800b3ec:	2206      	movs	r2, #6
 800b3ee:	e72c      	b.n	800b24a <ufs_WriteAppendFile+0x316>

0800b3f0 <ufs_RenameItem>:
 * @param[in]   strName   New name for the item.
 *
 * @return      ufs_ReturnType  UFS_OK on success, UFS_NOT_OK on failure.
 */
ufs_ReturnType ufs_RenameItem(ufs_Item_Type *item, uint8_t *strName)
{
 800b3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	b08d      	sub	sp, #52	@ 0x34
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	6039      	str	r1, [r7, #0]
 800b3fc:	466b      	mov	r3, sp
 800b3fe:	461e      	mov	r6, r3
    // Check if the UFS structure is valid
	if(item->ufs == NULL || item->err != UFS_ERROR_NONE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <ufs_RenameItem+0x22>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <ufs_RenameItem+0x26>
    {
        return UFS_NOT_OK;
 800b412:	2301      	movs	r3, #1
 800b414:	e0b8      	b.n	800b588 <ufs_RenameItem+0x198>
    }

    ufs_Name_Type nameChecker;  // Temporary storage for the parsed name

    // Allocate memory for sector-level buffer to read item zone data
    uint8_t data_sector[item->ufs->conf->api->u16numberByteOfSector];
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b420:	460b      	mov	r3, r1
 800b422:	3b01      	subs	r3, #1
 800b424:	627b      	str	r3, [r7, #36]	@ 0x24
 800b426:	b28b      	uxth	r3, r1
 800b428:	2200      	movs	r2, #0
 800b42a:	4698      	mov	r8, r3
 800b42c:	4691      	mov	r9, r2
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b43a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b43e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b442:	b28b      	uxth	r3, r1
 800b444:	2200      	movs	r2, #0
 800b446:	461c      	mov	r4, r3
 800b448:	4615      	mov	r5, r2
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	00eb      	lsls	r3, r5, #3
 800b454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b458:	00e2      	lsls	r2, r4, #3
 800b45a:	460b      	mov	r3, r1
 800b45c:	3307      	adds	r3, #7
 800b45e:	08db      	lsrs	r3, r3, #3
 800b460:	00db      	lsls	r3, r3, #3
 800b462:	ebad 0d03 	sub.w	sp, sp, r3
 800b466:	466b      	mov	r3, sp
 800b468:	3300      	adds	r3, #0
 800b46a:	623b      	str	r3, [r7, #32]

    // Parse the new name to check if it is valid
    ufs_ParseNameFile(strName, &nameChecker);
 800b46c:	f107 030c 	add.w	r3, r7, #12
 800b470:	4619      	mov	r1, r3
 800b472:	6838      	ldr	r0, [r7, #0]
 800b474:	f7fd fdcc 	bl	8009010 <ufs_ParseNameFile>

    // Iterate through the item zone to find if the new name already exists
    for (uint16_t countSector = 0; countSector < (item->ufs->ClusterMappingZoneFirstSector - item->ufs->ItemZoneFirstSector); countSector++)
 800b478:	2300      	movs	r3, #0
 800b47a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b47c:	e06c      	b.n	800b558 <ufs_RenameItem+0x168>
    {
        // Read the sector from the item zone
        item->ufs->conf->api->ReadSector(item->ufs->ItemZoneFirstSector + countSector, data_sector, item->ufs->conf->api->u16numberByteOfSector);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b48c:	8811      	ldrh	r1, [r2, #0]
 800b48e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b490:	440a      	add	r2, r1
 800b492:	b290      	uxth	r0, r2
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b498:	6952      	ldr	r2, [r2, #20]
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b49e:	6a39      	ldr	r1, [r7, #32]
 800b4a0:	4798      	blx	r3
        for(uint16_t countByte = 0; countByte < item->ufs->conf->api->u16numberByteOfSector; countByte ++)
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b4a6:	e011      	b.n	800b4cc <ufs_RenameItem+0xdc>
        {
        	if(data_sector[countByte] != 0x00)
 800b4a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b4aa:	6a3a      	ldr	r2, [r7, #32]
 800b4ac:	5cd3      	ldrb	r3, [r2, r3]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <ufs_RenameItem+0xd6>
        	{
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800b4b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b4b4:	6a3a      	ldr	r2, [r7, #32]
 800b4b6:	5cd3      	ldrb	r3, [r2, r3]
 800b4b8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b4ba:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 800b4be:	43db      	mvns	r3, r3
 800b4c0:	b2d9      	uxtb	r1, r3
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	5499      	strb	r1, [r3, r2]
        for(uint16_t countByte = 0; countByte < item->ufs->conf->api->u16numberByteOfSector; countByte ++)
 800b4c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4d6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d3e5      	bcc.n	800b4a8 <ufs_RenameItem+0xb8>
        	}
        }
        // Iterate through the segments in the sector
        for (uint16_t countSegment = 0; countSegment < (item->ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b4e0:	e02d      	b.n	800b53e <ufs_RenameItem+0x14e>
        {
            // Check if the file name and extension match any existing file in the segment
            if (
                UFS_OK == ufs_BytesCmp(nameChecker.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], nameChecker.length) &&
 800b4e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b4e4:	015b      	lsls	r3, r3, #5
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	18d1      	adds	r1, r2, r3
 800b4ea:	7ffb      	ldrb	r3, [r7, #31]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd fd14 	bl	8008f20 <ufs_BytesCmp>
 800b4f8:	4603      	mov	r3, r0
            if (
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d11c      	bne.n	800b538 <ufs_RenameItem+0x148>
                UFS_OK == ufs_BytesCmp(nameChecker.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800b4fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b500:	015b      	lsls	r3, r3, #5
 800b502:	3310      	adds	r3, #16
 800b504:	6a3a      	ldr	r2, [r7, #32]
 800b506:	18d1      	adds	r1, r2, r3
 800b508:	f107 030c 	add.w	r3, r7, #12
 800b50c:	3310      	adds	r3, #16
 800b50e:	2203      	movs	r2, #3
 800b510:	4618      	mov	r0, r3
 800b512:	f7fd fd05 	bl	8008f20 <ufs_BytesCmp>
 800b516:	4603      	mov	r3, r0
                UFS_OK == ufs_BytesCmp(nameChecker.head, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type)], nameChecker.length) &&
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10d      	bne.n	800b538 <ufs_RenameItem+0x148>
                nameChecker.length == data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH + 3]
 800b51c:	7ffa      	ldrb	r2, [r7, #31]
 800b51e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b520:	015b      	lsls	r3, r3, #5
 800b522:	3313      	adds	r3, #19
 800b524:	6a39      	ldr	r1, [r7, #32]
 800b526:	5ccb      	ldrb	r3, [r1, r3]
                UFS_OK == ufs_BytesCmp(nameChecker.extention, &data_sector[countSegment * sizeof(ufs_ItemInfo_Type) + MAX_NAME_LENGTH], 3) &&
 800b528:	429a      	cmp	r2, r3
 800b52a:	d105      	bne.n	800b538 <ufs_RenameItem+0x148>
            )
            {
                // File with the same name exists, return error
                item->err = UFS_ERROR_EXISTED;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2204      	movs	r2, #4
 800b530:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                return UFS_NOT_OK;
 800b534:	2301      	movs	r3, #1
 800b536:	e027      	b.n	800b588 <ufs_RenameItem+0x198>
        for (uint16_t countSegment = 0; countSegment < (item->ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type)); countSegment++)
 800b538:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b53a:	3301      	adds	r3, #1
 800b53c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b54e:	429a      	cmp	r2, r3
 800b550:	d3c7      	bcc.n	800b4e2 <ufs_RenameItem+0xf2>
    for (uint16_t countSector = 0; countSector < (item->ufs->ClusterMappingZoneFirstSector - item->ufs->ItemZoneFirstSector); countSector++)
 800b552:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b554:	3301      	adds	r3, #1
 800b556:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b558:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b55e:	885b      	ldrh	r3, [r3, #2]
 800b560:	4619      	mov	r1, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	1acb      	subs	r3, r1, r3
 800b56a:	429a      	cmp	r2, r3
 800b56c:	db87      	blt.n	800b47e <ufs_RenameItem+0x8e>
            }
        }
    }

    // If no existing file with the same name, update the item's name
    ufs_ParseNameFile(strName, &item->info.comp.name);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	330c      	adds	r3, #12
 800b572:	4619      	mov	r1, r3
 800b574:	6838      	ldr	r0, [r7, #0]
 800b576:	f7fd fd4b 	bl	8009010 <ufs_ParseNameFile>
    ufs_UpdateItemInfo(item->ufs, item);  // Update item information in the system
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fa6b 	bl	8009a5c <ufs_UpdateItemInfo>

    // Return success
    return UFS_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	46b5      	mov	sp, r6
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3734      	adds	r7, #52	@ 0x34
 800b58e:	46bd      	mov	sp, r7
 800b590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b594 <ufs_AddPathPart>:
 *
 * @param[in]  head_ref   Reference to the head of the linked list.
 * @param[in]  part       Part of the path to add to the list.
 */
void ufs_AddPathPart(ufs_PathNode **head_ref, const char *part)
{
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
    ufs_PathNode *new_node = (ufs_PathNode *)malloc(sizeof(ufs_PathNode));
 800b59e:	20cc      	movs	r0, #204	@ 0xcc
 800b5a0:	f004 f898 	bl	800f6d4 <malloc>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	60bb      	str	r3, [r7, #8]
    if (new_node == NULL)
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d02e      	beq.n	800b60c <ufs_AddPathPart+0x78>
    {
    	return;
    }

    strncpy((char *)new_node->part, part, strlen(part));
 800b5ae:	68bc      	ldr	r4, [r7, #8]
 800b5b0:	6838      	ldr	r0, [r7, #0]
 800b5b2:	f7f4 fe0d 	bl	80001d0 <strlen>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f004 fac8 	bl	800fb52 <strncpy>
    new_node->part[strlen(part)] = '\0'; // Null-terminate the string
 800b5c2:	6838      	ldr	r0, [r7, #0]
 800b5c4:	f7f4 fe04 	bl	80001d0 <strlen>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	5499      	strb	r1, [r3, r2]
    new_node->next = NULL;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    // If list is empty, new node becomes the head
    if (*head_ref == NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d103      	bne.n	800b5e8 <ufs_AddPathPart+0x54>
    {
        *head_ref = new_node;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	e012      	b.n	800b60e <ufs_AddPathPart+0x7a>
    }
    else
    {
        // Traverse to the last node and add the new node at the end
        ufs_PathNode *current = *head_ref;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 800b5ee:	e003      	b.n	800b5f8 <ufs_AddPathPart+0x64>
        {
            current = current->next;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b5f6:	60fb      	str	r3, [r7, #12]
        while (current->next != NULL)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f6      	bne.n	800b5f0 <ufs_AddPathPart+0x5c>
        }
        current->next = new_node;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800b60a:	e000      	b.n	800b60e <ufs_AddPathPart+0x7a>
    	return;
 800b60c:	bf00      	nop
    }
}
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	bd90      	pop	{r4, r7, pc}

0800b614 <ufs_FreePathList>:
 * @brief      Frees the linked list from memory.
 *
 * @param[in]  head   Pointer to the head of the linked list.
 */
void ufs_FreePathList(ufs_PathNode *head)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
    ufs_PathNode *temp;
    while (head != NULL)
 800b61c:	e008      	b.n	800b630 <ufs_FreePathList+0x1c>
    {
        temp = head;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	60fb      	str	r3, [r7, #12]
        head = head->next;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b628:	607b      	str	r3, [r7, #4]
        free(temp);
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f004 f85a 	bl	800f6e4 <free>
    while (head != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1f3      	bne.n	800b61e <ufs_FreePathList+0xa>
    }
}
 800b636:	bf00      	nop
 800b638:	bf00      	nop
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <ufs_ParsePath>:
 *
 * @param[in]  path     The path string to be parsed (e.g., "/user/chungnt").
 * @param[out] head     Pointer to the head of the linked list containing path parts.
 */
ufs_ReturnType ufs_ParsePath(const uint8_t *path, ufs_PathNode **head, int max_parts)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b0c6      	sub	sp, #280	@ 0x118
 800b644:	af00      	add	r7, sp, #0
 800b646:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b64a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b64e:	6018      	str	r0, [r3, #0]
 800b650:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b654:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b658:	6019      	str	r1, [r3, #0]
 800b65a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b65e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b662:	601a      	str	r2, [r3, #0]
    // Create a copy of the path to prevent modifying the original string
    char path_copy[0xFF];
    strncpy(path_copy, (char *)path, sizeof(path_copy));
 800b664:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b668:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b66c:	f107 0010 	add.w	r0, r7, #16
 800b670:	22ff      	movs	r2, #255	@ 0xff
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	f004 fa6d 	bl	800fb52 <strncpy>
    path_copy[sizeof(path_copy) - 1] = '\0'; // Ensure null-termination
 800b678:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b680:	2200      	movs	r2, #0
 800b682:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    // Tokenize the path based on '/'
    char *token = strtok(path_copy, "/");
 800b686:	f107 0310 	add.w	r3, r7, #16
 800b68a:	491e      	ldr	r1, [pc, #120]	@ (800b704 <ufs_ParsePath+0xc4>)
 800b68c:	4618      	mov	r0, r3
 800b68e:	f004 fa73 	bl	800fb78 <strtok>
 800b692:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    int part_count = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    while (token != NULL)
 800b69c:	e027      	b.n	800b6ee <ufs_ParsePath+0xae>
    {
        // Check if part count exceeds the max limit
        if (part_count >= max_parts)
 800b69e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b6a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b6a6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	db0a      	blt.n	800b6c6 <ufs_ParsePath+0x86>
        {
            // Free any previously allocated nodes
            ufs_FreePathList(*head);
 800b6b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b6b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff ffa9 	bl	800b614 <ufs_FreePathList>
            return UFS_NOT_OK;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e018      	b.n	800b6f8 <ufs_ParsePath+0xb8>
        }

        // Add each part to the linked list
        ufs_AddPathPart(head, token);
 800b6c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b6ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b6ce:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	f7ff ff5e 	bl	800b594 <ufs_AddPathPart>
        part_count++;
 800b6d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b6dc:	3301      	adds	r3, #1
 800b6de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        token = strtok(NULL, "/");
 800b6e2:	4908      	ldr	r1, [pc, #32]	@ (800b704 <ufs_ParsePath+0xc4>)
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f004 fa47 	bl	800fb78 <strtok>
 800b6ea:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    while (token != NULL)
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1d3      	bne.n	800b69e <ufs_ParsePath+0x5e>
    }

    return UFS_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	08010a00 	.word	0x08010a00

0800b708 <ufs_FindFreeSlot>:
 * @param[out] slotID  Pointer to store the location of the available slot (sector_id and position).
 *
 * @return  ufs_ReturnType   UFS_OK if an available slot is found, UFS_NOT_OK if not.
 */
ufs_ReturnType ufs_FindFreeSlot(UFS *ufs, ufs_Location_Type *slotID)
{
 800b708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b70c:	b089      	sub	sp, #36	@ 0x24
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
 800b714:	466b      	mov	r3, sp
 800b716:	461e      	mov	r6, r3
    // Allocate memory to hold data for one sector
    uint8_t data_sector[ufs->conf->api->u16numberByteOfSector];
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 800b720:	460b      	mov	r3, r1
 800b722:	3b01      	subs	r3, #1
 800b724:	617b      	str	r3, [r7, #20]
 800b726:	b28b      	uxth	r3, r1
 800b728:	2200      	movs	r2, #0
 800b72a:	4698      	mov	r8, r3
 800b72c:	4691      	mov	r9, r2
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	f04f 0300 	mov.w	r3, #0
 800b736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b73a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b73e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b742:	b28b      	uxth	r3, r1
 800b744:	2200      	movs	r2, #0
 800b746:	461c      	mov	r4, r3
 800b748:	4615      	mov	r5, r2
 800b74a:	f04f 0200 	mov.w	r2, #0
 800b74e:	f04f 0300 	mov.w	r3, #0
 800b752:	00eb      	lsls	r3, r5, #3
 800b754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b758:	00e2      	lsls	r2, r4, #3
 800b75a:	460b      	mov	r3, r1
 800b75c:	3307      	adds	r3, #7
 800b75e:	08db      	lsrs	r3, r3, #3
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	ebad 0d03 	sub.w	sp, sp, r3
 800b766:	466b      	mov	r3, sp
 800b768:	3300      	adds	r3, #0
 800b76a:	613b      	str	r3, [r7, #16]

    // Calculate the total number of sectors in the item zone
    uint16_t totalSectors = ufs->ClusterMappingZoneFirstSector - ufs->ItemZoneFirstSector;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	885a      	ldrh	r2, [r3, #2]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	81fb      	strh	r3, [r7, #14]
    uint16_t itemsPerSector = ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b780:	095b      	lsrs	r3, r3, #5
 800b782:	81bb      	strh	r3, [r7, #12]

    // Iterate through each sector to locate a free slot
    for (uint16_t sector = 0; sector < totalSectors; sector++)
 800b784:	2300      	movs	r3, #0
 800b786:	83fb      	strh	r3, [r7, #30]
 800b788:	e047      	b.n	800b81a <ufs_FindFreeSlot+0x112>
    {
        // Read data from the current sector
        ufs->conf->api->ReadSector(ufs->ItemZoneFirstSector + sector, data_sector, ufs->conf->api->u16numberByteOfSector);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	8811      	ldrh	r1, [r2, #0]
 800b796:	8bfa      	ldrh	r2, [r7, #30]
 800b798:	440a      	add	r2, r1
 800b79a:	b290      	uxth	r0, r2
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6952      	ldr	r2, [r2, #20]
 800b7a0:	6812      	ldr	r2, [r2, #0]
 800b7a2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b7a4:	6939      	ldr	r1, [r7, #16]
 800b7a6:	4798      	blx	r3

        // Decode Header
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	83bb      	strh	r3, [r7, #28]
 800b7ac:	e011      	b.n	800b7d2 <ufs_FindFreeSlot+0xca>
        {
        	if(data_sector[countByte] != 0x00)
 800b7ae:	8bbb      	ldrh	r3, [r7, #28]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	5cd3      	ldrb	r3, [r2, r3]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <ufs_FindFreeSlot+0xc4>
        	{
        		data_sector[countByte] ^= BYTE_CODEC_DEFAULT;
 800b7b8:	8bbb      	ldrh	r3, [r7, #28]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	5cd3      	ldrb	r3, [r2, r3]
 800b7be:	8bba      	ldrh	r2, [r7, #28]
 800b7c0:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 800b7c4:	43db      	mvns	r3, r3
 800b7c6:	b2d9      	uxtb	r1, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	5499      	strb	r1, [r3, r2]
        for(uint16_t countByte = 0; countByte < ufs->conf->api->u16numberByteOfSector; countByte ++)
 800b7cc:	8bbb      	ldrh	r3, [r7, #28]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	83bb      	strh	r3, [r7, #28]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7da:	8bba      	ldrh	r2, [r7, #28]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d3e6      	bcc.n	800b7ae <ufs_FindFreeSlot+0xa6>
        	}
        }

        // Traverse each segment within the sector to find an available slot
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	837b      	strh	r3, [r7, #26]
 800b7e4:	e012      	b.n	800b80c <ufs_FindFreeSlot+0x104>
        {
            uint8_t itemStatus = data_sector[segment * sizeof(ufs_ItemInfo_Type)];
 800b7e6:	8b7b      	ldrh	r3, [r7, #26]
 800b7e8:	015b      	lsls	r3, r3, #5
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	5cd3      	ldrb	r3, [r2, r3]
 800b7ee:	72fb      	strb	r3, [r7, #11]

            // Check if the current item slot is free
            if (itemStatus == UFS_ITEM_FREE)
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d107      	bne.n	800b806 <ufs_FindFreeSlot+0xfe>
            {
                // Save the available slot's location in `slotID`
                slotID->sector_id = sector;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	8bfa      	ldrh	r2, [r7, #30]
 800b7fa:	801a      	strh	r2, [r3, #0]
                slotID->position = segment;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	8b7a      	ldrh	r2, [r7, #26]
 800b800:	805a      	strh	r2, [r3, #2]

                return UFS_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	e00e      	b.n	800b824 <ufs_FindFreeSlot+0x11c>
        for (uint16_t segment = 0; segment < itemsPerSector; segment++)
 800b806:	8b7b      	ldrh	r3, [r7, #26]
 800b808:	3301      	adds	r3, #1
 800b80a:	837b      	strh	r3, [r7, #26]
 800b80c:	8b7a      	ldrh	r2, [r7, #26]
 800b80e:	89bb      	ldrh	r3, [r7, #12]
 800b810:	429a      	cmp	r2, r3
 800b812:	d3e8      	bcc.n	800b7e6 <ufs_FindFreeSlot+0xde>
    for (uint16_t sector = 0; sector < totalSectors; sector++)
 800b814:	8bfb      	ldrh	r3, [r7, #30]
 800b816:	3301      	adds	r3, #1
 800b818:	83fb      	strh	r3, [r7, #30]
 800b81a:	8bfa      	ldrh	r2, [r7, #30]
 800b81c:	89fb      	ldrh	r3, [r7, #14]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d3b3      	bcc.n	800b78a <ufs_FindFreeSlot+0x82>
            }
        }
    }

    return UFS_NOT_OK; // No available slot found
 800b822:	2301      	movs	r3, #1
 800b824:	46b5      	mov	sp, r6
}
 800b826:	4618      	mov	r0, r3
 800b828:	3724      	adds	r7, #36	@ 0x24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b830 <ufs_Mount>:
 * @param[in]  path   Pointer to the path string to be mounted.
 *
 * @return  ufs_ReturnType   UFS_OK if the path is successfully mounted, UFS_NOT_OK if an error occurs.
 */
ufs_ReturnType ufs_Mount(UFS *ufs, const uint8_t *path)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b096      	sub	sp, #88	@ 0x58
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
    ufs_PathNode *path_list = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    ufs_Path_Type path_backup;

    // Parse the path into individual parts, stored as a linked list in `path_list`
    if(UFS_NOT_OK == ufs_ParsePath((const uint8_t *)path, &path_list, MAX_PATH_PARTS))
 800b83e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800b842:	2205      	movs	r2, #5
 800b844:	4619      	mov	r1, r3
 800b846:	6838      	ldr	r0, [r7, #0]
 800b848:	f7ff fefa 	bl	800b640 <ufs_ParsePath>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d105      	bne.n	800b85e <ufs_Mount+0x2e>
    {
    	ufs_FreePathList(path_list);
 800b852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fedd 	bl	800b614 <ufs_FreePathList>
    	return UFS_NOT_OK;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e0e4      	b.n	800ba28 <ufs_Mount+0x1f8>
    }

    // Lock mutex for thread safety
    if (ufs->conf->api->LockMutex && ufs->conf->api->mutex)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00f      	beq.n	800b88a <ufs_Mount+0x5a>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b872:	2b00      	cmp	r3, #0
 800b874:	d009      	beq.n	800b88a <ufs_Mount+0x5a>
    {
        ufs->conf->api->LockMutex((void *)ufs->conf->api->mutex);  // Lock the mutex
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	6952      	ldr	r2, [r2, #20]
 800b882:	6812      	ldr	r2, [r2, #0]
 800b884:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b886:	4610      	mov	r0, r2
 800b888:	4798      	blx	r3
    }

    ufs_PathNode *current = path_list;
 800b88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b88c:	657b      	str	r3, [r7, #84]	@ 0x54
    ufs_Item_Type item;
    ufs_ReturnType result;

    path_backup.id = ufs->path.id;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8b9b      	ldrh	r3, [r3, #28]
 800b892:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    path_backup.name = (uint8_t *)ufs->path.name;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	64bb      	str	r3, [r7, #72]	@ 0x48

    ufs->path.id = 0;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	839a      	strh	r2, [r3, #28]
    ufs->path.name = (uint8_t *)"/";
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a62      	ldr	r2, [pc, #392]	@ (800ba30 <ufs_Mount+0x200>)
 800b8a6:	621a      	str	r2, [r3, #32]

    memset((uint8_t *)&item, 0x00, sizeof(ufs_Item_Type));
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	2238      	movs	r2, #56	@ 0x38
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f004 f946 	bl	800fb42 <memset>
    // Traverse each part of the path
    while (current != NULL)
 800b8b6:	e095      	b.n	800b9e4 <ufs_Mount+0x1b4>
    {
        // Check if the current directory exists in the UFS
        result = ufs_CheckExistence(ufs, (uint8_t *)current->part, &item);
 800b8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ba:	f107 020c 	add.w	r2, r7, #12
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7fe ff3f 	bl	800a744 <ufs_CheckExistence>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if (result != UFS_OK)
 800b8cc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d074      	beq.n	800b9be <ufs_Mount+0x18e>
        {
            // If the directory does not exist, find an available slotID for the new directory
            ufs_Location_Type slotID;
            result = ufs_FindFreeSlot(ufs, &slotID);  // Assuming `ufs_FindFreeSlot` is implemented
 800b8d4:	f107 0308 	add.w	r3, r7, #8
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ff14 	bl	800b708 <ufs_FindFreeSlot>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

            if (result != UFS_OK)
 800b8e6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d022      	beq.n	800b934 <ufs_Mount+0x104>
            {
            	ufs->path.id = path_backup.id;
 800b8ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	839a      	strh	r2, [r3, #28]
            	ufs->path.name = path_backup.name;
 800b8f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	621a      	str	r2, [r3, #32]
                ufs_FreePathList(path_list);  // Free path list to prevent memory leaks
 800b8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff fe88 	bl	800b614 <ufs_FreePathList>

                // Unlock the mutex after the file operation
                if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00f      	beq.n	800b930 <ufs_Mount+0x100>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <ufs_Mount+0x100>
                {
                    ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	695b      	ldr	r3, [r3, #20]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6952      	ldr	r2, [r2, #20]
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
                }

                return UFS_NOT_OK;  // Return error if no slot is available
 800b930:	2301      	movs	r3, #1
 800b932:	e079      	b.n	800ba28 <ufs_Mount+0x1f8>
            }

            // Initialize new directory with `slotID` and set necessary attributes
            item.location = slotID;
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	60fb      	str	r3, [r7, #12]
            item.info.comp.size = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	637b      	str	r3, [r7, #52]	@ 0x34
            item.info.comp.parent = ufs->path.id;  // Assign the parent ID to the new directory
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8b9b      	ldrh	r3, [r3, #28]
 800b940:	863b      	strh	r3, [r7, #48]	@ 0x30
            item.err    = UFS_ERROR_NONE;
 800b942:	2300      	movs	r3, #0
 800b944:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            item.status = UFS_FOLDER_EXIST;
 800b948:	2304      	movs	r3, #4
 800b94a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

            // Copy the directory name to the item structure
            strncpy((char *)item.info.comp.name.head, (char *)current->part, MAX_NAME_LENGTH);
 800b94e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	330c      	adds	r3, #12
 800b956:	2210      	movs	r2, #16
 800b958:	4618      	mov	r0, r3
 800b95a:	f004 f8fa 	bl	800fb52 <strncpy>

            // Update the UFS with the new directory information
            result = ufs_UpdateItemInfo(ufs, &item);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7fe f879 	bl	8009a5c <ufs_UpdateItemInfo>
 800b96a:	4603      	mov	r3, r0
 800b96c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (result != UFS_OK)
 800b970:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800b974:	2b00      	cmp	r3, #0
 800b976:	d022      	beq.n	800b9be <ufs_Mount+0x18e>
            {
            	ufs->path.id = path_backup.id;
 800b978:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	839a      	strh	r2, [r3, #28]
            	ufs->path.name = path_backup.name;
 800b980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	621a      	str	r2, [r3, #32]
                ufs_FreePathList(path_list);  // Free path list on failure
 800b986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fe43 	bl	800b614 <ufs_FreePathList>

                // Unlock the mutex after the file operation
                if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <ufs_Mount+0x18a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d009      	beq.n	800b9ba <ufs_Mount+0x18a>
                {
                    ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	695b      	ldr	r3, [r3, #20]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6952      	ldr	r2, [r2, #20]
 800b9b2:	6812      	ldr	r2, [r2, #0]
 800b9b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4798      	blx	r3
                }
                return UFS_NOT_OK;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e034      	b.n	800ba28 <ufs_Mount+0x1f8>
            }
        }

        // Update the current path ID in UFS to navigate through subdirectories
        ufs->path.id = (item.location.sector_id * (ufs->conf->api->u16numberByteOfSector / sizeof(ufs_ItemInfo_Type))) + item.location.position;
 800b9be:	89ba      	ldrh	r2, [r7, #12]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9c8:	095b      	lsrs	r3, r3, #5
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	fb12 f303 	smulbb	r3, r2, r3
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	89fb      	ldrh	r3, [r7, #14]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	839a      	strh	r2, [r3, #28]

        // Move to the next directory in the path
        current = current->next;
 800b9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b9e2:	657b      	str	r3, [r7, #84]	@ 0x54
    while (current != NULL)
 800b9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f47f af66 	bne.w	800b8b8 <ufs_Mount+0x88>
    }

    // Free the path list and update the UFS path name
    ufs_FreePathList(path_list);
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fe10 	bl	800b614 <ufs_FreePathList>
    ufs->path.name = (uint8_t *)path;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	621a      	str	r2, [r3, #32]

    // Unlock the mutex after the file operation
    if (ufs->conf->api->UnlockMutex && ufs->conf->api->mutex)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00f      	beq.n	800ba26 <ufs_Mount+0x1f6>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d009      	beq.n	800ba26 <ufs_Mount+0x1f6>
    {
        ufs->conf->api->UnlockMutex((void *)ufs->conf->api->mutex);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	6952      	ldr	r2, [r2, #20]
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ba22:	4610      	mov	r0, r2
 800ba24:	4798      	blx	r3
    }
    return UFS_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3758      	adds	r7, #88	@ 0x58
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	08010a00 	.word	0x08010a00

0800ba34 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]


	UNUSED(cfgidx);
	  USBD_CDC_HandleTypeDef *hcdc;

	  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ba40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ba44:	f003 fde6 	bl	800f614 <USBD_static_malloc>
 800ba48:	60f8      	str	r0, [r7, #12]

	  if (hcdc == NULL)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d109      	bne.n	800ba64 <USBD_CDC_Init+0x30>
	  {
	    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32b0      	adds	r2, #176	@ 0xb0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    return (uint8_t)USBD_EMEM;
 800ba60:	2302      	movs	r3, #2
 800ba62:	e0d4      	b.n	800bc0e <USBD_CDC_Init+0x1da>
	  }

	  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ba64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ba68:	2100      	movs	r1, #0
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f004 f869 	bl	800fb42 <memset>

	  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	32b0      	adds	r2, #176	@ 0xb0
 800ba7a:	68f9      	ldr	r1, [r7, #12]
 800ba7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	32b0      	adds	r2, #176	@ 0xb0
 800ba8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc


	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7c1b      	ldrb	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d138      	bne.n	800bb0e <USBD_CDC_Init+0xda>
	  {
	    /* Open EP IN */
	    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba9c:	4b5e      	ldr	r3, [pc, #376]	@ (800bc18 <USBD_CDC_Init+0x1e4>)
 800ba9e:	7819      	ldrb	r1, [r3, #0]
 800baa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800baa4:	2202      	movs	r2, #2
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f003 fc91 	bl	800f3ce <USBD_LL_OpenEP>
	                         CDC_DATA_HS_IN_PACKET_SIZE);

	    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800baac:	4b5a      	ldr	r3, [pc, #360]	@ (800bc18 <USBD_CDC_Init+0x1e4>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 020f 	and.w	r2, r3, #15
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	440b      	add	r3, r1
 800bac0:	3324      	adds	r3, #36	@ 0x24
 800bac2:	2201      	movs	r2, #1
 800bac4:	801a      	strh	r2, [r3, #0]

	    /* Open EP OUT */
	    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bac6:	4b55      	ldr	r3, [pc, #340]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bac8:	7819      	ldrb	r1, [r3, #0]
 800baca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bace:	2202      	movs	r2, #2
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f003 fc7c 	bl	800f3ce <USBD_LL_OpenEP>
	                         CDC_DATA_HS_OUT_PACKET_SIZE);

	    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bad6:	4b51      	ldr	r3, [pc, #324]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	f003 020f 	and.w	r2, r3, #15
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	440b      	add	r3, r1
 800baea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800baee:	2201      	movs	r2, #1
 800baf0:	801a      	strh	r2, [r3, #0]

	    /* Set bInterval for CDC CMD Endpoint */
	    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800baf2:	4b4b      	ldr	r3, [pc, #300]	@ (800bc20 <USBD_CDC_Init+0x1ec>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	f003 020f 	and.w	r2, r3, #15
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	3326      	adds	r3, #38	@ 0x26
 800bb08:	2210      	movs	r2, #16
 800bb0a:	801a      	strh	r2, [r3, #0]
 800bb0c:	e035      	b.n	800bb7a <USBD_CDC_Init+0x146>
	  }
	  else
	  {
	    /* Open EP IN */
	    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb0e:	4b42      	ldr	r3, [pc, #264]	@ (800bc18 <USBD_CDC_Init+0x1e4>)
 800bb10:	7819      	ldrb	r1, [r3, #0]
 800bb12:	2340      	movs	r3, #64	@ 0x40
 800bb14:	2202      	movs	r2, #2
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f003 fc59 	bl	800f3ce <USBD_LL_OpenEP>
	                         CDC_DATA_FS_IN_PACKET_SIZE);

	    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb1c:	4b3e      	ldr	r3, [pc, #248]	@ (800bc18 <USBD_CDC_Init+0x1e4>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 020f 	and.w	r2, r3, #15
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	440b      	add	r3, r1
 800bb30:	3324      	adds	r3, #36	@ 0x24
 800bb32:	2201      	movs	r2, #1
 800bb34:	801a      	strh	r2, [r3, #0]

	    /* Open EP OUT */
	    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb36:	4b39      	ldr	r3, [pc, #228]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bb38:	7819      	ldrb	r1, [r3, #0]
 800bb3a:	2340      	movs	r3, #64	@ 0x40
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f003 fc45 	bl	800f3ce <USBD_LL_OpenEP>
	                         CDC_DATA_FS_OUT_PACKET_SIZE);

	    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb44:	4b35      	ldr	r3, [pc, #212]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	f003 020f 	and.w	r2, r3, #15
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	440b      	add	r3, r1
 800bb58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	801a      	strh	r2, [r3, #0]

	    /* Set bInterval for CMD Endpoint */
	    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bb60:	4b2f      	ldr	r3, [pc, #188]	@ (800bc20 <USBD_CDC_Init+0x1ec>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	f003 020f 	and.w	r2, r3, #15
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	440b      	add	r3, r1
 800bb74:	3326      	adds	r3, #38	@ 0x26
 800bb76:	2210      	movs	r2, #16
 800bb78:	801a      	strh	r2, [r3, #0]
	  }

	  /* Open Command IN EP */
	  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bb7a:	4b29      	ldr	r3, [pc, #164]	@ (800bc20 <USBD_CDC_Init+0x1ec>)
 800bb7c:	7819      	ldrb	r1, [r3, #0]
 800bb7e:	2308      	movs	r3, #8
 800bb80:	2203      	movs	r2, #3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f003 fc23 	bl	800f3ce <USBD_LL_OpenEP>
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bb88:	4b25      	ldr	r3, [pc, #148]	@ (800bc20 <USBD_CDC_Init+0x1ec>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 020f 	and.w	r2, r3, #15
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	440b      	add	r3, r1
 800bb9c:	3324      	adds	r3, #36	@ 0x24
 800bb9e:	2201      	movs	r2, #1
 800bba0:	801a      	strh	r2, [r3, #0]

	  hcdc->RxBuffer = NULL;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	  /* Init  physical Interface components */
	  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	33b0      	adds	r3, #176	@ 0xb0
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4798      	blx	r3

	  /* Init Xfer states */
	  hcdc->TxState = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	  hcdc->RxState = 0U;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	  if (hcdc->RxBuffer == NULL)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <USBD_CDC_Init+0x1a8>
	  {
	    return (uint8_t)USBD_EMEM;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e018      	b.n	800bc0e <USBD_CDC_Init+0x1da>
	  }

	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7c1b      	ldrb	r3, [r3, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <USBD_CDC_Init+0x1c6>
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bbe6:	7819      	ldrb	r1, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bbee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f003 fcda 	bl	800f5ac <USBD_LL_PrepareReceive>
 800bbf8:	e008      	b.n	800bc0c <USBD_CDC_Init+0x1d8>
	                                 CDC_DATA_HS_OUT_PACKET_SIZE);
	  }
	  else
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bbfa:	4b08      	ldr	r3, [pc, #32]	@ (800bc1c <USBD_CDC_Init+0x1e8>)
 800bbfc:	7819      	ldrb	r1, [r3, #0]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc04:	2340      	movs	r3, #64	@ 0x40
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f003 fcd0 	bl	800f5ac <USBD_LL_PrepareReceive>
	                                 CDC_DATA_FS_OUT_PACKET_SIZE);
	  }

	  return (uint8_t)USBD_OK;
 800bc0c:	2300      	movs	r3, #0
//    }
//
//
//  }
//  return ret;
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	200000e8 	.word	0x200000e8
 800bc1c:	200000e9 	.word	0x200000e9
 800bc20:	200000ea 	.word	0x200000ea

0800bc24 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]




	  /* Close EP IN */
	  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bc30:	4b3a      	ldr	r3, [pc, #232]	@ (800bd1c <USBD_CDC_DeInit+0xf8>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f003 fbef 	bl	800f41a <USBD_LL_CloseEP>
	  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bc3c:	4b37      	ldr	r3, [pc, #220]	@ (800bd1c <USBD_CDC_DeInit+0xf8>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f003 020f 	and.w	r2, r3, #15
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	440b      	add	r3, r1
 800bc50:	3324      	adds	r3, #36	@ 0x24
 800bc52:	2200      	movs	r2, #0
 800bc54:	801a      	strh	r2, [r3, #0]

	  /* Close EP OUT */
	  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bc56:	4b32      	ldr	r3, [pc, #200]	@ (800bd20 <USBD_CDC_DeInit+0xfc>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f003 fbdc 	bl	800f41a <USBD_LL_CloseEP>
	  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bc62:	4b2f      	ldr	r3, [pc, #188]	@ (800bd20 <USBD_CDC_DeInit+0xfc>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	f003 020f 	and.w	r2, r3, #15
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	801a      	strh	r2, [r3, #0]

	  /* Close Command IN EP */
	  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bc7e:	4b29      	ldr	r3, [pc, #164]	@ (800bd24 <USBD_CDC_DeInit+0x100>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f003 fbc8 	bl	800f41a <USBD_LL_CloseEP>
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bc8a:	4b26      	ldr	r3, [pc, #152]	@ (800bd24 <USBD_CDC_DeInit+0x100>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 020f 	and.w	r2, r3, #15
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3324      	adds	r3, #36	@ 0x24
 800bca0:	2200      	movs	r2, #0
 800bca2:	801a      	strh	r2, [r3, #0]
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bca4:	4b1f      	ldr	r3, [pc, #124]	@ (800bd24 <USBD_CDC_DeInit+0x100>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	f003 020f 	and.w	r2, r3, #15
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	3326      	adds	r3, #38	@ 0x26
 800bcba:	2200      	movs	r2, #0
 800bcbc:	801a      	strh	r2, [r3, #0]

	  /* DeInit  physical Interface components */
	  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	32b0      	adds	r2, #176	@ 0xb0
 800bcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01f      	beq.n	800bd10 <USBD_CDC_DeInit+0xec>
	  {
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	33b0      	adds	r3, #176	@ 0xb0
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	4798      	blx	r3
	    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	32b0      	adds	r2, #176	@ 0xb0
 800bcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f003 fc9c 	bl	800f630 <USBD_static_free>
	    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	32b0      	adds	r2, #176	@ 0xb0
 800bd02:	2100      	movs	r1, #0
 800bd04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    pdev->pClassData = NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
	  }

	  return (uint8_t)USBD_OK;
 800bd10:	2300      	movs	r3, #0
//    USBD_free(pdev->pClassData);
//    pdev->pClassData = NULL;
//  }
//
//  return ret;
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200000e8 	.word	0x200000e8
 800bd20:	200000e9 	.word	0x200000e9
 800bd24:	200000ea 	.word	0x200000ea

0800bd28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]


	 USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	32b0      	adds	r2, #176	@ 0xb0
 800bd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd40:	613b      	str	r3, [r7, #16]
	  uint16_t len;
	  uint8_t ifalt = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	737b      	strb	r3, [r7, #13]
	  uint16_t status_info = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	817b      	strh	r3, [r7, #10]
	  USBD_StatusTypeDef ret = USBD_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	75fb      	strb	r3, [r7, #23]

	  if (hcdc == NULL)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_CDC_Setup+0x30>
	  {
	    return (uint8_t)USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e0bf      	b.n	800bed8 <USBD_CDC_Setup+0x1b0>
	  }

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d050      	beq.n	800be06 <USBD_CDC_Setup+0xde>
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	f040 80af 	bne.w	800bec8 <USBD_CDC_Setup+0x1a0>
	  {
	    case USB_REQ_TYPE_CLASS:
	      if (req->wLength != 0U)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	88db      	ldrh	r3, [r3, #6]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d03a      	beq.n	800bde8 <USBD_CDC_Setup+0xc0>
	      {
	        if ((req->bmRequest & 0x80U) != 0U)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	b25b      	sxtb	r3, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da1b      	bge.n	800bdb4 <USBD_CDC_Setup+0x8c>
	        {
	          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	33b0      	adds	r3, #176	@ 0xb0
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	7850      	ldrb	r0, [r2, #1]
	                                                                           (uint8_t *)hcdc->data,
 800bd92:	6939      	ldr	r1, [r7, #16]
	          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	88d2      	ldrh	r2, [r2, #6]
 800bd98:	4798      	blx	r3
	                                                                           req->wLength);

	          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	88db      	ldrh	r3, [r3, #6]
 800bd9e:	2b07      	cmp	r3, #7
 800bda0:	bf28      	it	cs
 800bda2:	2307      	movcs	r3, #7
 800bda4:	81fb      	strh	r3, [r7, #14]
	          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	89fa      	ldrh	r2, [r7, #14]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 fd19 	bl	800d7e4 <USBD_CtlSendData>
	      else
	      {
	        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
	                                                                         (uint8_t *)req, 0U);
	      }
	      break;
 800bdb2:	e090      	b.n	800bed6 <USBD_CDC_Setup+0x1ae>
	          hcdc->CmdOpCode = req->bRequest;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	785a      	ldrb	r2, [r3, #1]
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	88db      	ldrh	r3, [r3, #6]
 800bdc2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bdc4:	d803      	bhi.n	800bdce <USBD_CDC_Setup+0xa6>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	88db      	ldrh	r3, [r3, #6]
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	e000      	b.n	800bdd0 <USBD_CDC_Setup+0xa8>
 800bdce:	2240      	movs	r2, #64	@ 0x40
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bdd6:	6939      	ldr	r1, [r7, #16]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bdde:	461a      	mov	r2, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 fd2b 	bl	800d83c <USBD_CtlPrepareRx>
	      break;
 800bde6:	e076      	b.n	800bed6 <USBD_CDC_Setup+0x1ae>
	        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	33b0      	adds	r3, #176	@ 0xb0
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	7850      	ldrb	r0, [r2, #1]
 800bdfe:	2200      	movs	r2, #0
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	4798      	blx	r3
	      break;
 800be04:	e067      	b.n	800bed6 <USBD_CDC_Setup+0x1ae>

	    case USB_REQ_TYPE_STANDARD:
	      switch (req->bRequest)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	2b0b      	cmp	r3, #11
 800be0c:	d851      	bhi.n	800beb2 <USBD_CDC_Setup+0x18a>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <USBD_CDC_Setup+0xec>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be45 	.word	0x0800be45
 800be18:	0800bec1 	.word	0x0800bec1
 800be1c:	0800beb3 	.word	0x0800beb3
 800be20:	0800beb3 	.word	0x0800beb3
 800be24:	0800beb3 	.word	0x0800beb3
 800be28:	0800beb3 	.word	0x0800beb3
 800be2c:	0800beb3 	.word	0x0800beb3
 800be30:	0800beb3 	.word	0x0800beb3
 800be34:	0800beb3 	.word	0x0800beb3
 800be38:	0800beb3 	.word	0x0800beb3
 800be3c:	0800be6f 	.word	0x0800be6f
 800be40:	0800be99 	.word	0x0800be99
	      {
	        case USB_REQ_GET_STATUS:
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d107      	bne.n	800be60 <USBD_CDC_Setup+0x138>
	          {
	            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be50:	f107 030a 	add.w	r3, r7, #10
 800be54:	2202      	movs	r2, #2
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 fcc3 	bl	800d7e4 <USBD_CtlSendData>
	          else
	          {
	            USBD_CtlError(pdev, req);
	            ret = USBD_FAIL;
	          }
	          break;
 800be5e:	e032      	b.n	800bec6 <USBD_CDC_Setup+0x19e>
	            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 fc4d 	bl	800d702 <USBD_CtlError>
	            ret = USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	75fb      	strb	r3, [r7, #23]
	          break;
 800be6c:	e02b      	b.n	800bec6 <USBD_CDC_Setup+0x19e>

	        case USB_REQ_GET_INTERFACE:
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d107      	bne.n	800be8a <USBD_CDC_Setup+0x162>
	          {
	            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be7a:	f107 030d 	add.w	r3, r7, #13
 800be7e:	2201      	movs	r2, #1
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 fcae 	bl	800d7e4 <USBD_CtlSendData>
	          else
	          {
	            USBD_CtlError(pdev, req);
	            ret = USBD_FAIL;
	          }
	          break;
 800be88:	e01d      	b.n	800bec6 <USBD_CDC_Setup+0x19e>
	            USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f001 fc38 	bl	800d702 <USBD_CtlError>
	            ret = USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	75fb      	strb	r3, [r7, #23]
	          break;
 800be96:	e016      	b.n	800bec6 <USBD_CDC_Setup+0x19e>

	        case USB_REQ_SET_INTERFACE:
	          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d00f      	beq.n	800bec4 <USBD_CDC_Setup+0x19c>
	          {
	            USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f001 fc2b 	bl	800d702 <USBD_CtlError>
	            ret = USBD_FAIL;
 800beac:	2303      	movs	r3, #3
 800beae:	75fb      	strb	r3, [r7, #23]
	          }
	          break;
 800beb0:	e008      	b.n	800bec4 <USBD_CDC_Setup+0x19c>

	        case USB_REQ_CLEAR_FEATURE:
	          break;

	        default:
	          USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f001 fc24 	bl	800d702 <USBD_CtlError>
	          ret = USBD_FAIL;
 800beba:	2303      	movs	r3, #3
 800bebc:	75fb      	strb	r3, [r7, #23]
	          break;
 800bebe:	e002      	b.n	800bec6 <USBD_CDC_Setup+0x19e>
	          break;
 800bec0:	bf00      	nop
 800bec2:	e008      	b.n	800bed6 <USBD_CDC_Setup+0x1ae>
	          break;
 800bec4:	bf00      	nop
	      }
	      break;
 800bec6:	e006      	b.n	800bed6 <USBD_CDC_Setup+0x1ae>

	    default:
	      USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f001 fc19 	bl	800d702 <USBD_CtlError>
	      ret = USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	75fb      	strb	r3, [r7, #23]
	      break;
 800bed4:	bf00      	nop
	  }

	  return (uint8_t)ret;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
//
//  default:
//    break;
//  }
//  return USBD_OK;
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]

	 USBD_CDC_HandleTypeDef *hcdc;
		  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bef2:	60fb      	str	r3, [r7, #12]

		  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32b0      	adds	r2, #176	@ 0xb0
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <USBD_CDC_DataIn+0x2a>
		  {
		    return (uint8_t)USBD_FAIL;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e065      	b.n	800bfd6 <USBD_CDC_DataIn+0xf6>
		  }

		  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	32b0      	adds	r2, #176	@ 0xb0
 800bf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf18:	60bb      	str	r3, [r7, #8]

		  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf1a:	78fb      	ldrb	r3, [r7, #3]
 800bf1c:	f003 020f 	and.w	r2, r3, #15
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3318      	adds	r3, #24
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d02f      	beq.n	800bf94 <USBD_CDC_DataIn+0xb4>
		      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	f003 020f 	and.w	r2, r3, #15
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	3318      	adds	r3, #24
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	f003 010f 	and.w	r1, r3, #15
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	460b      	mov	r3, r1
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	440b      	add	r3, r1
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4403      	add	r3, r0
 800bf5c:	331c      	adds	r3, #28
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf64:	fb01 f303 	mul.w	r3, r1, r3
 800bf68:	1ad3      	subs	r3, r2, r3
		  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d112      	bne.n	800bf94 <USBD_CDC_DataIn+0xb4>
		  {
		    /* Update the packet total length */
		    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bf6e:	78fb      	ldrb	r3, [r7, #3]
 800bf70:	f003 020f 	and.w	r2, r3, #15
 800bf74:	6879      	ldr	r1, [r7, #4]
 800bf76:	4613      	mov	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	3318      	adds	r3, #24
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]

		    /* Send ZLP */
		    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf86:	78f9      	ldrb	r1, [r7, #3]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f003 faec 	bl	800f56a <USBD_LL_Transmit>
 800bf92:	e01f      	b.n	800bfd4 <USBD_CDC_DataIn+0xf4>
		  }
		  else
		  {
		    hcdc->TxState = 0U;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

		    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	33b0      	adds	r3, #176	@ 0xb0
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d010      	beq.n	800bfd4 <USBD_CDC_DataIn+0xf4>
		    {
		      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	33b0      	adds	r3, #176	@ 0xb0
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bfd0:	78fa      	ldrb	r2, [r7, #3]
 800bfd2:	4798      	blx	r3
		    }
		  }

		  return (uint8_t)USBD_OK;
 800bfd4:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]



	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	32b0      	adds	r2, #176	@ 0xb0
 800bff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff8:	60fb      	str	r3, [r7, #12]

	   if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	32b0      	adds	r2, #176	@ 0xb0
 800c004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <USBD_CDC_DataOut+0x32>
	   {
	     return (uint8_t)USBD_FAIL;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e01a      	b.n	800c046 <USBD_CDC_DataOut+0x68>
	   }

	   /* Get the received data length */
	   hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f003 faea 	bl	800f5ee <USBD_LL_GetRxDataSize>
 800c01a:	4602      	mov	r2, r0
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	   /* USB data will be immediately processed, this allow next USB traffic being
	   NAKed till the end of the application Xfer */

	   ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	33b0      	adds	r3, #176	@ 0xb0
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c040:	4611      	mov	r1, r2
 800c042:	4798      	blx	r3

	   return (uint8_t)USBD_OK;
 800c044:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]

	 USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	32b0      	adds	r2, #176	@ 0xb0
 800c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c064:	60fb      	str	r3, [r7, #12]

	  if (hcdc == NULL)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <USBD_CDC_EP0_RxReady+0x22>
	  {
	    return (uint8_t)USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e024      	b.n	800c0ba <USBD_CDC_EP0_RxReady+0x6c>
	  }

	  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	33b0      	adds	r3, #176	@ 0xb0
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d019      	beq.n	800c0b8 <USBD_CDC_EP0_RxReady+0x6a>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c08a:	2bff      	cmp	r3, #255	@ 0xff
 800c08c:	d014      	beq.n	800c0b8 <USBD_CDC_EP0_RxReady+0x6a>
	  {
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	33b0      	adds	r3, #176	@ 0xb0
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
	                                                                     (uint8_t *)hcdc->data,
 800c0a6:	68f9      	ldr	r1, [r7, #12]
	                                                                     (uint16_t)hcdc->CmdLength);
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c0ae:	4798      	blx	r3
	    hcdc->CmdOpCode = 0xFFU;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	22ff      	movs	r2, #255	@ 0xff
 800c0b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	  }

	  return (uint8_t)USBD_OK;
 800c0b8:	2300      	movs	r3, #0


}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]

	 USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0cc:	2182      	movs	r1, #130	@ 0x82
 800c0ce:	4818      	ldr	r0, [pc, #96]	@ (800c130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c0d0:	f000 fce1 	bl	800ca96 <USBD_GetEpDesc>
 800c0d4:	6178      	str	r0, [r7, #20]
	  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	4815      	ldr	r0, [pc, #84]	@ (800c130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c0da:	f000 fcdc 	bl	800ca96 <USBD_GetEpDesc>
 800c0de:	6138      	str	r0, [r7, #16]
	  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0e0:	2181      	movs	r1, #129	@ 0x81
 800c0e2:	4813      	ldr	r0, [pc, #76]	@ (800c130 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c0e4:	f000 fcd7 	bl	800ca96 <USBD_GetEpDesc>
 800c0e8:	60f8      	str	r0, [r7, #12]

	  if (pEpCmdDesc != NULL)
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <USBD_CDC_GetFSCfgDesc+0x32>
	  {
	    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2210      	movs	r2, #16
 800c0f4:	719a      	strb	r2, [r3, #6]
	  }

	  if (pEpOutDesc != NULL)
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d006      	beq.n	800c10a <USBD_CDC_GetFSCfgDesc+0x46>
	  {
	    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c104:	711a      	strb	r2, [r3, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	715a      	strb	r2, [r3, #5]
	  }

	  if (pEpInDesc != NULL)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d006      	beq.n	800c11e <USBD_CDC_GetFSCfgDesc+0x5a>
	  {
	    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c118:	711a      	strb	r2, [r3, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	715a      	strb	r2, [r3, #5]
	  }

	  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2220      	movs	r2, #32
 800c122:	801a      	strh	r2, [r3, #0]
	  return USBD_CDC_CfgDesc;
 800c124:	4b02      	ldr	r3, [pc, #8]	@ (800c130 <USBD_CDC_GetFSCfgDesc+0x6c>)


//  *length = sizeof (USBD_CDC_CfgFSDesc);
//  return USBD_CDC_CfgFSDesc;
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	200000c8 	.word	0x200000c8

0800c134 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	220a      	movs	r2, #10
 800c140:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c142:	4b03      	ldr	r3, [pc, #12]	@ (800c150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	20000084 	.word	0x20000084

0800c154 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData[pdev->classId]= fops;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	33b0      	adds	r3, #176	@ 0xb0
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	605a      	str	r2, [r3, #4]
    ret = USBD_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USBD_CDC_SetTxBuffer>:


uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint32_t length)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	32b0      	adds	r2, #176	@ 0xb0
 800c1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a6:	617b      	str	r3, [r7, #20]
	  if (hcdc == NULL)
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <USBD_CDC_SetTxBuffer+0x26>
	   {
	     return (uint8_t)USBD_FAIL;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e008      	b.n	800c1c4 <USBD_CDC_SetTxBuffer+0x38>
	   }

	   hcdc->TxBuffer = pbuff;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	   hcdc->TxLength = length;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	   return (uint8_t)USBD_OK;
 800c1c2:	2300      	movs	r3, #0
//
//  hcdc->TxBuffer = pbuff;
//  hcdc->TxLength = length;
//
//  return USBD_OK;
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	371c      	adds	r7, #28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]

	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	32b0      	adds	r2, #176	@ 0xb0
 800c1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e8:	60fb      	str	r3, [r7, #12]

	  if (hcdc == NULL)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <USBD_CDC_SetRxBuffer+0x24>
	  {
	    return (uint8_t)USBD_FAIL;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	e004      	b.n	800c1fe <USBD_CDC_SetRxBuffer+0x2e>
	  }

	  hcdc->RxBuffer = pbuff;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	  return (uint8_t)USBD_OK;
 800c1fc:	2300      	movs	r3, #0
//  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
//
//  hcdc->RxBuffer = pbuff;
//
//  return USBD_OK;
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
	...

0800c20c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */

uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	32b0      	adds	r2, #176	@ 0xb0
 800c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c222:	60bb      	str	r3, [r7, #8]


  USBD_StatusTypeDef ret = USBD_BUSY;
 800c224:	2301      	movs	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]

  if (hcdc == NULL)
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	e025      	b.n	800c27e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11f      	bne.n	800c27c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2201      	movs	r2, #1
 800c240:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c244:	4b10      	ldr	r3, [pc, #64]	@ (800c288 <USBD_CDC_TransmitPacket+0x7c>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	f003 020f 	and.w	r2, r3, #15
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4403      	add	r3, r0
 800c25e:	3318      	adds	r3, #24
 800c260:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c262:	4b09      	ldr	r3, [pc, #36]	@ (800c288 <USBD_CDC_TransmitPacket+0x7c>)
 800c264:	7819      	ldrb	r1, [r3, #0]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f003 f979 	bl	800f56a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200000e8 	.word	0x200000e8

0800c28c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 // USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	32b0      	adds	r2, #176	@ 0xb0
 800c29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a2:	60fb      	str	r3, [r7, #12]
  /* Suspend or Resume USB Out process */

	 if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32b0      	adds	r2, #176	@ 0xb0
 800c2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <USBD_CDC_ReceivePacket+0x2e>
	  {
	    return (uint8_t)USBD_FAIL;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e018      	b.n	800c2ec <USBD_CDC_ReceivePacket+0x60>
	  }

	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	7c1b      	ldrb	r3, [r3, #16]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <USBD_CDC_ReceivePacket+0x4c>
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f4 <USBD_CDC_ReceivePacket+0x68>)
 800c2c4:	7819      	ldrb	r1, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f003 f96b 	bl	800f5ac <USBD_LL_PrepareReceive>
 800c2d6:	e008      	b.n	800c2ea <USBD_CDC_ReceivePacket+0x5e>
	                                 CDC_DATA_HS_OUT_PACKET_SIZE);
	  }
	  else
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2d8:	4b06      	ldr	r3, [pc, #24]	@ (800c2f4 <USBD_CDC_ReceivePacket+0x68>)
 800c2da:	7819      	ldrb	r1, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2e2:	2340      	movs	r3, #64	@ 0x40
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f003 f961 	bl	800f5ac <USBD_LL_PrepareReceive>
	                                 CDC_DATA_FS_OUT_PACKET_SIZE);
	  }

	  return (uint8_t)USBD_OK;
 800c2ea:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	200000e9 	.word	0x200000e9

0800c2f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e01f      	b.n	800c350 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	79fa      	ldrb	r2, [r7, #7]
 800c342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f002 ffdb 	bl	800f300 <USBD_LL_Init>
 800c34a:	4603      	mov	r3, r0
 800c34c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e025      	b.n	800c3bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	32ae      	adds	r2, #174	@ 0xae
 800c382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00f      	beq.n	800c3ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	32ae      	adds	r2, #174	@ 0xae
 800c396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	f107 020e 	add.w	r2, r7, #14
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f002 ffe3 	bl	800f398 <USBD_LL_Start>
 800c3d2:	4603      	mov	r3, r0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d009      	beq.n	800c420 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	78fa      	ldrb	r2, [r7, #3]
 800c416:	4611      	mov	r1, r2
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	4798      	blx	r3
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	78fa      	ldrb	r2, [r7, #3]
 800c444:	4611      	mov	r1, r2
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	4798      	blx	r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c450:	2303      	movs	r3, #3
 800c452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f001 f90c 	bl	800d68e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c484:	461a      	mov	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c492:	f003 031f 	and.w	r3, r3, #31
 800c496:	2b02      	cmp	r3, #2
 800c498:	d01a      	beq.n	800c4d0 <USBD_LL_SetupStage+0x72>
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d822      	bhi.n	800c4e4 <USBD_LL_SetupStage+0x86>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <USBD_LL_SetupStage+0x4a>
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d00a      	beq.n	800c4bc <USBD_LL_SetupStage+0x5e>
 800c4a6:	e01d      	b.n	800c4e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fb63 	bl	800cb7c <USBD_StdDevReq>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ba:	e020      	b.n	800c4fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fbcb 	bl	800cc60 <USBD_StdItfReq>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ce:	e016      	b.n	800c4fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fc2d 	bl	800cd38 <USBD_StdEPReq>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e2:	e00c      	b.n	800c4fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f002 ffb0 	bl	800f458 <USBD_LL_StallEP>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c4fc:	bf00      	nop
  }

  return ret;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	460b      	mov	r3, r1
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d16e      	bne.n	800c5fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c52e:	2b03      	cmp	r3, #3
 800c530:	f040 8098 	bne.w	800c664 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d913      	bls.n	800c568 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	1ad2      	subs	r2, r2, r3
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	4293      	cmp	r3, r2
 800c558:	bf28      	it	cs
 800c55a:	4613      	movcs	r3, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f001 f988 	bl	800d876 <USBD_CtlContinueRx>
 800c566:	e07d      	b.n	800c664 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c56e:	f003 031f 	and.w	r3, r3, #31
 800c572:	2b02      	cmp	r3, #2
 800c574:	d014      	beq.n	800c5a0 <USBD_LL_DataOutStage+0x98>
 800c576:	2b02      	cmp	r3, #2
 800c578:	d81d      	bhi.n	800c5b6 <USBD_LL_DataOutStage+0xae>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <USBD_LL_DataOutStage+0x7c>
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d003      	beq.n	800c58a <USBD_LL_DataOutStage+0x82>
 800c582:	e018      	b.n	800c5b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	75bb      	strb	r3, [r7, #22]
            break;
 800c588:	e018      	b.n	800c5bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c590:	b2db      	uxtb	r3, r3
 800c592:	4619      	mov	r1, r3
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fa64 	bl	800ca62 <USBD_CoreFindIF>
 800c59a:	4603      	mov	r3, r0
 800c59c:	75bb      	strb	r3, [r7, #22]
            break;
 800c59e:	e00d      	b.n	800c5bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f000 fa66 	bl	800ca7c <USBD_CoreFindEP>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c5b4:	e002      	b.n	800c5bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	75bb      	strb	r3, [r7, #22]
            break;
 800c5ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c5bc:	7dbb      	ldrb	r3, [r7, #22]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d119      	bne.n	800c5f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d113      	bne.n	800c5f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c5ce:	7dba      	ldrb	r2, [r7, #22]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	32ae      	adds	r2, #174	@ 0xae
 800c5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c5de:	7dba      	ldrb	r2, [r7, #22]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c5e6:	7dba      	ldrb	r2, [r7, #22]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	32ae      	adds	r2, #174	@ 0xae
 800c5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f001 f94e 	bl	800d898 <USBD_CtlSendStatus>
 800c5fc:	e032      	b.n	800c664 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c5fe:	7afb      	ldrb	r3, [r7, #11]
 800c600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c604:	b2db      	uxtb	r3, r3
 800c606:	4619      	mov	r1, r3
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 fa37 	bl	800ca7c <USBD_CoreFindEP>
 800c60e:	4603      	mov	r3, r0
 800c610:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c612:	7dbb      	ldrb	r3, [r7, #22]
 800c614:	2bff      	cmp	r3, #255	@ 0xff
 800c616:	d025      	beq.n	800c664 <USBD_LL_DataOutStage+0x15c>
 800c618:	7dbb      	ldrb	r3, [r7, #22]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d122      	bne.n	800c664 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b03      	cmp	r3, #3
 800c628:	d117      	bne.n	800c65a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c62a:	7dba      	ldrb	r2, [r7, #22]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	32ae      	adds	r2, #174	@ 0xae
 800c630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00f      	beq.n	800c65a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c63a:	7dba      	ldrb	r2, [r7, #22]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c642:	7dba      	ldrb	r2, [r7, #22]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	32ae      	adds	r2, #174	@ 0xae
 800c648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	7afa      	ldrb	r2, [r7, #11]
 800c650:	4611      	mov	r1, r2
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	4798      	blx	r3
 800c656:	4603      	mov	r3, r0
 800c658:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	e000      	b.n	800c666 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b086      	sub	sp, #24
 800c672:	af00      	add	r7, sp, #0
 800c674:	60f8      	str	r0, [r7, #12]
 800c676:	460b      	mov	r3, r1
 800c678:	607a      	str	r2, [r7, #4]
 800c67a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c67c:	7afb      	ldrb	r3, [r7, #11]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d16f      	bne.n	800c762 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3314      	adds	r3, #20
 800c686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d15a      	bne.n	800c748 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	689a      	ldr	r2, [r3, #8]
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d914      	bls.n	800c6c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	1ad2      	subs	r2, r2, r3
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f001 f8b0 	bl	800d81a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2100      	movs	r1, #0
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f002 ff73 	bl	800f5ac <USBD_LL_PrepareReceive>
 800c6c6:	e03f      	b.n	800c748 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	68da      	ldr	r2, [r3, #12]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d11c      	bne.n	800c70e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d316      	bcc.n	800c70e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d20f      	bcs.n	800c70e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f001 f891 	bl	800d81a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c700:	2300      	movs	r3, #0
 800c702:	2200      	movs	r2, #0
 800c704:	2100      	movs	r1, #0
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f002 ff50 	bl	800f5ac <USBD_LL_PrepareReceive>
 800c70c:	e01c      	b.n	800c748 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d10f      	bne.n	800c73a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d009      	beq.n	800c73a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c73a:	2180      	movs	r1, #128	@ 0x80
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f002 fe8b 	bl	800f458 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f001 f8bb 	bl	800d8be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d03a      	beq.n	800c7c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7ff fe42 	bl	800c3dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c760:	e032      	b.n	800c7c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c762:	7afb      	ldrb	r3, [r7, #11]
 800c764:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	4619      	mov	r1, r3
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 f985 	bl	800ca7c <USBD_CoreFindEP>
 800c772:	4603      	mov	r3, r0
 800c774:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	2bff      	cmp	r3, #255	@ 0xff
 800c77a:	d025      	beq.n	800c7c8 <USBD_LL_DataInStage+0x15a>
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d122      	bne.n	800c7c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d11c      	bne.n	800c7c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c78e:	7dfa      	ldrb	r2, [r7, #23]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	32ae      	adds	r2, #174	@ 0xae
 800c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d014      	beq.n	800c7c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c79e:	7dfa      	ldrb	r2, [r7, #23]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c7a6:	7dfa      	ldrb	r2, [r7, #23]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	32ae      	adds	r2, #174	@ 0xae
 800c7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	7afa      	ldrb	r2, [r7, #11]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	4798      	blx	r3
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c7be:	7dbb      	ldrb	r3, [r7, #22]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c7c4:	7dbb      	ldrb	r3, [r7, #22]
 800c7c6:	e000      	b.n	800c7ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d014      	beq.n	800c838 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00e      	beq.n	800c838 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	6852      	ldr	r2, [r2, #4]
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	4611      	mov	r1, r2
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c834:	2303      	movs	r3, #3
 800c836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c838:	2340      	movs	r3, #64	@ 0x40
 800c83a:	2200      	movs	r2, #0
 800c83c:	2100      	movs	r1, #0
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f002 fdc5 	bl	800f3ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2240      	movs	r2, #64	@ 0x40
 800c850:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c854:	2340      	movs	r3, #64	@ 0x40
 800c856:	2200      	movs	r2, #0
 800c858:	2180      	movs	r1, #128	@ 0x80
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f002 fdb7 	bl	800f3ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2240      	movs	r2, #64	@ 0x40
 800c86a:	621a      	str	r2, [r3, #32]

  return ret;
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c876:	b480      	push	{r7}
 800c878:	b083      	sub	sp, #12
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	460b      	mov	r3, r1
 800c880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	78fa      	ldrb	r2, [r7, #3]
 800c886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	d006      	beq.n	800c8b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2204      	movs	r2, #4
 800c8bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c8ce:	b480      	push	{r7}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b04      	cmp	r3, #4
 800c8e0:	d106      	bne.n	800c8f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d110      	bne.n	800c934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	460b      	mov	r3, r1
 800c948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	32ae      	adds	r2, #174	@ 0xae
 800c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e01c      	b.n	800c99a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d115      	bne.n	800c998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	32ae      	adds	r2, #174	@ 0xae
 800c976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00b      	beq.n	800c998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	32ae      	adds	r2, #174	@ 0xae
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	6a1b      	ldr	r3, [r3, #32]
 800c990:	78fa      	ldrb	r2, [r7, #3]
 800c992:	4611      	mov	r1, r2
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	32ae      	adds	r2, #174	@ 0xae
 800c9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e01c      	b.n	800c9fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	d115      	bne.n	800c9fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	32ae      	adds	r2, #174	@ 0xae
 800c9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	32ae      	adds	r2, #174	@ 0xae
 800c9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f4:	78fa      	ldrb	r2, [r7, #3]
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b083      	sub	sp, #12
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00e      	beq.n	800ca58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	6852      	ldr	r2, [r2, #4]
 800ca46:	b2d2      	uxtb	r2, r2
 800ca48:	4611      	mov	r1, r2
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	4798      	blx	r3
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b086      	sub	sp, #24
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	7812      	ldrb	r2, [r2, #0]
 800cab8:	4293      	cmp	r3, r2
 800caba:	d91f      	bls.n	800cafc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cac2:	e013      	b.n	800caec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cac4:	f107 030a 	add.w	r3, r7, #10
 800cac8:	4619      	mov	r1, r3
 800caca:	6978      	ldr	r0, [r7, #20]
 800cacc:	f000 f81b 	bl	800cb06 <USBD_GetNextDesc>
 800cad0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	785b      	ldrb	r3, [r3, #1]
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d108      	bne.n	800caec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	789b      	ldrb	r3, [r3, #2]
 800cae2:	78fa      	ldrb	r2, [r7, #3]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d008      	beq.n	800cafa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	885b      	ldrh	r3, [r3, #2]
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	897b      	ldrh	r3, [r7, #10]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d8e5      	bhi.n	800cac4 <USBD_GetEpDesc+0x2e>
 800caf8:	e000      	b.n	800cafc <USBD_GetEpDesc+0x66>
          break;
 800cafa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cafc:	693b      	ldr	r3, [r7, #16]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b085      	sub	sp, #20
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb30:	68fb      	ldr	r3, [r7, #12]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b087      	sub	sp, #28
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	3301      	adds	r3, #1
 800cb54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb5c:	8a3b      	ldrh	r3, [r7, #16]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b21a      	sxth	r2, r3
 800cb62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	b21b      	sxth	r3, r3
 800cb6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb6c:	89fb      	ldrh	r3, [r7, #14]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	371c      	adds	r7, #28
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
	...

0800cb7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb92:	2b40      	cmp	r3, #64	@ 0x40
 800cb94:	d005      	beq.n	800cba2 <USBD_StdDevReq+0x26>
 800cb96:	2b40      	cmp	r3, #64	@ 0x40
 800cb98:	d857      	bhi.n	800cc4a <USBD_StdDevReq+0xce>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00f      	beq.n	800cbbe <USBD_StdDevReq+0x42>
 800cb9e:	2b20      	cmp	r3, #32
 800cba0:	d153      	bne.n	800cc4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	32ae      	adds	r2, #174	@ 0xae
 800cbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]
      break;
 800cbbc:	e04a      	b.n	800cc54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	2b09      	cmp	r3, #9
 800cbc4:	d83b      	bhi.n	800cc3e <USBD_StdDevReq+0xc2>
 800cbc6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbcc <USBD_StdDevReq+0x50>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cc21 	.word	0x0800cc21
 800cbd0:	0800cc35 	.word	0x0800cc35
 800cbd4:	0800cc3f 	.word	0x0800cc3f
 800cbd8:	0800cc2b 	.word	0x0800cc2b
 800cbdc:	0800cc3f 	.word	0x0800cc3f
 800cbe0:	0800cbff 	.word	0x0800cbff
 800cbe4:	0800cbf5 	.word	0x0800cbf5
 800cbe8:	0800cc3f 	.word	0x0800cc3f
 800cbec:	0800cc17 	.word	0x0800cc17
 800cbf0:	0800cc09 	.word	0x0800cc09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fa3c 	bl	800d074 <USBD_GetDescriptor>
          break;
 800cbfc:	e024      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fba1 	bl	800d348 <USBD_SetAddress>
          break;
 800cc06:	e01f      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fbe0 	bl	800d3d0 <USBD_SetConfig>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]
          break;
 800cc14:	e018      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fc83 	bl	800d524 <USBD_GetConfig>
          break;
 800cc1e:	e013      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fcb4 	bl	800d590 <USBD_GetStatus>
          break;
 800cc28:	e00e      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fce3 	bl	800d5f8 <USBD_SetFeature>
          break;
 800cc32:	e009      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fd07 	bl	800d64a <USBD_ClrFeature>
          break;
 800cc3c:	e004      	b.n	800cc48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fd5e 	bl	800d702 <USBD_CtlError>
          break;
 800cc46:	bf00      	nop
      }
      break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fd58 	bl	800d702 <USBD_CtlError>
      break;
 800cc52:	bf00      	nop
  }

  return ret;
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop

0800cc60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc76:	2b40      	cmp	r3, #64	@ 0x40
 800cc78:	d005      	beq.n	800cc86 <USBD_StdItfReq+0x26>
 800cc7a:	2b40      	cmp	r3, #64	@ 0x40
 800cc7c:	d852      	bhi.n	800cd24 <USBD_StdItfReq+0xc4>
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <USBD_StdItfReq+0x26>
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	d14e      	bne.n	800cd24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d840      	bhi.n	800cd16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	889b      	ldrh	r3, [r3, #4]
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d836      	bhi.n	800cd0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	889b      	ldrh	r3, [r3, #4]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7ff fedb 	bl	800ca62 <USBD_CoreFindIF>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	2bff      	cmp	r3, #255	@ 0xff
 800ccb4:	d01d      	beq.n	800ccf2 <USBD_StdItfReq+0x92>
 800ccb6:	7bbb      	ldrb	r3, [r7, #14]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d11a      	bne.n	800ccf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ccbc:	7bba      	ldrb	r2, [r7, #14]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	32ae      	adds	r2, #174	@ 0xae
 800ccc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00f      	beq.n	800ccec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cccc:	7bba      	ldrb	r2, [r7, #14]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ccd4:	7bba      	ldrb	r2, [r7, #14]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	32ae      	adds	r2, #174	@ 0xae
 800ccda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	4798      	blx	r3
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ccea:	e004      	b.n	800ccf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ccec:	2303      	movs	r3, #3
 800ccee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ccf0:	e001      	b.n	800ccf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	88db      	ldrh	r3, [r3, #6]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d110      	bne.n	800cd20 <USBD_StdItfReq+0xc0>
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10d      	bne.n	800cd20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fdc7 	bl	800d898 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd0a:	e009      	b.n	800cd20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fcf7 	bl	800d702 <USBD_CtlError>
          break;
 800cd14:	e004      	b.n	800cd20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fcf2 	bl	800d702 <USBD_CtlError>
          break;
 800cd1e:	e000      	b.n	800cd22 <USBD_StdItfReq+0xc2>
          break;
 800cd20:	bf00      	nop
      }
      break;
 800cd22:	e004      	b.n	800cd2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fceb 	bl	800d702 <USBD_CtlError>
      break;
 800cd2c:	bf00      	nop
  }

  return ret;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	889b      	ldrh	r3, [r3, #4]
 800cd4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd54:	2b40      	cmp	r3, #64	@ 0x40
 800cd56:	d007      	beq.n	800cd68 <USBD_StdEPReq+0x30>
 800cd58:	2b40      	cmp	r3, #64	@ 0x40
 800cd5a:	f200 817f 	bhi.w	800d05c <USBD_StdEPReq+0x324>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d02a      	beq.n	800cdb8 <USBD_StdEPReq+0x80>
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	f040 817a 	bne.w	800d05c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff fe85 	bl	800ca7c <USBD_CoreFindEP>
 800cd72:	4603      	mov	r3, r0
 800cd74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd76:	7b7b      	ldrb	r3, [r7, #13]
 800cd78:	2bff      	cmp	r3, #255	@ 0xff
 800cd7a:	f000 8174 	beq.w	800d066 <USBD_StdEPReq+0x32e>
 800cd7e:	7b7b      	ldrb	r3, [r7, #13]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f040 8170 	bne.w	800d066 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cd86:	7b7a      	ldrb	r2, [r7, #13]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cd8e:	7b7a      	ldrb	r2, [r7, #13]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	32ae      	adds	r2, #174	@ 0xae
 800cd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 8163 	beq.w	800d066 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cda0:	7b7a      	ldrb	r2, [r7, #13]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	32ae      	adds	r2, #174	@ 0xae
 800cda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4798      	blx	r3
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdb6:	e156      	b.n	800d066 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	785b      	ldrb	r3, [r3, #1]
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d008      	beq.n	800cdd2 <USBD_StdEPReq+0x9a>
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	f300 8145 	bgt.w	800d050 <USBD_StdEPReq+0x318>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 809b 	beq.w	800cf02 <USBD_StdEPReq+0x1ca>
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d03c      	beq.n	800ce4a <USBD_StdEPReq+0x112>
 800cdd0:	e13e      	b.n	800d050 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d002      	beq.n	800cde4 <USBD_StdEPReq+0xac>
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d016      	beq.n	800ce10 <USBD_StdEPReq+0xd8>
 800cde2:	e02c      	b.n	800ce3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00d      	beq.n	800ce06 <USBD_StdEPReq+0xce>
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b80      	cmp	r3, #128	@ 0x80
 800cdee:	d00a      	beq.n	800ce06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f002 fb2f 	bl	800f458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdfa:	2180      	movs	r1, #128	@ 0x80
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f002 fb2b 	bl	800f458 <USBD_LL_StallEP>
 800ce02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce04:	e020      	b.n	800ce48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fc7a 	bl	800d702 <USBD_CtlError>
              break;
 800ce0e:	e01b      	b.n	800ce48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10e      	bne.n	800ce36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <USBD_StdEPReq+0xfe>
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
 800ce20:	2b80      	cmp	r3, #128	@ 0x80
 800ce22:	d008      	beq.n	800ce36 <USBD_StdEPReq+0xfe>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	88db      	ldrh	r3, [r3, #6]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d104      	bne.n	800ce36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f002 fb11 	bl	800f458 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 fd2e 	bl	800d898 <USBD_CtlSendStatus>

              break;
 800ce3c:	e004      	b.n	800ce48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fc5e 	bl	800d702 <USBD_CtlError>
              break;
 800ce46:	bf00      	nop
          }
          break;
 800ce48:	e107      	b.n	800d05a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d002      	beq.n	800ce5c <USBD_StdEPReq+0x124>
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d016      	beq.n	800ce88 <USBD_StdEPReq+0x150>
 800ce5a:	e04b      	b.n	800cef4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00d      	beq.n	800ce7e <USBD_StdEPReq+0x146>
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	2b80      	cmp	r3, #128	@ 0x80
 800ce66:	d00a      	beq.n	800ce7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f002 faf3 	bl	800f458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce72:	2180      	movs	r1, #128	@ 0x80
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f002 faef 	bl	800f458 <USBD_LL_StallEP>
 800ce7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce7c:	e040      	b.n	800cf00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 fc3e 	bl	800d702 <USBD_CtlError>
              break;
 800ce86:	e03b      	b.n	800cf00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	885b      	ldrh	r3, [r3, #2]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d136      	bne.n	800cefe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
 800ce92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d004      	beq.n	800cea4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f002 faf9 	bl	800f496 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fcf7 	bl	800d898 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ceaa:	7bbb      	ldrb	r3, [r7, #14]
 800ceac:	4619      	mov	r1, r3
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff fde4 	bl	800ca7c <USBD_CoreFindEP>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ceb8:	7b7b      	ldrb	r3, [r7, #13]
 800ceba:	2bff      	cmp	r3, #255	@ 0xff
 800cebc:	d01f      	beq.n	800cefe <USBD_StdEPReq+0x1c6>
 800cebe:	7b7b      	ldrb	r3, [r7, #13]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d11c      	bne.n	800cefe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cec4:	7b7a      	ldrb	r2, [r7, #13]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cecc:	7b7a      	ldrb	r2, [r7, #13]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	32ae      	adds	r2, #174	@ 0xae
 800ced2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d010      	beq.n	800cefe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cedc:	7b7a      	ldrb	r2, [r7, #13]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	32ae      	adds	r2, #174	@ 0xae
 800cee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	6839      	ldr	r1, [r7, #0]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	4798      	blx	r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cef2:	e004      	b.n	800cefe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fc03 	bl	800d702 <USBD_CtlError>
              break;
 800cefc:	e000      	b.n	800cf00 <USBD_StdEPReq+0x1c8>
              break;
 800cefe:	bf00      	nop
          }
          break;
 800cf00:	e0ab      	b.n	800d05a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d002      	beq.n	800cf14 <USBD_StdEPReq+0x1dc>
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d032      	beq.n	800cf78 <USBD_StdEPReq+0x240>
 800cf12:	e097      	b.n	800d044 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf14:	7bbb      	ldrb	r3, [r7, #14]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d007      	beq.n	800cf2a <USBD_StdEPReq+0x1f2>
 800cf1a:	7bbb      	ldrb	r3, [r7, #14]
 800cf1c:	2b80      	cmp	r3, #128	@ 0x80
 800cf1e:	d004      	beq.n	800cf2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fbed 	bl	800d702 <USBD_CtlError>
                break;
 800cf28:	e091      	b.n	800d04e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da0b      	bge.n	800cf4a <USBD_StdEPReq+0x212>
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf38:	4613      	mov	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	3310      	adds	r3, #16
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	4413      	add	r3, r2
 800cf46:	3304      	adds	r3, #4
 800cf48:	e00b      	b.n	800cf62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	4413      	add	r3, r2
 800cf60:	3304      	adds	r3, #4
 800cf62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc37 	bl	800d7e4 <USBD_CtlSendData>
              break;
 800cf76:	e06a      	b.n	800d04e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	da11      	bge.n	800cfa4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
 800cf82:	f003 020f 	and.w	r2, r3, #15
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	440b      	add	r3, r1
 800cf92:	3324      	adds	r3, #36	@ 0x24
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d117      	bne.n	800cfca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fbb0 	bl	800d702 <USBD_CtlError>
                  break;
 800cfa2:	e054      	b.n	800d04e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	f003 020f 	and.w	r2, r3, #15
 800cfaa:	6879      	ldr	r1, [r7, #4]
 800cfac:	4613      	mov	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	440b      	add	r3, r1
 800cfb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fb9d 	bl	800d702 <USBD_CtlError>
                  break;
 800cfc8:	e041      	b.n	800d04e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	da0b      	bge.n	800cfea <USBD_StdEPReq+0x2b2>
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	3310      	adds	r3, #16
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	e00b      	b.n	800d002 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	4413      	add	r3, r2
 800d000:	3304      	adds	r3, #4
 800d002:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d004:	7bbb      	ldrb	r3, [r7, #14]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <USBD_StdEPReq+0x2d8>
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	2b80      	cmp	r3, #128	@ 0x80
 800d00e:	d103      	bne.n	800d018 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	e00e      	b.n	800d036 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d018:	7bbb      	ldrb	r3, [r7, #14]
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f002 fa59 	bl	800f4d4 <USBD_LL_IsStallEP>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2201      	movs	r2, #1
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	e002      	b.n	800d036 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	2202      	movs	r2, #2
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fbd1 	bl	800d7e4 <USBD_CtlSendData>
              break;
 800d042:	e004      	b.n	800d04e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d044:	6839      	ldr	r1, [r7, #0]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fb5b 	bl	800d702 <USBD_CtlError>
              break;
 800d04c:	bf00      	nop
          }
          break;
 800d04e:	e004      	b.n	800d05a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fb55 	bl	800d702 <USBD_CtlError>
          break;
 800d058:	bf00      	nop
      }
      break;
 800d05a:	e005      	b.n	800d068 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fb4f 	bl	800d702 <USBD_CtlError>
      break;
 800d064:	e000      	b.n	800d068 <USBD_StdEPReq+0x330>
      break;
 800d066:	bf00      	nop
  }

  return ret;
 800d068:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	885b      	ldrh	r3, [r3, #2]
 800d08e:	0a1b      	lsrs	r3, r3, #8
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	2b06      	cmp	r3, #6
 800d096:	f200 8128 	bhi.w	800d2ea <USBD_GetDescriptor+0x276>
 800d09a:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a0 <USBD_GetDescriptor+0x2c>)
 800d09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a0:	0800d0bd 	.word	0x0800d0bd
 800d0a4:	0800d0d5 	.word	0x0800d0d5
 800d0a8:	0800d115 	.word	0x0800d115
 800d0ac:	0800d2eb 	.word	0x0800d2eb
 800d0b0:	0800d2eb 	.word	0x0800d2eb
 800d0b4:	0800d28b 	.word	0x0800d28b
 800d0b8:	0800d2b7 	.word	0x0800d2b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	7c12      	ldrb	r2, [r2, #16]
 800d0c8:	f107 0108 	add.w	r1, r7, #8
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	4798      	blx	r3
 800d0d0:	60f8      	str	r0, [r7, #12]
      break;
 800d0d2:	e112      	b.n	800d2fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7c1b      	ldrb	r3, [r3, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10d      	bne.n	800d0f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e4:	f107 0208 	add.w	r2, r7, #8
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
 800d0ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d0f6:	e100      	b.n	800d2fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d100:	f107 0208 	add.w	r2, r7, #8
 800d104:	4610      	mov	r0, r2
 800d106:	4798      	blx	r3
 800d108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3301      	adds	r3, #1
 800d10e:	2202      	movs	r2, #2
 800d110:	701a      	strb	r2, [r3, #0]
      break;
 800d112:	e0f2      	b.n	800d2fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	885b      	ldrh	r3, [r3, #2]
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b05      	cmp	r3, #5
 800d11c:	f200 80ac 	bhi.w	800d278 <USBD_GetDescriptor+0x204>
 800d120:	a201      	add	r2, pc, #4	@ (adr r2, 800d128 <USBD_GetDescriptor+0xb4>)
 800d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d141 	.word	0x0800d141
 800d12c:	0800d175 	.word	0x0800d175
 800d130:	0800d1a9 	.word	0x0800d1a9
 800d134:	0800d1dd 	.word	0x0800d1dd
 800d138:	0800d211 	.word	0x0800d211
 800d13c:	0800d245 	.word	0x0800d245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	7c12      	ldrb	r2, [r2, #16]
 800d158:	f107 0108 	add.w	r1, r7, #8
 800d15c:	4610      	mov	r0, r2
 800d15e:	4798      	blx	r3
 800d160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d162:	e091      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d164:	6839      	ldr	r1, [r7, #0]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 facb 	bl	800d702 <USBD_CtlError>
            err++;
 800d16c:	7afb      	ldrb	r3, [r7, #11]
 800d16e:	3301      	adds	r3, #1
 800d170:	72fb      	strb	r3, [r7, #11]
          break;
 800d172:	e089      	b.n	800d288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	7c12      	ldrb	r2, [r2, #16]
 800d18c:	f107 0108 	add.w	r1, r7, #8
 800d190:	4610      	mov	r0, r2
 800d192:	4798      	blx	r3
 800d194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d196:	e077      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fab1 	bl	800d702 <USBD_CtlError>
            err++;
 800d1a0:	7afb      	ldrb	r3, [r7, #11]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1a6:	e06f      	b.n	800d288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00b      	beq.n	800d1cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	7c12      	ldrb	r2, [r2, #16]
 800d1c0:	f107 0108 	add.w	r1, r7, #8
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4798      	blx	r3
 800d1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ca:	e05d      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fa97 	bl	800d702 <USBD_CtlError>
            err++;
 800d1d4:	7afb      	ldrb	r3, [r7, #11]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d1da:	e055      	b.n	800d288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00b      	beq.n	800d200 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	7c12      	ldrb	r2, [r2, #16]
 800d1f4:	f107 0108 	add.w	r1, r7, #8
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	4798      	blx	r3
 800d1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1fe:	e043      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fa7d 	bl	800d702 <USBD_CtlError>
            err++;
 800d208:	7afb      	ldrb	r3, [r7, #11]
 800d20a:	3301      	adds	r3, #1
 800d20c:	72fb      	strb	r3, [r7, #11]
          break;
 800d20e:	e03b      	b.n	800d288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00b      	beq.n	800d234 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	7c12      	ldrb	r2, [r2, #16]
 800d228:	f107 0108 	add.w	r1, r7, #8
 800d22c:	4610      	mov	r0, r2
 800d22e:	4798      	blx	r3
 800d230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d232:	e029      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fa63 	bl	800d702 <USBD_CtlError>
            err++;
 800d23c:	7afb      	ldrb	r3, [r7, #11]
 800d23e:	3301      	adds	r3, #1
 800d240:	72fb      	strb	r3, [r7, #11]
          break;
 800d242:	e021      	b.n	800d288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00b      	beq.n	800d268 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7c12      	ldrb	r2, [r2, #16]
 800d25c:	f107 0108 	add.w	r1, r7, #8
 800d260:	4610      	mov	r0, r2
 800d262:	4798      	blx	r3
 800d264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d266:	e00f      	b.n	800d288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fa49 	bl	800d702 <USBD_CtlError>
            err++;
 800d270:	7afb      	ldrb	r3, [r7, #11]
 800d272:	3301      	adds	r3, #1
 800d274:	72fb      	strb	r3, [r7, #11]
          break;
 800d276:	e007      	b.n	800d288 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fa41 	bl	800d702 <USBD_CtlError>
          err++;
 800d280:	7afb      	ldrb	r3, [r7, #11]
 800d282:	3301      	adds	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d286:	bf00      	nop
      }
      break;
 800d288:	e037      	b.n	800d2fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	7c1b      	ldrb	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d109      	bne.n	800d2a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d29a:	f107 0208 	add.w	r2, r7, #8
 800d29e:	4610      	mov	r0, r2
 800d2a0:	4798      	blx	r3
 800d2a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2a4:	e029      	b.n	800d2fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fa2a 	bl	800d702 <USBD_CtlError>
        err++;
 800d2ae:	7afb      	ldrb	r3, [r7, #11]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d2b4:	e021      	b.n	800d2fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7c1b      	ldrb	r3, [r3, #16]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10d      	bne.n	800d2da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c6:	f107 0208 	add.w	r2, r7, #8
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	4798      	blx	r3
 800d2ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	2207      	movs	r2, #7
 800d2d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2d8:	e00f      	b.n	800d2fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fa10 	bl	800d702 <USBD_CtlError>
        err++;
 800d2e2:	7afb      	ldrb	r3, [r7, #11]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d2e8:	e007      	b.n	800d2fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fa08 	bl	800d702 <USBD_CtlError>
      err++;
 800d2f2:	7afb      	ldrb	r3, [r7, #11]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	72fb      	strb	r3, [r7, #11]
      break;
 800d2f8:	bf00      	nop
  }

  if (err != 0U)
 800d2fa:	7afb      	ldrb	r3, [r7, #11]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d11e      	bne.n	800d33e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	88db      	ldrh	r3, [r3, #6]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d016      	beq.n	800d336 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d308:	893b      	ldrh	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00e      	beq.n	800d32c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	88da      	ldrh	r2, [r3, #6]
 800d312:	893b      	ldrh	r3, [r7, #8]
 800d314:	4293      	cmp	r3, r2
 800d316:	bf28      	it	cs
 800d318:	4613      	movcs	r3, r2
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d31e:	893b      	ldrh	r3, [r7, #8]
 800d320:	461a      	mov	r2, r3
 800d322:	68f9      	ldr	r1, [r7, #12]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fa5d 	bl	800d7e4 <USBD_CtlSendData>
 800d32a:	e009      	b.n	800d340 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f9e7 	bl	800d702 <USBD_CtlError>
 800d334:	e004      	b.n	800d340 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 faae 	bl	800d898 <USBD_CtlSendStatus>
 800d33c:	e000      	b.n	800d340 <USBD_GetDescriptor+0x2cc>
    return;
 800d33e:	bf00      	nop
  }
}
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop

0800d348 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	889b      	ldrh	r3, [r3, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d131      	bne.n	800d3be <USBD_SetAddress+0x76>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	88db      	ldrh	r3, [r3, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d12d      	bne.n	800d3be <USBD_SetAddress+0x76>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	885b      	ldrh	r3, [r3, #2]
 800d366:	2b7f      	cmp	r3, #127	@ 0x7f
 800d368:	d829      	bhi.n	800d3be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	885b      	ldrh	r3, [r3, #2]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d374:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d104      	bne.n	800d38c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f9bc 	bl	800d702 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d38a:	e01d      	b.n	800d3c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7bfa      	ldrb	r2, [r7, #15]
 800d390:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f002 f8c7 	bl	800f52c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fa7a 	bl	800d898 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3b2:	e009      	b.n	800d3c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3bc:	e004      	b.n	800d3c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f99e 	bl	800d702 <USBD_CtlError>
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	bf00      	nop
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	885b      	ldrh	r3, [r3, #2]
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	4b4e      	ldr	r3, [pc, #312]	@ (800d520 <USBD_SetConfig+0x150>)
 800d3e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d3e8:	4b4d      	ldr	r3, [pc, #308]	@ (800d520 <USBD_SetConfig+0x150>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d905      	bls.n	800d3fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f985 	bl	800d702 <USBD_CtlError>
    return USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e08c      	b.n	800d516 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b02      	cmp	r3, #2
 800d406:	d002      	beq.n	800d40e <USBD_SetConfig+0x3e>
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d029      	beq.n	800d460 <USBD_SetConfig+0x90>
 800d40c:	e075      	b.n	800d4fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d40e:	4b44      	ldr	r3, [pc, #272]	@ (800d520 <USBD_SetConfig+0x150>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d020      	beq.n	800d458 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d416:	4b42      	ldr	r3, [pc, #264]	@ (800d520 <USBD_SetConfig+0x150>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	461a      	mov	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d420:	4b3f      	ldr	r3, [pc, #252]	@ (800d520 <USBD_SetConfig+0x150>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	4619      	mov	r1, r3
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7fe ffe3 	bl	800c3f2 <USBD_SetClassConfig>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d008      	beq.n	800d448 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f962 	bl	800d702 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2202      	movs	r2, #2
 800d442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d446:	e065      	b.n	800d514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fa25 	bl	800d898 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2203      	movs	r2, #3
 800d452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d456:	e05d      	b.n	800d514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fa1d 	bl	800d898 <USBD_CtlSendStatus>
      break;
 800d45e:	e059      	b.n	800d514 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d460:	4b2f      	ldr	r3, [pc, #188]	@ (800d520 <USBD_SetConfig+0x150>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d112      	bne.n	800d48e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2202      	movs	r2, #2
 800d46c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d470:	4b2b      	ldr	r3, [pc, #172]	@ (800d520 <USBD_SetConfig+0x150>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d47a:	4b29      	ldr	r3, [pc, #164]	@ (800d520 <USBD_SetConfig+0x150>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7fe ffd2 	bl	800c42a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fa06 	bl	800d898 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d48c:	e042      	b.n	800d514 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d48e:	4b24      	ldr	r3, [pc, #144]	@ (800d520 <USBD_SetConfig+0x150>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d02a      	beq.n	800d4f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7fe ffc0 	bl	800c42a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d4aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d520 <USBD_SetConfig+0x150>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d520 <USBD_SetConfig+0x150>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7fe ff99 	bl	800c3f2 <USBD_SetClassConfig>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00f      	beq.n	800d4ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d4ca:	6839      	ldr	r1, [r7, #0]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f918 	bl	800d702 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7fe ffa5 	bl	800c42a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4e8:	e014      	b.n	800d514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f9d4 	bl	800d898 <USBD_CtlSendStatus>
      break;
 800d4f0:	e010      	b.n	800d514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f9d0 	bl	800d898 <USBD_CtlSendStatus>
      break;
 800d4f8:	e00c      	b.n	800d514 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 f900 	bl	800d702 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d502:	4b07      	ldr	r3, [pc, #28]	@ (800d520 <USBD_SetConfig+0x150>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7fe ff8e 	bl	800c42a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d50e:	2303      	movs	r3, #3
 800d510:	73fb      	strb	r3, [r7, #15]
      break;
 800d512:	bf00      	nop
  }

  return ret;
 800d514:	7bfb      	ldrb	r3, [r7, #15]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	20001e2e 	.word	0x20001e2e

0800d524 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	88db      	ldrh	r3, [r3, #6]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d004      	beq.n	800d540 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f8e2 	bl	800d702 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d53e:	e023      	b.n	800d588 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b02      	cmp	r3, #2
 800d54a:	dc02      	bgt.n	800d552 <USBD_GetConfig+0x2e>
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	dc03      	bgt.n	800d558 <USBD_GetConfig+0x34>
 800d550:	e015      	b.n	800d57e <USBD_GetConfig+0x5a>
 800d552:	2b03      	cmp	r3, #3
 800d554:	d00b      	beq.n	800d56e <USBD_GetConfig+0x4a>
 800d556:	e012      	b.n	800d57e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3308      	adds	r3, #8
 800d562:	2201      	movs	r2, #1
 800d564:	4619      	mov	r1, r3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f93c 	bl	800d7e4 <USBD_CtlSendData>
        break;
 800d56c:	e00c      	b.n	800d588 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	3304      	adds	r3, #4
 800d572:	2201      	movs	r2, #1
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f934 	bl	800d7e4 <USBD_CtlSendData>
        break;
 800d57c:	e004      	b.n	800d588 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d57e:	6839      	ldr	r1, [r7, #0]
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f8be 	bl	800d702 <USBD_CtlError>
        break;
 800d586:	bf00      	nop
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d81e      	bhi.n	800d5e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	88db      	ldrh	r3, [r3, #6]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d004      	beq.n	800d5ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 f8a5 	bl	800d702 <USBD_CtlError>
        break;
 800d5b8:	e01a      	b.n	800d5f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d005      	beq.n	800d5d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	f043 0202 	orr.w	r2, r3, #2
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	330c      	adds	r3, #12
 800d5da:	2202      	movs	r2, #2
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f900 	bl	800d7e4 <USBD_CtlSendData>
      break;
 800d5e4:	e004      	b.n	800d5f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 f88a 	bl	800d702 <USBD_CtlError>
      break;
 800d5ee:	bf00      	nop
  }
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d107      	bne.n	800d61a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f940 	bl	800d898 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d618:	e013      	b.n	800d642 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	885b      	ldrh	r3, [r3, #2]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d10b      	bne.n	800d63a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	889b      	ldrh	r3, [r3, #4]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	b29b      	uxth	r3, r3
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f930 	bl	800d898 <USBD_CtlSendStatus>
}
 800d638:	e003      	b.n	800d642 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f860 	bl	800d702 <USBD_CtlError>
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	3b01      	subs	r3, #1
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d80b      	bhi.n	800d67a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	885b      	ldrh	r3, [r3, #2]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d10c      	bne.n	800d684 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f910 	bl	800d898 <USBD_CtlSendStatus>
      }
      break;
 800d678:	e004      	b.n	800d684 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f840 	bl	800d702 <USBD_CtlError>
      break;
 800d682:	e000      	b.n	800d686 <USBD_ClrFeature+0x3c>
      break;
 800d684:	bf00      	nop
  }
}
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	781a      	ldrb	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	781a      	ldrb	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7ff fa40 	bl	800cb3e <SWAPBYTE>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff fa33 	bl	800cb3e <SWAPBYTE>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff fa26 	bl	800cb3e <SWAPBYTE>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	80da      	strh	r2, [r3, #6]
}
 800d6fa:	bf00      	nop
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d70c:	2180      	movs	r1, #128	@ 0x80
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 fea2 	bl	800f458 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d714:	2100      	movs	r1, #0
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 fe9e 	bl	800f458 <USBD_LL_StallEP>
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d730:	2300      	movs	r3, #0
 800d732:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d036      	beq.n	800d7a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d73e:	6938      	ldr	r0, [r7, #16]
 800d740:	f000 f836 	bl	800d7b0 <USBD_GetLen>
 800d744:	4603      	mov	r3, r0
 800d746:	3301      	adds	r3, #1
 800d748:	b29b      	uxth	r3, r3
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	4413      	add	r3, r2
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	7812      	ldrb	r2, [r2, #0]
 800d75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
 800d760:	3301      	adds	r3, #1
 800d762:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	4413      	add	r3, r2
 800d76a:	2203      	movs	r2, #3
 800d76c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d76e:	7dfb      	ldrb	r3, [r7, #23]
 800d770:	3301      	adds	r3, #1
 800d772:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d774:	e013      	b.n	800d79e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	4413      	add	r3, r2
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	7812      	ldrb	r2, [r2, #0]
 800d780:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	3301      	adds	r3, #1
 800d786:	613b      	str	r3, [r7, #16]
    idx++;
 800d788:	7dfb      	ldrb	r3, [r7, #23]
 800d78a:	3301      	adds	r3, #1
 800d78c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	4413      	add	r3, r2
 800d794:	2200      	movs	r2, #0
 800d796:	701a      	strb	r2, [r3, #0]
    idx++;
 800d798:	7dfb      	ldrb	r3, [r7, #23]
 800d79a:	3301      	adds	r3, #1
 800d79c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e7      	bne.n	800d776 <USBD_GetString+0x52>
 800d7a6:	e000      	b.n	800d7aa <USBD_GetString+0x86>
    return;
 800d7a8:	bf00      	nop
  }
}
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d7c0:	e005      	b.n	800d7ce <USBD_GetLen+0x1e>
  {
    len++;
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1f5      	bne.n	800d7c2 <USBD_GetLen+0x12>
  }

  return len;
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	2100      	movs	r1, #0
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f001 fead 	bl	800f56a <USBD_LL_Transmit>

  return USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	60b9      	str	r1, [r7, #8]
 800d824:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	2100      	movs	r1, #0
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f001 fe9c 	bl	800f56a <USBD_LL_Transmit>

  return USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2203      	movs	r2, #3
 800d84c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	2100      	movs	r1, #0
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f001 fea0 	bl	800f5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	60f8      	str	r0, [r7, #12]
 800d87e:	60b9      	str	r1, [r7, #8]
 800d880:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	2100      	movs	r1, #0
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f001 fe8f 	bl	800f5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2204      	movs	r2, #4
 800d8a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f001 fe5b 	bl	800f56a <USBD_LL_Transmit>

  return USBD_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b082      	sub	sp, #8
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2205      	movs	r2, #5
 800d8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f001 fe69 	bl	800f5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d8f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8f6:	2b84      	cmp	r3, #132	@ 0x84
 800d8f8:	d005      	beq.n	800d906 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d8fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4413      	add	r3, r2
 800d902:	3303      	adds	r3, #3
 800d904:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d906:	68fb      	ldr	r3, [r7, #12]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d918:	f000 fa5c 	bl	800ddd4 <vTaskStartScheduler>
  
  return osOK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	bd80      	pop	{r7, pc}

0800d922 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d922:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d924:	b087      	sub	sp, #28
 800d926:	af02      	add	r7, sp, #8
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	685c      	ldr	r4, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d938:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff ffcf 	bl	800d8e4 <makeFreeRtosPriority>
 800d946:	4602      	mov	r2, r0
 800d948:	f107 030c 	add.w	r3, r7, #12
 800d94c:	9301      	str	r3, [sp, #4]
 800d94e:	9200      	str	r2, [sp, #0]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	4632      	mov	r2, r6
 800d954:	4629      	mov	r1, r5
 800d956:	4620      	mov	r0, r4
 800d958:	f000 f8d2 	bl	800db00 <xTaskCreate>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d001      	beq.n	800d966 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d962:	2300      	movs	r3, #0
 800d964:	e000      	b.n	800d968 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d966:	68fb      	ldr	r3, [r7, #12]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3714      	adds	r7, #20
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d970 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <osDelay+0x16>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	e000      	b.n	800d988 <osDelay+0x18>
 800d986:	2301      	movs	r3, #1
 800d988:	4618      	mov	r0, r3
 800d98a:	f000 f9ed 	bl	800dd68 <vTaskDelay>
  
  return osOK;
 800d98e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f103 0208 	add.w	r2, r3, #8
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f103 0208 	add.w	r2, r3, #8
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f103 0208 	add.w	r2, r3, #8
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9cc:	bf00      	nop
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9e6:	bf00      	nop
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b085      	sub	sp, #20
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	601a      	str	r2, [r3, #0]
}
 800da2e:	bf00      	nop
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da50:	d103      	bne.n	800da5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e00c      	b.n	800da74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3308      	adds	r3, #8
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	e002      	b.n	800da68 <vListInsert+0x2e>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	429a      	cmp	r2, r3
 800da72:	d2f6      	bcs.n	800da62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	601a      	str	r2, [r3, #0]
}
 800daa0:	bf00      	nop
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	6892      	ldr	r2, [r2, #8]
 800dac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6852      	ldr	r2, [r2, #4]
 800dacc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d103      	bne.n	800dae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	689a      	ldr	r2, [r3, #8]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	1e5a      	subs	r2, r3, #1
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db00:	b580      	push	{r7, lr}
 800db02:	b08c      	sub	sp, #48	@ 0x30
 800db04:	af04      	add	r7, sp, #16
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	603b      	str	r3, [r7, #0]
 800db0c:	4613      	mov	r3, r2
 800db0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db10:	88fb      	ldrh	r3, [r7, #6]
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4618      	mov	r0, r3
 800db16:	f000 feaf 	bl	800e878 <pvPortMalloc>
 800db1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00e      	beq.n	800db40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db22:	2054      	movs	r0, #84	@ 0x54
 800db24:	f000 fea8 	bl	800e878 <pvPortMalloc>
 800db28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	631a      	str	r2, [r3, #48]	@ 0x30
 800db36:	e005      	b.n	800db44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db38:	6978      	ldr	r0, [r7, #20]
 800db3a:	f000 ff6b 	bl	800ea14 <vPortFree>
 800db3e:	e001      	b.n	800db44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db40:	2300      	movs	r3, #0
 800db42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d013      	beq.n	800db72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db4a:	88fa      	ldrh	r2, [r7, #6]
 800db4c:	2300      	movs	r3, #0
 800db4e:	9303      	str	r3, [sp, #12]
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	9302      	str	r3, [sp, #8]
 800db54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db56:	9301      	str	r3, [sp, #4]
 800db58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	68b9      	ldr	r1, [r7, #8]
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 f80e 	bl	800db82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db66:	69f8      	ldr	r0, [r7, #28]
 800db68:	f000 f894 	bl	800dc94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db6c:	2301      	movs	r3, #1
 800db6e:	61bb      	str	r3, [r7, #24]
 800db70:	e002      	b.n	800db78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db78:	69bb      	ldr	r3, [r7, #24]
	}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b088      	sub	sp, #32
 800db86:	af00      	add	r7, sp, #0
 800db88:	60f8      	str	r0, [r7, #12]
 800db8a:	60b9      	str	r1, [r7, #8]
 800db8c:	607a      	str	r2, [r7, #4]
 800db8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db9a:	3b01      	subs	r3, #1
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	f023 0307 	bic.w	r3, r3, #7
 800dba8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	f003 0307 	and.w	r3, r3, #7
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00b      	beq.n	800dbcc <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dbc6:	bf00      	nop
 800dbc8:	bf00      	nop
 800dbca:	e7fd      	b.n	800dbc8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01f      	beq.n	800dc12 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	61fb      	str	r3, [r7, #28]
 800dbd6:	e012      	b.n	800dbfe <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	4413      	add	r3, r2
 800dbde:	7819      	ldrb	r1, [r3, #0]
 800dbe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	3334      	adds	r3, #52	@ 0x34
 800dbe8:	460a      	mov	r2, r1
 800dbea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d006      	beq.n	800dc06 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	61fb      	str	r3, [r7, #28]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2b0f      	cmp	r3, #15
 800dc02:	d9e9      	bls.n	800dbd8 <prvInitialiseNewTask+0x56>
 800dc04:	e000      	b.n	800dc08 <prvInitialiseNewTask+0x86>
			{
				break;
 800dc06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dc10:	e003      	b.n	800dc1a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1c:	2b06      	cmp	r3, #6
 800dc1e:	d901      	bls.n	800dc24 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc20:	2306      	movs	r3, #6
 800dc22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc2e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc32:	2200      	movs	r2, #0
 800dc34:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7ff fecc 	bl	800d9d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc42:	3318      	adds	r3, #24
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fec7 	bl	800d9d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc52:	f1c3 0207 	rsb	r2, r3, #7
 800dc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc62:	2200      	movs	r2, #0
 800dc64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	68f9      	ldr	r1, [r7, #12]
 800dc72:	69b8      	ldr	r0, [r7, #24]
 800dc74:	f000 fbf2 	bl	800e45c <pxPortInitialiseStack>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc8a:	bf00      	nop
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc9c:	f000 fd0c 	bl	800e6b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dca0:	4b2a      	ldr	r3, [pc, #168]	@ (800dd4c <prvAddNewTaskToReadyList+0xb8>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3301      	adds	r3, #1
 800dca6:	4a29      	ldr	r2, [pc, #164]	@ (800dd4c <prvAddNewTaskToReadyList+0xb8>)
 800dca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcaa:	4b29      	ldr	r3, [pc, #164]	@ (800dd50 <prvAddNewTaskToReadyList+0xbc>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d109      	bne.n	800dcc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcb2:	4a27      	ldr	r2, [pc, #156]	@ (800dd50 <prvAddNewTaskToReadyList+0xbc>)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcb8:	4b24      	ldr	r3, [pc, #144]	@ (800dd4c <prvAddNewTaskToReadyList+0xb8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d110      	bne.n	800dce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcc0:	f000 faaa 	bl	800e218 <prvInitialiseTaskLists>
 800dcc4:	e00d      	b.n	800dce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcc6:	4b23      	ldr	r3, [pc, #140]	@ (800dd54 <prvAddNewTaskToReadyList+0xc0>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d109      	bne.n	800dce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcce:	4b20      	ldr	r3, [pc, #128]	@ (800dd50 <prvAddNewTaskToReadyList+0xbc>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d802      	bhi.n	800dce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcdc:	4a1c      	ldr	r2, [pc, #112]	@ (800dd50 <prvAddNewTaskToReadyList+0xbc>)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dce2:	4b1d      	ldr	r3, [pc, #116]	@ (800dd58 <prvAddNewTaskToReadyList+0xc4>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	3301      	adds	r3, #1
 800dce8:	4a1b      	ldr	r2, [pc, #108]	@ (800dd58 <prvAddNewTaskToReadyList+0xc4>)
 800dcea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	409a      	lsls	r2, r3
 800dcf4:	4b19      	ldr	r3, [pc, #100]	@ (800dd5c <prvAddNewTaskToReadyList+0xc8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	4a18      	ldr	r2, [pc, #96]	@ (800dd5c <prvAddNewTaskToReadyList+0xc8>)
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4a15      	ldr	r2, [pc, #84]	@ (800dd60 <prvAddNewTaskToReadyList+0xcc>)
 800dd0c:	441a      	add	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7ff fe6c 	bl	800d9f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd1a:	f000 fcff 	bl	800e71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd54 <prvAddNewTaskToReadyList+0xc0>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00e      	beq.n	800dd44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd26:	4b0a      	ldr	r3, [pc, #40]	@ (800dd50 <prvAddNewTaskToReadyList+0xbc>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d207      	bcs.n	800dd44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd34:	4b0b      	ldr	r3, [pc, #44]	@ (800dd64 <prvAddNewTaskToReadyList+0xd0>)
 800dd36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20001f30 	.word	0x20001f30
 800dd50:	20001e30 	.word	0x20001e30
 800dd54:	20001f3c 	.word	0x20001f3c
 800dd58:	20001f4c 	.word	0x20001f4c
 800dd5c:	20001f38 	.word	0x20001f38
 800dd60:	20001e34 	.word	0x20001e34
 800dd64:	e000ed04 	.word	0xe000ed04

0800dd68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd70:	2300      	movs	r3, #0
 800dd72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d018      	beq.n	800ddac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd7a:	4b14      	ldr	r3, [pc, #80]	@ (800ddcc <vTaskDelay+0x64>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <vTaskDelay+0x32>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	60bb      	str	r3, [r7, #8]
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop
 800dd98:	e7fd      	b.n	800dd96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd9a:	f000 f863 	bl	800de64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd9e:	2100      	movs	r1, #0
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 faf5 	bl	800e390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dda6:	f000 f86b 	bl	800de80 <xTaskResumeAll>
 800ddaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d107      	bne.n	800ddc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ddb2:	4b07      	ldr	r3, [pc, #28]	@ (800ddd0 <vTaskDelay+0x68>)
 800ddb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20001f58 	.word	0x20001f58
 800ddd0:	e000ed04 	.word	0xe000ed04

0800ddd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ddda:	4b1c      	ldr	r3, [pc, #112]	@ (800de4c <vTaskStartScheduler+0x78>)
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	2300      	movs	r3, #0
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	2280      	movs	r2, #128	@ 0x80
 800dde6:	491a      	ldr	r1, [pc, #104]	@ (800de50 <vTaskStartScheduler+0x7c>)
 800dde8:	481a      	ldr	r0, [pc, #104]	@ (800de54 <vTaskStartScheduler+0x80>)
 800ddea:	f7ff fe89 	bl	800db00 <xTaskCreate>
 800ddee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d116      	bne.n	800de24 <vTaskStartScheduler+0x50>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	60bb      	str	r3, [r7, #8]
}
 800de08:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de0a:	4b13      	ldr	r3, [pc, #76]	@ (800de58 <vTaskStartScheduler+0x84>)
 800de0c:	f04f 32ff 	mov.w	r2, #4294967295
 800de10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de12:	4b12      	ldr	r3, [pc, #72]	@ (800de5c <vTaskStartScheduler+0x88>)
 800de14:	2201      	movs	r2, #1
 800de16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de18:	4b11      	ldr	r3, [pc, #68]	@ (800de60 <vTaskStartScheduler+0x8c>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de1e:	f000 fba7 	bl	800e570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de22:	e00f      	b.n	800de44 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2a:	d10b      	bne.n	800de44 <vTaskStartScheduler+0x70>
	__asm volatile
 800de2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	607b      	str	r3, [r7, #4]
}
 800de3e:	bf00      	nop
 800de40:	bf00      	nop
 800de42:	e7fd      	b.n	800de40 <vTaskStartScheduler+0x6c>
}
 800de44:	bf00      	nop
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20001f54 	.word	0x20001f54
 800de50:	08010864 	.word	0x08010864
 800de54:	0800e1e9 	.word	0x0800e1e9
 800de58:	20001f50 	.word	0x20001f50
 800de5c:	20001f3c 	.word	0x20001f3c
 800de60:	20001f34 	.word	0x20001f34

0800de64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de68:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <vTaskSuspendAll+0x18>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3301      	adds	r3, #1
 800de6e:	4a03      	ldr	r2, [pc, #12]	@ (800de7c <vTaskSuspendAll+0x18>)
 800de70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de72:	bf00      	nop
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	20001f58 	.word	0x20001f58

0800de80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de8e:	4b42      	ldr	r3, [pc, #264]	@ (800df98 <xTaskResumeAll+0x118>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10b      	bne.n	800deae <xTaskResumeAll+0x2e>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	603b      	str	r3, [r7, #0]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800deae:	f000 fc03 	bl	800e6b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800deb2:	4b39      	ldr	r3, [pc, #228]	@ (800df98 <xTaskResumeAll+0x118>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	4a37      	ldr	r2, [pc, #220]	@ (800df98 <xTaskResumeAll+0x118>)
 800deba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800debc:	4b36      	ldr	r3, [pc, #216]	@ (800df98 <xTaskResumeAll+0x118>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d161      	bne.n	800df88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dec4:	4b35      	ldr	r3, [pc, #212]	@ (800df9c <xTaskResumeAll+0x11c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d05d      	beq.n	800df88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800decc:	e02e      	b.n	800df2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dece:	4b34      	ldr	r3, [pc, #208]	@ (800dfa0 <xTaskResumeAll+0x120>)
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3318      	adds	r3, #24
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff fde6 	bl	800daac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	3304      	adds	r3, #4
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fde1 	bl	800daac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deee:	2201      	movs	r2, #1
 800def0:	409a      	lsls	r2, r3
 800def2:	4b2c      	ldr	r3, [pc, #176]	@ (800dfa4 <xTaskResumeAll+0x124>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4313      	orrs	r3, r2
 800def8:	4a2a      	ldr	r2, [pc, #168]	@ (800dfa4 <xTaskResumeAll+0x124>)
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df00:	4613      	mov	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4413      	add	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4a27      	ldr	r2, [pc, #156]	@ (800dfa8 <xTaskResumeAll+0x128>)
 800df0a:	441a      	add	r2, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	3304      	adds	r3, #4
 800df10:	4619      	mov	r1, r3
 800df12:	4610      	mov	r0, r2
 800df14:	f7ff fd6d 	bl	800d9f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df1c:	4b23      	ldr	r3, [pc, #140]	@ (800dfac <xTaskResumeAll+0x12c>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df22:	429a      	cmp	r2, r3
 800df24:	d302      	bcc.n	800df2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df26:	4b22      	ldr	r3, [pc, #136]	@ (800dfb0 <xTaskResumeAll+0x130>)
 800df28:	2201      	movs	r2, #1
 800df2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df2c:	4b1c      	ldr	r3, [pc, #112]	@ (800dfa0 <xTaskResumeAll+0x120>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1cc      	bne.n	800dece <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df3a:	f000 f9eb 	bl	800e314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df3e:	4b1d      	ldr	r3, [pc, #116]	@ (800dfb4 <xTaskResumeAll+0x134>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d010      	beq.n	800df6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df4a:	f000 f837 	bl	800dfbc <xTaskIncrementTick>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df54:	4b16      	ldr	r3, [pc, #88]	@ (800dfb0 <xTaskResumeAll+0x130>)
 800df56:	2201      	movs	r2, #1
 800df58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1f1      	bne.n	800df4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df66:	4b13      	ldr	r3, [pc, #76]	@ (800dfb4 <xTaskResumeAll+0x134>)
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df6c:	4b10      	ldr	r3, [pc, #64]	@ (800dfb0 <xTaskResumeAll+0x130>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d009      	beq.n	800df88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df74:	2301      	movs	r3, #1
 800df76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df78:	4b0f      	ldr	r3, [pc, #60]	@ (800dfb8 <xTaskResumeAll+0x138>)
 800df7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df88:	f000 fbc8 	bl	800e71c <vPortExitCritical>

	return xAlreadyYielded;
 800df8c:	68bb      	ldr	r3, [r7, #8]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20001f58 	.word	0x20001f58
 800df9c:	20001f30 	.word	0x20001f30
 800dfa0:	20001ef0 	.word	0x20001ef0
 800dfa4:	20001f38 	.word	0x20001f38
 800dfa8:	20001e34 	.word	0x20001e34
 800dfac:	20001e30 	.word	0x20001e30
 800dfb0:	20001f44 	.word	0x20001f44
 800dfb4:	20001f40 	.word	0x20001f40
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc6:	4b4f      	ldr	r3, [pc, #316]	@ (800e104 <xTaskIncrementTick+0x148>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f040 808f 	bne.w	800e0ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfd0:	4b4d      	ldr	r3, [pc, #308]	@ (800e108 <xTaskIncrementTick+0x14c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfd8:	4a4b      	ldr	r2, [pc, #300]	@ (800e108 <xTaskIncrementTick+0x14c>)
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d121      	bne.n	800e028 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfe4:	4b49      	ldr	r3, [pc, #292]	@ (800e10c <xTaskIncrementTick+0x150>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00b      	beq.n	800e006 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	603b      	str	r3, [r7, #0]
}
 800e000:	bf00      	nop
 800e002:	bf00      	nop
 800e004:	e7fd      	b.n	800e002 <xTaskIncrementTick+0x46>
 800e006:	4b41      	ldr	r3, [pc, #260]	@ (800e10c <xTaskIncrementTick+0x150>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	60fb      	str	r3, [r7, #12]
 800e00c:	4b40      	ldr	r3, [pc, #256]	@ (800e110 <xTaskIncrementTick+0x154>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a3e      	ldr	r2, [pc, #248]	@ (800e10c <xTaskIncrementTick+0x150>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	4a3e      	ldr	r2, [pc, #248]	@ (800e110 <xTaskIncrementTick+0x154>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	4b3e      	ldr	r3, [pc, #248]	@ (800e114 <xTaskIncrementTick+0x158>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3301      	adds	r3, #1
 800e020:	4a3c      	ldr	r2, [pc, #240]	@ (800e114 <xTaskIncrementTick+0x158>)
 800e022:	6013      	str	r3, [r2, #0]
 800e024:	f000 f976 	bl	800e314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e028:	4b3b      	ldr	r3, [pc, #236]	@ (800e118 <xTaskIncrementTick+0x15c>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d348      	bcc.n	800e0c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e032:	4b36      	ldr	r3, [pc, #216]	@ (800e10c <xTaskIncrementTick+0x150>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d104      	bne.n	800e046 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03c:	4b36      	ldr	r3, [pc, #216]	@ (800e118 <xTaskIncrementTick+0x15c>)
 800e03e:	f04f 32ff 	mov.w	r2, #4294967295
 800e042:	601a      	str	r2, [r3, #0]
					break;
 800e044:	e03e      	b.n	800e0c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e046:	4b31      	ldr	r3, [pc, #196]	@ (800e10c <xTaskIncrementTick+0x150>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d203      	bcs.n	800e066 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e05e:	4a2e      	ldr	r2, [pc, #184]	@ (800e118 <xTaskIncrementTick+0x15c>)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e064:	e02e      	b.n	800e0c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	3304      	adds	r3, #4
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fd1e 	bl	800daac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e074:	2b00      	cmp	r3, #0
 800e076:	d004      	beq.n	800e082 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	3318      	adds	r3, #24
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7ff fd15 	bl	800daac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	2201      	movs	r2, #1
 800e088:	409a      	lsls	r2, r3
 800e08a:	4b24      	ldr	r3, [pc, #144]	@ (800e11c <xTaskIncrementTick+0x160>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4313      	orrs	r3, r2
 800e090:	4a22      	ldr	r2, [pc, #136]	@ (800e11c <xTaskIncrementTick+0x160>)
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e120 <xTaskIncrementTick+0x164>)
 800e0a2:	441a      	add	r2, r3
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7ff fca1 	bl	800d9f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e124 <xTaskIncrementTick+0x168>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d3b9      	bcc.n	800e032 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c2:	e7b6      	b.n	800e032 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0c4:	4b17      	ldr	r3, [pc, #92]	@ (800e124 <xTaskIncrementTick+0x168>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ca:	4915      	ldr	r1, [pc, #84]	@ (800e120 <xTaskIncrementTick+0x164>)
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d901      	bls.n	800e0e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0e0:	4b11      	ldr	r3, [pc, #68]	@ (800e128 <xTaskIncrementTick+0x16c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d007      	beq.n	800e0f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	e004      	b.n	800e0f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e12c <xTaskIncrementTick+0x170>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	4a0d      	ldr	r2, [pc, #52]	@ (800e12c <xTaskIncrementTick+0x170>)
 800e0f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0f8:	697b      	ldr	r3, [r7, #20]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3718      	adds	r7, #24
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	20001f58 	.word	0x20001f58
 800e108:	20001f34 	.word	0x20001f34
 800e10c:	20001ee8 	.word	0x20001ee8
 800e110:	20001eec 	.word	0x20001eec
 800e114:	20001f48 	.word	0x20001f48
 800e118:	20001f50 	.word	0x20001f50
 800e11c:	20001f38 	.word	0x20001f38
 800e120:	20001e34 	.word	0x20001e34
 800e124:	20001e30 	.word	0x20001e30
 800e128:	20001f44 	.word	0x20001f44
 800e12c:	20001f40 	.word	0x20001f40

0800e130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e130:	b480      	push	{r7}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e136:	4b27      	ldr	r3, [pc, #156]	@ (800e1d4 <vTaskSwitchContext+0xa4>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d003      	beq.n	800e146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e13e:	4b26      	ldr	r3, [pc, #152]	@ (800e1d8 <vTaskSwitchContext+0xa8>)
 800e140:	2201      	movs	r2, #1
 800e142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e144:	e040      	b.n	800e1c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e146:	4b24      	ldr	r3, [pc, #144]	@ (800e1d8 <vTaskSwitchContext+0xa8>)
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14c:	4b23      	ldr	r3, [pc, #140]	@ (800e1dc <vTaskSwitchContext+0xac>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	fab3 f383 	clz	r3, r3
 800e158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e15a:	7afb      	ldrb	r3, [r7, #11]
 800e15c:	f1c3 031f 	rsb	r3, r3, #31
 800e160:	617b      	str	r3, [r7, #20]
 800e162:	491f      	ldr	r1, [pc, #124]	@ (800e1e0 <vTaskSwitchContext+0xb0>)
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	4613      	mov	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	440b      	add	r3, r1
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10b      	bne.n	800e18e <vTaskSwitchContext+0x5e>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17a:	f383 8811 	msr	BASEPRI, r3
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	607b      	str	r3, [r7, #4]
}
 800e188:	bf00      	nop
 800e18a:	bf00      	nop
 800e18c:	e7fd      	b.n	800e18a <vTaskSwitchContext+0x5a>
 800e18e:	697a      	ldr	r2, [r7, #20]
 800e190:	4613      	mov	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4a11      	ldr	r2, [pc, #68]	@ (800e1e0 <vTaskSwitchContext+0xb0>)
 800e19a:	4413      	add	r3, r2
 800e19c:	613b      	str	r3, [r7, #16]
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	605a      	str	r2, [r3, #4]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d104      	bne.n	800e1be <vTaskSwitchContext+0x8e>
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	605a      	str	r2, [r3, #4]
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	4a07      	ldr	r2, [pc, #28]	@ (800e1e4 <vTaskSwitchContext+0xb4>)
 800e1c6:	6013      	str	r3, [r2, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	371c      	adds	r7, #28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	20001f58 	.word	0x20001f58
 800e1d8:	20001f44 	.word	0x20001f44
 800e1dc:	20001f38 	.word	0x20001f38
 800e1e0:	20001e34 	.word	0x20001e34
 800e1e4:	20001e30 	.word	0x20001e30

0800e1e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1f0:	f000 f852 	bl	800e298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1f4:	4b06      	ldr	r3, [pc, #24]	@ (800e210 <prvIdleTask+0x28>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d9f9      	bls.n	800e1f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1fc:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <prvIdleTask+0x2c>)
 800e1fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e20c:	e7f0      	b.n	800e1f0 <prvIdleTask+0x8>
 800e20e:	bf00      	nop
 800e210:	20001e34 	.word	0x20001e34
 800e214:	e000ed04 	.word	0xe000ed04

0800e218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e21e:	2300      	movs	r3, #0
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	e00c      	b.n	800e23e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4a12      	ldr	r2, [pc, #72]	@ (800e278 <prvInitialiseTaskLists+0x60>)
 800e230:	4413      	add	r3, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff fbb0 	bl	800d998 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3301      	adds	r3, #1
 800e23c:	607b      	str	r3, [r7, #4]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b06      	cmp	r3, #6
 800e242:	d9ef      	bls.n	800e224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e244:	480d      	ldr	r0, [pc, #52]	@ (800e27c <prvInitialiseTaskLists+0x64>)
 800e246:	f7ff fba7 	bl	800d998 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e24a:	480d      	ldr	r0, [pc, #52]	@ (800e280 <prvInitialiseTaskLists+0x68>)
 800e24c:	f7ff fba4 	bl	800d998 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e250:	480c      	ldr	r0, [pc, #48]	@ (800e284 <prvInitialiseTaskLists+0x6c>)
 800e252:	f7ff fba1 	bl	800d998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e256:	480c      	ldr	r0, [pc, #48]	@ (800e288 <prvInitialiseTaskLists+0x70>)
 800e258:	f7ff fb9e 	bl	800d998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e25c:	480b      	ldr	r0, [pc, #44]	@ (800e28c <prvInitialiseTaskLists+0x74>)
 800e25e:	f7ff fb9b 	bl	800d998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e262:	4b0b      	ldr	r3, [pc, #44]	@ (800e290 <prvInitialiseTaskLists+0x78>)
 800e264:	4a05      	ldr	r2, [pc, #20]	@ (800e27c <prvInitialiseTaskLists+0x64>)
 800e266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e268:	4b0a      	ldr	r3, [pc, #40]	@ (800e294 <prvInitialiseTaskLists+0x7c>)
 800e26a:	4a05      	ldr	r2, [pc, #20]	@ (800e280 <prvInitialiseTaskLists+0x68>)
 800e26c:	601a      	str	r2, [r3, #0]
}
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20001e34 	.word	0x20001e34
 800e27c:	20001ec0 	.word	0x20001ec0
 800e280:	20001ed4 	.word	0x20001ed4
 800e284:	20001ef0 	.word	0x20001ef0
 800e288:	20001f04 	.word	0x20001f04
 800e28c:	20001f1c 	.word	0x20001f1c
 800e290:	20001ee8 	.word	0x20001ee8
 800e294:	20001eec 	.word	0x20001eec

0800e298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e29e:	e019      	b.n	800e2d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2a0:	f000 fa0a 	bl	800e6b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a4:	4b10      	ldr	r3, [pc, #64]	@ (800e2e8 <prvCheckTasksWaitingTermination+0x50>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fbfb 	bl	800daac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <prvCheckTasksWaitingTermination+0x54>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	4a0b      	ldr	r2, [pc, #44]	@ (800e2ec <prvCheckTasksWaitingTermination+0x54>)
 800e2be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	4a0a      	ldr	r2, [pc, #40]	@ (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2ca:	f000 fa27 	bl	800e71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f810 	bl	800e2f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2d4:	4b06      	ldr	r3, [pc, #24]	@ (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1e1      	bne.n	800e2a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20001f04 	.word	0x20001f04
 800e2ec:	20001f30 	.word	0x20001f30
 800e2f0:	20001f18 	.word	0x20001f18

0800e2f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e300:	4618      	mov	r0, r3
 800e302:	f000 fb87 	bl	800ea14 <vPortFree>
			vPortFree( pxTCB );
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fb84 	bl	800ea14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e30c:	bf00      	nop
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e31a:	4b0c      	ldr	r3, [pc, #48]	@ (800e34c <prvResetNextTaskUnblockTime+0x38>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d104      	bne.n	800e32e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e324:	4b0a      	ldr	r3, [pc, #40]	@ (800e350 <prvResetNextTaskUnblockTime+0x3c>)
 800e326:	f04f 32ff 	mov.w	r2, #4294967295
 800e32a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e32c:	e008      	b.n	800e340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32e:	4b07      	ldr	r3, [pc, #28]	@ (800e34c <prvResetNextTaskUnblockTime+0x38>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	4a04      	ldr	r2, [pc, #16]	@ (800e350 <prvResetNextTaskUnblockTime+0x3c>)
 800e33e:	6013      	str	r3, [r2, #0]
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	20001ee8 	.word	0x20001ee8
 800e350:	20001f50 	.word	0x20001f50

0800e354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e35a:	4b0b      	ldr	r3, [pc, #44]	@ (800e388 <xTaskGetSchedulerState+0x34>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d102      	bne.n	800e368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e362:	2301      	movs	r3, #1
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	e008      	b.n	800e37a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e368:	4b08      	ldr	r3, [pc, #32]	@ (800e38c <xTaskGetSchedulerState+0x38>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e370:	2302      	movs	r3, #2
 800e372:	607b      	str	r3, [r7, #4]
 800e374:	e001      	b.n	800e37a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e376:	2300      	movs	r3, #0
 800e378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e37a:	687b      	ldr	r3, [r7, #4]
	}
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	20001f3c 	.word	0x20001f3c
 800e38c:	20001f58 	.word	0x20001f58

0800e390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e39a:	4b29      	ldr	r3, [pc, #164]	@ (800e440 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3a0:	4b28      	ldr	r3, [pc, #160]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff fb80 	bl	800daac <uxListRemove>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10b      	bne.n	800e3ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e3b2:	4b24      	ldr	r3, [pc, #144]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e3be:	43da      	mvns	r2, r3
 800e3c0:	4b21      	ldr	r3, [pc, #132]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	4a20      	ldr	r2, [pc, #128]	@ (800e448 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d0:	d10a      	bne.n	800e3e8 <prvAddCurrentTaskToDelayedList+0x58>
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d007      	beq.n	800e3e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	4619      	mov	r1, r3
 800e3e0:	481a      	ldr	r0, [pc, #104]	@ (800e44c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e3e2:	f7ff fb06 	bl	800d9f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3e6:	e026      	b.n	800e436 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3f0:	4b14      	ldr	r3, [pc, #80]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d209      	bcs.n	800e414 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e400:	4b13      	ldr	r3, [pc, #76]	@ (800e450 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	4b0f      	ldr	r3, [pc, #60]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3304      	adds	r3, #4
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7ff fb14 	bl	800da3a <vListInsert>
}
 800e412:	e010      	b.n	800e436 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e414:	4b0f      	ldr	r3, [pc, #60]	@ (800e454 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	4b0a      	ldr	r3, [pc, #40]	@ (800e444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3304      	adds	r3, #4
 800e41e:	4619      	mov	r1, r3
 800e420:	4610      	mov	r0, r2
 800e422:	f7ff fb0a 	bl	800da3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e426:	4b0c      	ldr	r3, [pc, #48]	@ (800e458 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d202      	bcs.n	800e436 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e430:	4a09      	ldr	r2, [pc, #36]	@ (800e458 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6013      	str	r3, [r2, #0]
}
 800e436:	bf00      	nop
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20001f34 	.word	0x20001f34
 800e444:	20001e30 	.word	0x20001e30
 800e448:	20001f38 	.word	0x20001f38
 800e44c:	20001f1c 	.word	0x20001f1c
 800e450:	20001eec 	.word	0x20001eec
 800e454:	20001ee8 	.word	0x20001ee8
 800e458:	20001f50 	.word	0x20001f50

0800e45c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3b04      	subs	r3, #4
 800e46c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3b04      	subs	r3, #4
 800e47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f023 0201 	bic.w	r2, r3, #1
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	3b04      	subs	r3, #4
 800e48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e48c:	4a0c      	ldr	r2, [pc, #48]	@ (800e4c0 <pxPortInitialiseStack+0x64>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3b14      	subs	r3, #20
 800e496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f06f 0202 	mvn.w	r2, #2
 800e4aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	3b20      	subs	r3, #32
 800e4b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	0800e4c5 	.word	0x0800e4c5

0800e4c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4ce:	4b13      	ldr	r3, [pc, #76]	@ (800e51c <prvTaskExitError+0x58>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d6:	d00b      	beq.n	800e4f0 <prvTaskExitError+0x2c>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	60fb      	str	r3, [r7, #12]
}
 800e4ea:	bf00      	nop
 800e4ec:	bf00      	nop
 800e4ee:	e7fd      	b.n	800e4ec <prvTaskExitError+0x28>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	60bb      	str	r3, [r7, #8]
}
 800e502:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e504:	bf00      	nop
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d0fc      	beq.n	800e506 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	200000ec 	.word	0x200000ec

0800e520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e520:	4b07      	ldr	r3, [pc, #28]	@ (800e540 <pxCurrentTCBConst2>)
 800e522:	6819      	ldr	r1, [r3, #0]
 800e524:	6808      	ldr	r0, [r1, #0]
 800e526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52a:	f380 8809 	msr	PSP, r0
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f04f 0000 	mov.w	r0, #0
 800e536:	f380 8811 	msr	BASEPRI, r0
 800e53a:	4770      	bx	lr
 800e53c:	f3af 8000 	nop.w

0800e540 <pxCurrentTCBConst2>:
 800e540:	20001e30 	.word	0x20001e30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop

0800e548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e548:	4808      	ldr	r0, [pc, #32]	@ (800e56c <prvPortStartFirstTask+0x24>)
 800e54a:	6800      	ldr	r0, [r0, #0]
 800e54c:	6800      	ldr	r0, [r0, #0]
 800e54e:	f380 8808 	msr	MSP, r0
 800e552:	f04f 0000 	mov.w	r0, #0
 800e556:	f380 8814 	msr	CONTROL, r0
 800e55a:	b662      	cpsie	i
 800e55c:	b661      	cpsie	f
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	df00      	svc	0
 800e568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e56a:	bf00      	nop
 800e56c:	e000ed08 	.word	0xe000ed08

0800e570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e576:	4b47      	ldr	r3, [pc, #284]	@ (800e694 <xPortStartScheduler+0x124>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a47      	ldr	r2, [pc, #284]	@ (800e698 <xPortStartScheduler+0x128>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d10b      	bne.n	800e598 <xPortStartScheduler+0x28>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	613b      	str	r3, [r7, #16]
}
 800e592:	bf00      	nop
 800e594:	bf00      	nop
 800e596:	e7fd      	b.n	800e594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e598:	4b3e      	ldr	r3, [pc, #248]	@ (800e694 <xPortStartScheduler+0x124>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a3f      	ldr	r2, [pc, #252]	@ (800e69c <xPortStartScheduler+0x12c>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d10b      	bne.n	800e5ba <xPortStartScheduler+0x4a>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	60fb      	str	r3, [r7, #12]
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop
 800e5b8:	e7fd      	b.n	800e5b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5ba:	4b39      	ldr	r3, [pc, #228]	@ (800e6a0 <xPortStartScheduler+0x130>)
 800e5bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	22ff      	movs	r2, #255	@ 0xff
 800e5ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	4b31      	ldr	r3, [pc, #196]	@ (800e6a4 <xPortStartScheduler+0x134>)
 800e5e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5e2:	4b31      	ldr	r3, [pc, #196]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5e4:	2207      	movs	r2, #7
 800e5e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5e8:	e009      	b.n	800e5fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5fe:	78fb      	ldrb	r3, [r7, #3]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e606:	2b80      	cmp	r3, #128	@ 0x80
 800e608:	d0ef      	beq.n	800e5ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e60a:	4b27      	ldr	r3, [pc, #156]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f1c3 0307 	rsb	r3, r3, #7
 800e612:	2b04      	cmp	r3, #4
 800e614:	d00b      	beq.n	800e62e <xPortStartScheduler+0xbe>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	60bb      	str	r3, [r7, #8]
}
 800e628:	bf00      	nop
 800e62a:	bf00      	nop
 800e62c:	e7fd      	b.n	800e62a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e62e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	021b      	lsls	r3, r3, #8
 800e634:	4a1c      	ldr	r2, [pc, #112]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e638:	4b1b      	ldr	r3, [pc, #108]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e640:	4a19      	ldr	r2, [pc, #100]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	b2da      	uxtb	r2, r3
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e64c:	4b17      	ldr	r3, [pc, #92]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a16      	ldr	r2, [pc, #88]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e658:	4b14      	ldr	r3, [pc, #80]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a13      	ldr	r2, [pc, #76]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e664:	f000 f8da 	bl	800e81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e668:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <xPortStartScheduler+0x140>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e66e:	f000 f8f9 	bl	800e864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e672:	4b10      	ldr	r3, [pc, #64]	@ (800e6b4 <xPortStartScheduler+0x144>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a0f      	ldr	r2, [pc, #60]	@ (800e6b4 <xPortStartScheduler+0x144>)
 800e678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e67e:	f7ff ff63 	bl	800e548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e682:	f7ff fd55 	bl	800e130 <vTaskSwitchContext>
	prvTaskExitError();
 800e686:	f7ff ff1d 	bl	800e4c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	e000ed00 	.word	0xe000ed00
 800e698:	410fc271 	.word	0x410fc271
 800e69c:	410fc270 	.word	0x410fc270
 800e6a0:	e000e400 	.word	0xe000e400
 800e6a4:	20001f5c 	.word	0x20001f5c
 800e6a8:	20001f60 	.word	0x20001f60
 800e6ac:	e000ed20 	.word	0xe000ed20
 800e6b0:	200000ec 	.word	0x200000ec
 800e6b4:	e000ef34 	.word	0xe000ef34

0800e6b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6d2:	4b10      	ldr	r3, [pc, #64]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d110      	bne.n	800e706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e718 <vPortEnterCritical+0x60>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00b      	beq.n	800e706 <vPortEnterCritical+0x4e>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	603b      	str	r3, [r7, #0]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <vPortEnterCritical+0x4a>
	}
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	200000ec 	.word	0x200000ec
 800e718:	e000ed04 	.word	0xe000ed04

0800e71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e722:	4b12      	ldr	r3, [pc, #72]	@ (800e76c <vPortExitCritical+0x50>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10b      	bne.n	800e742 <vPortExitCritical+0x26>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	607b      	str	r3, [r7, #4]
}
 800e73c:	bf00      	nop
 800e73e:	bf00      	nop
 800e740:	e7fd      	b.n	800e73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e742:	4b0a      	ldr	r3, [pc, #40]	@ (800e76c <vPortExitCritical+0x50>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3b01      	subs	r3, #1
 800e748:	4a08      	ldr	r2, [pc, #32]	@ (800e76c <vPortExitCritical+0x50>)
 800e74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e74c:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <vPortExitCritical+0x50>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d105      	bne.n	800e760 <vPortExitCritical+0x44>
 800e754:	2300      	movs	r3, #0
 800e756:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	200000ec 	.word	0x200000ec

0800e770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e770:	f3ef 8009 	mrs	r0, PSP
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	4b15      	ldr	r3, [pc, #84]	@ (800e7d0 <pxCurrentTCBConst>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	f01e 0f10 	tst.w	lr, #16
 800e780:	bf08      	it	eq
 800e782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	6010      	str	r0, [r2, #0]
 800e78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e794:	f380 8811 	msr	BASEPRI, r0
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f7ff fcc6 	bl	800e130 <vTaskSwitchContext>
 800e7a4:	f04f 0000 	mov.w	r0, #0
 800e7a8:	f380 8811 	msr	BASEPRI, r0
 800e7ac:	bc09      	pop	{r0, r3}
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	f01e 0f10 	tst.w	lr, #16
 800e7ba:	bf08      	it	eq
 800e7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7c0:	f380 8809 	msr	PSP, r0
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	f3af 8000 	nop.w

0800e7d0 <pxCurrentTCBConst>:
 800e7d0:	20001e30 	.word	0x20001e30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop

0800e7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
}
 800e7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7f2:	f7ff fbe3 	bl	800dfbc <xTaskIncrementTick>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d003      	beq.n	800e804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7fc:	4b06      	ldr	r3, [pc, #24]	@ (800e818 <xPortSysTickHandler+0x40>)
 800e7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	2300      	movs	r3, #0
 800e806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f383 8811 	msr	BASEPRI, r3
}
 800e80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	e000ed04 	.word	0xe000ed04

0800e81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e820:	4b0b      	ldr	r3, [pc, #44]	@ (800e850 <vPortSetupTimerInterrupt+0x34>)
 800e822:	2200      	movs	r2, #0
 800e824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e826:	4b0b      	ldr	r3, [pc, #44]	@ (800e854 <vPortSetupTimerInterrupt+0x38>)
 800e828:	2200      	movs	r2, #0
 800e82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e82c:	4b0a      	ldr	r3, [pc, #40]	@ (800e858 <vPortSetupTimerInterrupt+0x3c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a0a      	ldr	r2, [pc, #40]	@ (800e85c <vPortSetupTimerInterrupt+0x40>)
 800e832:	fba2 2303 	umull	r2, r3, r2, r3
 800e836:	099b      	lsrs	r3, r3, #6
 800e838:	4a09      	ldr	r2, [pc, #36]	@ (800e860 <vPortSetupTimerInterrupt+0x44>)
 800e83a:	3b01      	subs	r3, #1
 800e83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e83e:	4b04      	ldr	r3, [pc, #16]	@ (800e850 <vPortSetupTimerInterrupt+0x34>)
 800e840:	2207      	movs	r2, #7
 800e842:	601a      	str	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	e000e010 	.word	0xe000e010
 800e854:	e000e018 	.word	0xe000e018
 800e858:	20000000 	.word	0x20000000
 800e85c:	10624dd3 	.word	0x10624dd3
 800e860:	e000e014 	.word	0xe000e014

0800e864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e874 <vPortEnableVFP+0x10>
 800e868:	6801      	ldr	r1, [r0, #0]
 800e86a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e86e:	6001      	str	r1, [r0, #0]
 800e870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e872:	bf00      	nop
 800e874:	e000ed88 	.word	0xe000ed88

0800e878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	@ 0x28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e880:	2300      	movs	r3, #0
 800e882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e884:	f7ff faee 	bl	800de64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e888:	4b5c      	ldr	r3, [pc, #368]	@ (800e9fc <pvPortMalloc+0x184>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e890:	f000 f924 	bl	800eadc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e894:	4b5a      	ldr	r3, [pc, #360]	@ (800ea00 <pvPortMalloc+0x188>)
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4013      	ands	r3, r2
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f040 8095 	bne.w	800e9cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01e      	beq.n	800e8e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e8a8:	2208      	movs	r2, #8
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d015      	beq.n	800e8e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f023 0307 	bic.w	r3, r3, #7
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f003 0307 	and.w	r3, r3, #7
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <pvPortMalloc+0x6e>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	617b      	str	r3, [r7, #20]
}
 800e8e0:	bf00      	nop
 800e8e2:	bf00      	nop
 800e8e4:	e7fd      	b.n	800e8e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d06f      	beq.n	800e9cc <pvPortMalloc+0x154>
 800e8ec:	4b45      	ldr	r3, [pc, #276]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d86a      	bhi.n	800e9cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8f6:	4b44      	ldr	r3, [pc, #272]	@ (800ea08 <pvPortMalloc+0x190>)
 800e8f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8fa:	4b43      	ldr	r3, [pc, #268]	@ (800ea08 <pvPortMalloc+0x190>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e900:	e004      	b.n	800e90c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e904:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	429a      	cmp	r2, r3
 800e914:	d903      	bls.n	800e91e <pvPortMalloc+0xa6>
 800e916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1f1      	bne.n	800e902 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e91e:	4b37      	ldr	r3, [pc, #220]	@ (800e9fc <pvPortMalloc+0x184>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e924:	429a      	cmp	r2, r3
 800e926:	d051      	beq.n	800e9cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2208      	movs	r2, #8
 800e92e:	4413      	add	r3, r2
 800e930:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	1ad2      	subs	r2, r2, r3
 800e942:	2308      	movs	r3, #8
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	429a      	cmp	r2, r3
 800e948:	d920      	bls.n	800e98c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e94a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4413      	add	r3, r2
 800e950:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	f003 0307 	and.w	r3, r3, #7
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00b      	beq.n	800e974 <pvPortMalloc+0xfc>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	613b      	str	r3, [r7, #16]
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	685a      	ldr	r2, [r3, #4]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	1ad2      	subs	r2, r2, r3
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e986:	69b8      	ldr	r0, [r7, #24]
 800e988:	f000 f90a 	bl	800eba0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e98c:	4b1d      	ldr	r3, [pc, #116]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	4a1b      	ldr	r2, [pc, #108]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e99a:	4b1a      	ldr	r3, [pc, #104]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	4b1b      	ldr	r3, [pc, #108]	@ (800ea0c <pvPortMalloc+0x194>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d203      	bcs.n	800e9ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9a6:	4b17      	ldr	r3, [pc, #92]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a18      	ldr	r2, [pc, #96]	@ (800ea0c <pvPortMalloc+0x194>)
 800e9ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	4b13      	ldr	r3, [pc, #76]	@ (800ea00 <pvPortMalloc+0x188>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	431a      	orrs	r2, r3
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9be:	2200      	movs	r2, #0
 800e9c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ea10 <pvPortMalloc+0x198>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	4a11      	ldr	r2, [pc, #68]	@ (800ea10 <pvPortMalloc+0x198>)
 800e9ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9cc:	f7ff fa58 	bl	800de80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	f003 0307 	and.w	r3, r3, #7
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00b      	beq.n	800e9f2 <pvPortMalloc+0x17a>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	60fb      	str	r3, [r7, #12]
}
 800e9ec:	bf00      	nop
 800e9ee:	bf00      	nop
 800e9f0:	e7fd      	b.n	800e9ee <pvPortMalloc+0x176>
	return pvReturn;
 800e9f2:	69fb      	ldr	r3, [r7, #28]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3728      	adds	r7, #40	@ 0x28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	20006f6c 	.word	0x20006f6c
 800ea00:	20006f80 	.word	0x20006f80
 800ea04:	20006f70 	.word	0x20006f70
 800ea08:	20006f64 	.word	0x20006f64
 800ea0c:	20006f74 	.word	0x20006f74
 800ea10:	20006f78 	.word	0x20006f78

0800ea14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d04f      	beq.n	800eac6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea26:	2308      	movs	r3, #8
 800ea28:	425b      	negs	r3, r3
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	4b25      	ldr	r3, [pc, #148]	@ (800ead0 <vPortFree+0xbc>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10b      	bne.n	800ea5a <vPortFree+0x46>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60fb      	str	r3, [r7, #12]
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	e7fd      	b.n	800ea56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <vPortFree+0x66>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	60bb      	str	r3, [r7, #8]
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	e7fd      	b.n	800ea76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	4b14      	ldr	r3, [pc, #80]	@ (800ead0 <vPortFree+0xbc>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4013      	ands	r3, r2
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d01e      	beq.n	800eac6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d11a      	bne.n	800eac6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	4b0e      	ldr	r3, [pc, #56]	@ (800ead0 <vPortFree+0xbc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	401a      	ands	r2, r3
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaa0:	f7ff f9e0 	bl	800de64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ead4 <vPortFree+0xc0>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4413      	add	r3, r2
 800eaae:	4a09      	ldr	r2, [pc, #36]	@ (800ead4 <vPortFree+0xc0>)
 800eab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eab2:	6938      	ldr	r0, [r7, #16]
 800eab4:	f000 f874 	bl	800eba0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eab8:	4b07      	ldr	r3, [pc, #28]	@ (800ead8 <vPortFree+0xc4>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3301      	adds	r3, #1
 800eabe:	4a06      	ldr	r2, [pc, #24]	@ (800ead8 <vPortFree+0xc4>)
 800eac0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eac2:	f7ff f9dd 	bl	800de80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eac6:	bf00      	nop
 800eac8:	3718      	adds	r7, #24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	20006f80 	.word	0x20006f80
 800ead4:	20006f70 	.word	0x20006f70
 800ead8:	20006f7c 	.word	0x20006f7c

0800eadc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eae2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800eae6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eae8:	4b27      	ldr	r3, [pc, #156]	@ (800eb88 <prvHeapInit+0xac>)
 800eaea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f003 0307 	and.w	r3, r3, #7
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00c      	beq.n	800eb10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3307      	adds	r3, #7
 800eafa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f023 0307 	bic.w	r3, r3, #7
 800eb02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800eb88 <prvHeapInit+0xac>)
 800eb0c:	4413      	add	r3, r2
 800eb0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb14:	4a1d      	ldr	r2, [pc, #116]	@ (800eb8c <prvHeapInit+0xb0>)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb1a:	4b1c      	ldr	r3, [pc, #112]	@ (800eb8c <prvHeapInit+0xb0>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	4413      	add	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb28:	2208      	movs	r2, #8
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	1a9b      	subs	r3, r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 0307 	bic.w	r3, r3, #7
 800eb36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4a15      	ldr	r2, [pc, #84]	@ (800eb90 <prvHeapInit+0xb4>)
 800eb3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb3e:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <prvHeapInit+0xb4>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb46:	4b12      	ldr	r3, [pc, #72]	@ (800eb90 <prvHeapInit+0xb4>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	1ad2      	subs	r2, r2, r3
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb5c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb90 <prvHeapInit+0xb4>)
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	4a0a      	ldr	r2, [pc, #40]	@ (800eb94 <prvHeapInit+0xb8>)
 800eb6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	4a09      	ldr	r2, [pc, #36]	@ (800eb98 <prvHeapInit+0xbc>)
 800eb72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb74:	4b09      	ldr	r3, [pc, #36]	@ (800eb9c <prvHeapInit+0xc0>)
 800eb76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb7a:	601a      	str	r2, [r3, #0]
}
 800eb7c:	bf00      	nop
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr
 800eb88:	20001f64 	.word	0x20001f64
 800eb8c:	20006f64 	.word	0x20006f64
 800eb90:	20006f6c 	.word	0x20006f6c
 800eb94:	20006f74 	.word	0x20006f74
 800eb98:	20006f70 	.word	0x20006f70
 800eb9c:	20006f80 	.word	0x20006f80

0800eba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eba8:	4b28      	ldr	r3, [pc, #160]	@ (800ec4c <prvInsertBlockIntoFreeList+0xac>)
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	e002      	b.n	800ebb4 <prvInsertBlockIntoFreeList+0x14>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d8f7      	bhi.n	800ebae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	4413      	add	r3, r2
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d108      	bne.n	800ebe2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	441a      	add	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	441a      	add	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d118      	bne.n	800ec28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	4b15      	ldr	r3, [pc, #84]	@ (800ec50 <prvInsertBlockIntoFreeList+0xb0>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d00d      	beq.n	800ec1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	685a      	ldr	r2, [r3, #4]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	441a      	add	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	e008      	b.n	800ec30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec50 <prvInsertBlockIntoFreeList+0xb0>)
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	e003      	b.n	800ec30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d002      	beq.n	800ec3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec3e:	bf00      	nop
 800ec40:	3714      	adds	r7, #20
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	20006f64 	.word	0x20006f64
 800ec50:	20006f6c 	.word	0x20006f6c

0800ec54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4912      	ldr	r1, [pc, #72]	@ (800eca4 <MX_USB_DEVICE_Init+0x50>)
 800ec5c:	4812      	ldr	r0, [pc, #72]	@ (800eca8 <MX_USB_DEVICE_Init+0x54>)
 800ec5e:	f7fd fb4b 	bl	800c2f8 <USBD_Init>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec68:	f7f2 f85b 	bl	8000d22 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec6c:	490f      	ldr	r1, [pc, #60]	@ (800ecac <MX_USB_DEVICE_Init+0x58>)
 800ec6e:	480e      	ldr	r0, [pc, #56]	@ (800eca8 <MX_USB_DEVICE_Init+0x54>)
 800ec70:	f7fd fb72 	bl	800c358 <USBD_RegisterClass>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ec7a:	f7f2 f852 	bl	8000d22 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ec7e:	490c      	ldr	r1, [pc, #48]	@ (800ecb0 <MX_USB_DEVICE_Init+0x5c>)
 800ec80:	4809      	ldr	r0, [pc, #36]	@ (800eca8 <MX_USB_DEVICE_Init+0x54>)
 800ec82:	f7fd fa67 	bl	800c154 <USBD_CDC_RegisterInterface>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec8c:	f7f2 f849 	bl	8000d22 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec90:	4805      	ldr	r0, [pc, #20]	@ (800eca8 <MX_USB_DEVICE_Init+0x54>)
 800ec92:	f7fd fb97 	bl	800c3c4 <USBD_Start>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ec9c:	f7f2 f841 	bl	8000d22 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eca0:	bf00      	nop
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20000104 	.word	0x20000104
 800eca8:	20006f84 	.word	0x20006f84
 800ecac:	20000090 	.word	0x20000090
 800ecb0:	200000f0 	.word	0x200000f0

0800ecb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecb8:	2200      	movs	r2, #0
 800ecba:	4905      	ldr	r1, [pc, #20]	@ (800ecd0 <CDC_Init_FS+0x1c>)
 800ecbc:	4805      	ldr	r0, [pc, #20]	@ (800ecd4 <CDC_Init_FS+0x20>)
 800ecbe:	f7fd fa65 	bl	800c18c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecc2:	4905      	ldr	r1, [pc, #20]	@ (800ecd8 <CDC_Init_FS+0x24>)
 800ecc4:	4803      	ldr	r0, [pc, #12]	@ (800ecd4 <CDC_Init_FS+0x20>)
 800ecc6:	f7fd fa83 	bl	800c1d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ecca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	20007a60 	.word	0x20007a60
 800ecd4:	20006f84 	.word	0x20006f84
 800ecd8:	20007260 	.word	0x20007260

0800ecdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ece0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	6039      	str	r1, [r7, #0]
 800ecf6:	71fb      	strb	r3, [r7, #7]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	2b23      	cmp	r3, #35	@ 0x23
 800ed00:	d84a      	bhi.n	800ed98 <CDC_Control_FS+0xac>
 800ed02:	a201      	add	r2, pc, #4	@ (adr r2, 800ed08 <CDC_Control_FS+0x1c>)
 800ed04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed08:	0800ed99 	.word	0x0800ed99
 800ed0c:	0800ed99 	.word	0x0800ed99
 800ed10:	0800ed99 	.word	0x0800ed99
 800ed14:	0800ed99 	.word	0x0800ed99
 800ed18:	0800ed99 	.word	0x0800ed99
 800ed1c:	0800ed99 	.word	0x0800ed99
 800ed20:	0800ed99 	.word	0x0800ed99
 800ed24:	0800ed99 	.word	0x0800ed99
 800ed28:	0800ed99 	.word	0x0800ed99
 800ed2c:	0800ed99 	.word	0x0800ed99
 800ed30:	0800ed99 	.word	0x0800ed99
 800ed34:	0800ed99 	.word	0x0800ed99
 800ed38:	0800ed99 	.word	0x0800ed99
 800ed3c:	0800ed99 	.word	0x0800ed99
 800ed40:	0800ed99 	.word	0x0800ed99
 800ed44:	0800ed99 	.word	0x0800ed99
 800ed48:	0800ed99 	.word	0x0800ed99
 800ed4c:	0800ed99 	.word	0x0800ed99
 800ed50:	0800ed99 	.word	0x0800ed99
 800ed54:	0800ed99 	.word	0x0800ed99
 800ed58:	0800ed99 	.word	0x0800ed99
 800ed5c:	0800ed99 	.word	0x0800ed99
 800ed60:	0800ed99 	.word	0x0800ed99
 800ed64:	0800ed99 	.word	0x0800ed99
 800ed68:	0800ed99 	.word	0x0800ed99
 800ed6c:	0800ed99 	.word	0x0800ed99
 800ed70:	0800ed99 	.word	0x0800ed99
 800ed74:	0800ed99 	.word	0x0800ed99
 800ed78:	0800ed99 	.word	0x0800ed99
 800ed7c:	0800ed99 	.word	0x0800ed99
 800ed80:	0800ed99 	.word	0x0800ed99
 800ed84:	0800ed99 	.word	0x0800ed99
 800ed88:	0800ed99 	.word	0x0800ed99
 800ed8c:	0800ed99 	.word	0x0800ed99
 800ed90:	0800ed99 	.word	0x0800ed99
 800ed94:	0800ed99 	.word	0x0800ed99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ed98:	bf00      	nop
  }

  return (USBD_OK);
 800ed9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <CDC_Receive_FS+0x34>)
 800edb6:	f7fd fa0b 	bl	800c1d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edba:	4808      	ldr	r0, [pc, #32]	@ (800eddc <CDC_Receive_FS+0x34>)
 800edbc:	f7fd fa66 	bl	800c28c <USBD_CDC_ReceivePacket>
//  	  len = *Len;
//  	  memcpy(report_buffer, Buf, *Len);
//  	  flag_rx = 1;
  Add_toContain(&Usb_containData, Buf, *Len);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	461a      	mov	r2, r3
 800edc8:	6879      	ldr	r1, [r7, #4]
 800edca:	4805      	ldr	r0, [pc, #20]	@ (800ede0 <CDC_Receive_FS+0x38>)
 800edcc:	f7f1 fcf0 	bl	80007b0 <Add_toContain>
  return (USBD_OK);
 800edd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20006f84 	.word	0x20006f84
 800ede0:	200001e8 	.word	0x200001e8

0800ede4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	460b      	mov	r3, r1
 800edee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800edf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ee2c <CDC_Transmit_FS+0x48>)
 800edf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee06:	2301      	movs	r3, #1
 800ee08:	e00b      	b.n	800ee22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee0a:	887b      	ldrh	r3, [r7, #2]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	4806      	ldr	r0, [pc, #24]	@ (800ee2c <CDC_Transmit_FS+0x48>)
 800ee12:	f7fd f9bb 	bl	800c18c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee16:	4805      	ldr	r0, [pc, #20]	@ (800ee2c <CDC_Transmit_FS+0x48>)
 800ee18:	f7fd f9f8 	bl	800c20c <USBD_CDC_TransmitPacket>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20006f84 	.word	0x20006f84

0800ee30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	371c      	adds	r7, #28
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
	...

0800ee54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	6039      	str	r1, [r7, #0]
 800ee5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2212      	movs	r2, #18
 800ee64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee66:	4b03      	ldr	r3, [pc, #12]	@ (800ee74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	20000120 	.word	0x20000120

0800ee78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	4603      	mov	r3, r0
 800ee80:	6039      	str	r1, [r7, #0]
 800ee82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2204      	movs	r2, #4
 800ee88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee8a:	4b03      	ldr	r3, [pc, #12]	@ (800ee98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	20000134 	.word	0x20000134

0800ee9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	6039      	str	r1, [r7, #0]
 800eea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d105      	bne.n	800eeba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	4907      	ldr	r1, [pc, #28]	@ (800eed0 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeb2:	4808      	ldr	r0, [pc, #32]	@ (800eed4 <USBD_FS_ProductStrDescriptor+0x38>)
 800eeb4:	f7fe fc36 	bl	800d724 <USBD_GetString>
 800eeb8:	e004      	b.n	800eec4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	4904      	ldr	r1, [pc, #16]	@ (800eed0 <USBD_FS_ProductStrDescriptor+0x34>)
 800eebe:	4805      	ldr	r0, [pc, #20]	@ (800eed4 <USBD_FS_ProductStrDescriptor+0x38>)
 800eec0:	f7fe fc30 	bl	800d724 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eec4:	4b02      	ldr	r3, [pc, #8]	@ (800eed0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20008260 	.word	0x20008260
 800eed4:	0801086c 	.word	0x0801086c

0800eed8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	4904      	ldr	r1, [pc, #16]	@ (800eef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eee8:	4804      	ldr	r0, [pc, #16]	@ (800eefc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eeea:	f7fe fc1b 	bl	800d724 <USBD_GetString>
  return USBD_StrDesc;
 800eeee:	4b02      	ldr	r3, [pc, #8]	@ (800eef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	20008260 	.word	0x20008260
 800eefc:	08010884 	.word	0x08010884

0800ef00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	6039      	str	r1, [r7, #0]
 800ef0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	221a      	movs	r2, #26
 800ef10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef12:	f000 f843 	bl	800ef9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef16:	4b02      	ldr	r3, [pc, #8]	@ (800ef20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	20000138 	.word	0x20000138

0800ef24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	6039      	str	r1, [r7, #0]
 800ef2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d105      	bne.n	800ef42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	4907      	ldr	r1, [pc, #28]	@ (800ef58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef3a:	4808      	ldr	r0, [pc, #32]	@ (800ef5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef3c:	f7fe fbf2 	bl	800d724 <USBD_GetString>
 800ef40:	e004      	b.n	800ef4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	4904      	ldr	r1, [pc, #16]	@ (800ef58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef46:	4805      	ldr	r0, [pc, #20]	@ (800ef5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef48:	f7fe fbec 	bl	800d724 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef4c:	4b02      	ldr	r3, [pc, #8]	@ (800ef58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20008260 	.word	0x20008260
 800ef5c:	08010898 	.word	0x08010898

0800ef60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	4603      	mov	r3, r0
 800ef68:	6039      	str	r1, [r7, #0]
 800ef6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d105      	bne.n	800ef7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	4907      	ldr	r1, [pc, #28]	@ (800ef94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef76:	4808      	ldr	r0, [pc, #32]	@ (800ef98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef78:	f7fe fbd4 	bl	800d724 <USBD_GetString>
 800ef7c:	e004      	b.n	800ef88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	4904      	ldr	r1, [pc, #16]	@ (800ef94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef82:	4805      	ldr	r0, [pc, #20]	@ (800ef98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef84:	f7fe fbce 	bl	800d724 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef88:	4b02      	ldr	r3, [pc, #8]	@ (800ef94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20008260 	.word	0x20008260
 800ef98:	080108a4 	.word	0x080108a4

0800ef9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efa2:	4b0f      	ldr	r3, [pc, #60]	@ (800efe0 <Get_SerialNum+0x44>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efa8:	4b0e      	ldr	r3, [pc, #56]	@ (800efe4 <Get_SerialNum+0x48>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efae:	4b0e      	ldr	r3, [pc, #56]	@ (800efe8 <Get_SerialNum+0x4c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d009      	beq.n	800efd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efc2:	2208      	movs	r2, #8
 800efc4:	4909      	ldr	r1, [pc, #36]	@ (800efec <Get_SerialNum+0x50>)
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 f814 	bl	800eff4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efcc:	2204      	movs	r2, #4
 800efce:	4908      	ldr	r1, [pc, #32]	@ (800eff0 <Get_SerialNum+0x54>)
 800efd0:	68b8      	ldr	r0, [r7, #8]
 800efd2:	f000 f80f 	bl	800eff4 <IntToUnicode>
  }
}
 800efd6:	bf00      	nop
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	1fff7a10 	.word	0x1fff7a10
 800efe4:	1fff7a14 	.word	0x1fff7a14
 800efe8:	1fff7a18 	.word	0x1fff7a18
 800efec:	2000013a 	.word	0x2000013a
 800eff0:	2000014a 	.word	0x2000014a

0800eff4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	4613      	mov	r3, r2
 800f000:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f006:	2300      	movs	r3, #0
 800f008:	75fb      	strb	r3, [r7, #23]
 800f00a:	e027      	b.n	800f05c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	0f1b      	lsrs	r3, r3, #28
 800f010:	2b09      	cmp	r3, #9
 800f012:	d80b      	bhi.n	800f02c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	0f1b      	lsrs	r3, r3, #28
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	7dfb      	ldrb	r3, [r7, #23]
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	4619      	mov	r1, r3
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	440b      	add	r3, r1
 800f024:	3230      	adds	r2, #48	@ 0x30
 800f026:	b2d2      	uxtb	r2, r2
 800f028:	701a      	strb	r2, [r3, #0]
 800f02a:	e00a      	b.n	800f042 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	0f1b      	lsrs	r3, r3, #28
 800f030:	b2da      	uxtb	r2, r3
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	4619      	mov	r1, r3
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	440b      	add	r3, r1
 800f03c:	3237      	adds	r2, #55	@ 0x37
 800f03e:	b2d2      	uxtb	r2, r2
 800f040:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f048:	7dfb      	ldrb	r3, [r7, #23]
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	3301      	adds	r3, #1
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	4413      	add	r3, r2
 800f052:	2200      	movs	r2, #0
 800f054:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	3301      	adds	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
 800f05c:	7dfa      	ldrb	r2, [r7, #23]
 800f05e:	79fb      	ldrb	r3, [r7, #7]
 800f060:	429a      	cmp	r2, r3
 800f062:	d3d3      	bcc.n	800f00c <IntToUnicode+0x18>
  }
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
	...

0800f074 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08a      	sub	sp, #40	@ 0x28
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f07c:	f107 0314 	add.w	r3, r7, #20
 800f080:	2200      	movs	r2, #0
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	605a      	str	r2, [r3, #4]
 800f086:	609a      	str	r2, [r3, #8]
 800f088:	60da      	str	r2, [r3, #12]
 800f08a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f094:	d13a      	bne.n	800f10c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f096:	2300      	movs	r3, #0
 800f098:	613b      	str	r3, [r7, #16]
 800f09a:	4b1e      	ldr	r3, [pc, #120]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f09e:	4a1d      	ldr	r2, [pc, #116]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0a0:	f043 0301 	orr.w	r3, r3, #1
 800f0a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800f0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	613b      	str	r3, [r7, #16]
 800f0b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f0b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f0c4:	230a      	movs	r3, #10
 800f0c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0c8:	f107 0314 	add.w	r3, r7, #20
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4812      	ldr	r0, [pc, #72]	@ (800f118 <HAL_PCD_MspInit+0xa4>)
 800f0d0:	f7f3 f9e8 	bl	80024a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0d8:	4a0e      	ldr	r2, [pc, #56]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0de:	6353      	str	r3, [r2, #52]	@ 0x34
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f0ee:	6453      	str	r3, [r2, #68]	@ 0x44
 800f0f0:	4b08      	ldr	r3, [pc, #32]	@ (800f114 <HAL_PCD_MspInit+0xa0>)
 800f0f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f0f8:	60fb      	str	r3, [r7, #12]
 800f0fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2100      	movs	r1, #0
 800f100:	2043      	movs	r0, #67	@ 0x43
 800f102:	f7f2 fec0 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f106:	2043      	movs	r0, #67	@ 0x43
 800f108:	f7f2 fed9 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f10c:	bf00      	nop
 800f10e:	3728      	adds	r7, #40	@ 0x28
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	40023800 	.word	0x40023800
 800f118:	40020000 	.word	0x40020000

0800f11c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fd f993 	bl	800c45e <USBD_LL_SetupStage>
}
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	4613      	mov	r3, r2
 800f158:	00db      	lsls	r3, r3, #3
 800f15a:	4413      	add	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	440b      	add	r3, r1
 800f160:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	78fb      	ldrb	r3, [r7, #3]
 800f168:	4619      	mov	r1, r3
 800f16a:	f7fd f9cd 	bl	800c508 <USBD_LL_DataOutStage>
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	460b      	mov	r3, r1
 800f180:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f188:	78fa      	ldrb	r2, [r7, #3]
 800f18a:	6879      	ldr	r1, [r7, #4]
 800f18c:	4613      	mov	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	4413      	add	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	440b      	add	r3, r1
 800f196:	3320      	adds	r3, #32
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	78fb      	ldrb	r3, [r7, #3]
 800f19c:	4619      	mov	r1, r3
 800f19e:	f7fd fa66 	bl	800c66e <USBD_LL_DataInStage>
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fd fba0 	bl	800c8fe <USBD_LL_SOF>
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b084      	sub	sp, #16
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	79db      	ldrb	r3, [r3, #7]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d102      	bne.n	800f1e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	73fb      	strb	r3, [r7, #15]
 800f1de:	e008      	b.n	800f1f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	79db      	ldrb	r3, [r3, #7]
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	d102      	bne.n	800f1ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	73fb      	strb	r3, [r7, #15]
 800f1ec:	e001      	b.n	800f1f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f1ee:	f7f1 fd98 	bl	8000d22 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f1f8:	7bfa      	ldrb	r2, [r7, #15]
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fd fb3a 	bl	800c876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd fae2 	bl	800c7d2 <USBD_LL_Reset>
}
 800f20e:	bf00      	nop
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
	...

0800f218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd fb35 	bl	800c896 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	6812      	ldr	r2, [r2, #0]
 800f23a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f23e:	f043 0301 	orr.w	r3, r3, #1
 800f242:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	7adb      	ldrb	r3, [r3, #11]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f24c:	4b04      	ldr	r3, [pc, #16]	@ (800f260 <HAL_PCD_SuspendCallback+0x48>)
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	4a03      	ldr	r2, [pc, #12]	@ (800f260 <HAL_PCD_SuspendCallback+0x48>)
 800f252:	f043 0306 	orr.w	r3, r3, #6
 800f256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	e000ed00 	.word	0xe000ed00

0800f264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f272:	4618      	mov	r0, r3
 800f274:	f7fd fb2b 	bl	800c8ce <USBD_LL_Resume>
}
 800f278:	bf00      	nop
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f292:	78fa      	ldrb	r2, [r7, #3]
 800f294:	4611      	mov	r1, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd fb83 	bl	800c9a2 <USBD_LL_IsoOUTIncomplete>
}
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2b6:	78fa      	ldrb	r2, [r7, #3]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fd fb3f 	bl	800c93e <USBD_LL_IsoINIncomplete>
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fd fb95 	bl	800ca06 <USBD_LL_DevConnected>
}
 800f2dc:	bf00      	nop
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fb92 	bl	800ca1c <USBD_LL_DevDisconnected>
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d13c      	bne.n	800f38a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f310:	4a20      	ldr	r2, [pc, #128]	@ (800f394 <USBD_LL_Init+0x94>)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a1e      	ldr	r2, [pc, #120]	@ (800f394 <USBD_LL_Init+0x94>)
 800f31c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f320:	4b1c      	ldr	r3, [pc, #112]	@ (800f394 <USBD_LL_Init+0x94>)
 800f322:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f326:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f328:	4b1a      	ldr	r3, [pc, #104]	@ (800f394 <USBD_LL_Init+0x94>)
 800f32a:	2204      	movs	r2, #4
 800f32c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f32e:	4b19      	ldr	r3, [pc, #100]	@ (800f394 <USBD_LL_Init+0x94>)
 800f330:	2202      	movs	r2, #2
 800f332:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f334:	4b17      	ldr	r3, [pc, #92]	@ (800f394 <USBD_LL_Init+0x94>)
 800f336:	2200      	movs	r2, #0
 800f338:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f33a:	4b16      	ldr	r3, [pc, #88]	@ (800f394 <USBD_LL_Init+0x94>)
 800f33c:	2202      	movs	r2, #2
 800f33e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f340:	4b14      	ldr	r3, [pc, #80]	@ (800f394 <USBD_LL_Init+0x94>)
 800f342:	2200      	movs	r2, #0
 800f344:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f346:	4b13      	ldr	r3, [pc, #76]	@ (800f394 <USBD_LL_Init+0x94>)
 800f348:	2200      	movs	r2, #0
 800f34a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f34c:	4b11      	ldr	r3, [pc, #68]	@ (800f394 <USBD_LL_Init+0x94>)
 800f34e:	2200      	movs	r2, #0
 800f350:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f352:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <USBD_LL_Init+0x94>)
 800f354:	2200      	movs	r2, #0
 800f356:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f358:	4b0e      	ldr	r3, [pc, #56]	@ (800f394 <USBD_LL_Init+0x94>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f35e:	480d      	ldr	r0, [pc, #52]	@ (800f394 <USBD_LL_Init+0x94>)
 800f360:	f7f3 fa55 	bl	800280e <HAL_PCD_Init>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f36a:	f7f1 fcda 	bl	8000d22 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f36e:	2180      	movs	r1, #128	@ 0x80
 800f370:	4808      	ldr	r0, [pc, #32]	@ (800f394 <USBD_LL_Init+0x94>)
 800f372:	f7f4 fc80 	bl	8003c76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f376:	2240      	movs	r2, #64	@ 0x40
 800f378:	2100      	movs	r1, #0
 800f37a:	4806      	ldr	r0, [pc, #24]	@ (800f394 <USBD_LL_Init+0x94>)
 800f37c:	f7f4 fc34 	bl	8003be8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f380:	2280      	movs	r2, #128	@ 0x80
 800f382:	2101      	movs	r1, #1
 800f384:	4803      	ldr	r0, [pc, #12]	@ (800f394 <USBD_LL_Init+0x94>)
 800f386:	f7f4 fc2f 	bl	8003be8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	20008460 	.word	0x20008460

0800f398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7f3 fb3c 	bl	8002a2c <HAL_PCD_Start>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f000 f942 	bl	800f644 <USBD_Get_USB_Status>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f3ce:	b580      	push	{r7, lr}
 800f3d0:	b084      	sub	sp, #16
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4611      	mov	r1, r2
 800f3da:	461a      	mov	r2, r3
 800f3dc:	4603      	mov	r3, r0
 800f3de:	70fb      	strb	r3, [r7, #3]
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	70bb      	strb	r3, [r7, #2]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f3f6:	78bb      	ldrb	r3, [r7, #2]
 800f3f8:	883a      	ldrh	r2, [r7, #0]
 800f3fa:	78f9      	ldrb	r1, [r7, #3]
 800f3fc:	f7f4 f810 	bl	8003420 <HAL_PCD_EP_Open>
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 f91c 	bl	800f644 <USBD_Get_USB_Status>
 800f40c:	4603      	mov	r3, r0
 800f40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f410:	7bbb      	ldrb	r3, [r7, #14]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	460b      	mov	r3, r1
 800f424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f426:	2300      	movs	r3, #0
 800f428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f434:	78fa      	ldrb	r2, [r7, #3]
 800f436:	4611      	mov	r1, r2
 800f438:	4618      	mov	r0, r3
 800f43a:	f7f4 f859 	bl	80034f0 <HAL_PCD_EP_Close>
 800f43e:	4603      	mov	r3, r0
 800f440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	4618      	mov	r0, r3
 800f446:	f000 f8fd 	bl	800f644 <USBD_Get_USB_Status>
 800f44a:	4603      	mov	r3, r0
 800f44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f468:	2300      	movs	r3, #0
 800f46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f472:	78fa      	ldrb	r2, [r7, #3]
 800f474:	4611      	mov	r1, r2
 800f476:	4618      	mov	r0, r3
 800f478:	f7f4 f911 	bl	800369e <HAL_PCD_EP_SetStall>
 800f47c:	4603      	mov	r3, r0
 800f47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	4618      	mov	r0, r3
 800f484:	f000 f8de 	bl	800f644 <USBD_Get_USB_Status>
 800f488:	4603      	mov	r3, r0
 800f48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b084      	sub	sp, #16
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4b0:	78fa      	ldrb	r2, [r7, #3]
 800f4b2:	4611      	mov	r1, r2
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7f4 f955 	bl	8003764 <HAL_PCD_EP_ClrStall>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4be:	7bfb      	ldrb	r3, [r7, #15]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f8bf 	bl	800f644 <USBD_Get_USB_Status>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f4e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	da0b      	bge.n	800f508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4f6:	68f9      	ldr	r1, [r7, #12]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	440b      	add	r3, r1
 800f502:	3316      	adds	r3, #22
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	e00b      	b.n	800f520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f508:	78fb      	ldrb	r3, [r7, #3]
 800f50a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	4613      	mov	r3, r2
 800f512:	00db      	lsls	r3, r3, #3
 800f514:	4413      	add	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	440b      	add	r3, r1
 800f51a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f51e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f520:	4618      	mov	r0, r3
 800f522:	3714      	adds	r7, #20
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f53c:	2300      	movs	r3, #0
 800f53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f546:	78fa      	ldrb	r2, [r7, #3]
 800f548:	4611      	mov	r1, r2
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7f3 ff44 	bl	80033d8 <HAL_PCD_SetAddress>
 800f550:	4603      	mov	r3, r0
 800f552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f554:	7bfb      	ldrb	r3, [r7, #15]
 800f556:	4618      	mov	r0, r3
 800f558:	f000 f874 	bl	800f644 <USBD_Get_USB_Status>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f560:	7bbb      	ldrb	r3, [r7, #14]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b086      	sub	sp, #24
 800f56e:	af00      	add	r7, sp, #0
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	607a      	str	r2, [r7, #4]
 800f574:	603b      	str	r3, [r7, #0]
 800f576:	460b      	mov	r3, r1
 800f578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f57a:	2300      	movs	r3, #0
 800f57c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f57e:	2300      	movs	r3, #0
 800f580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f588:	7af9      	ldrb	r1, [r7, #11]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	f7f4 f84c 	bl	800362a <HAL_PCD_EP_Transmit>
 800f592:	4603      	mov	r3, r0
 800f594:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f596:	7dfb      	ldrb	r3, [r7, #23]
 800f598:	4618      	mov	r0, r3
 800f59a:	f000 f853 	bl	800f644 <USBD_Get_USB_Status>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3718      	adds	r7, #24
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	607a      	str	r2, [r7, #4]
 800f5b6:	603b      	str	r3, [r7, #0]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5ca:	7af9      	ldrb	r1, [r7, #11]
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	f7f3 ffd8 	bl	8003584 <HAL_PCD_EP_Receive>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5d8:	7dfb      	ldrb	r3, [r7, #23]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 f832 	bl	800f644 <USBD_Get_USB_Status>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3718      	adds	r7, #24
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f600:	78fa      	ldrb	r2, [r7, #3]
 800f602:	4611      	mov	r1, r2
 800f604:	4618      	mov	r0, r3
 800f606:	f7f3 fff8 	bl	80035fa <HAL_PCD_EP_GetRxCount>
 800f60a:	4603      	mov	r3, r0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f61c:	4b03      	ldr	r3, [pc, #12]	@ (800f62c <USBD_static_malloc+0x18>)
}
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	20008944 	.word	0x20008944

0800f630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]

}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	2b03      	cmp	r3, #3
 800f656:	d817      	bhi.n	800f688 <USBD_Get_USB_Status+0x44>
 800f658:	a201      	add	r2, pc, #4	@ (adr r2, 800f660 <USBD_Get_USB_Status+0x1c>)
 800f65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65e:	bf00      	nop
 800f660:	0800f671 	.word	0x0800f671
 800f664:	0800f677 	.word	0x0800f677
 800f668:	0800f67d 	.word	0x0800f67d
 800f66c:	0800f683 	.word	0x0800f683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	73fb      	strb	r3, [r7, #15]
    break;
 800f674:	e00b      	b.n	800f68e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f676:	2303      	movs	r3, #3
 800f678:	73fb      	strb	r3, [r7, #15]
    break;
 800f67a:	e008      	b.n	800f68e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f67c:	2301      	movs	r3, #1
 800f67e:	73fb      	strb	r3, [r7, #15]
    break;
 800f680:	e005      	b.n	800f68e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f682:	2303      	movs	r3, #3
 800f684:	73fb      	strb	r3, [r7, #15]
    break;
 800f686:	e002      	b.n	800f68e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f688:	2303      	movs	r3, #3
 800f68a:	73fb      	strb	r3, [r7, #15]
    break;
 800f68c:	bf00      	nop
  }
  return usb_status;
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3714      	adds	r7, #20
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <calloc>:
 800f69c:	4b02      	ldr	r3, [pc, #8]	@ (800f6a8 <calloc+0xc>)
 800f69e:	460a      	mov	r2, r1
 800f6a0:	4601      	mov	r1, r0
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	f000 b802 	b.w	800f6ac <_calloc_r>
 800f6a8:	20000160 	.word	0x20000160

0800f6ac <_calloc_r>:
 800f6ac:	b570      	push	{r4, r5, r6, lr}
 800f6ae:	fba1 5402 	umull	r5, r4, r1, r2
 800f6b2:	b93c      	cbnz	r4, 800f6c4 <_calloc_r+0x18>
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	f000 f83f 	bl	800f738 <_malloc_r>
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	b928      	cbnz	r0, 800f6ca <_calloc_r+0x1e>
 800f6be:	2600      	movs	r6, #0
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	220c      	movs	r2, #12
 800f6c6:	6002      	str	r2, [r0, #0]
 800f6c8:	e7f9      	b.n	800f6be <_calloc_r+0x12>
 800f6ca:	462a      	mov	r2, r5
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	f000 fa38 	bl	800fb42 <memset>
 800f6d2:	e7f5      	b.n	800f6c0 <_calloc_r+0x14>

0800f6d4 <malloc>:
 800f6d4:	4b02      	ldr	r3, [pc, #8]	@ (800f6e0 <malloc+0xc>)
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f000 b82d 	b.w	800f738 <_malloc_r>
 800f6de:	bf00      	nop
 800f6e0:	20000160 	.word	0x20000160

0800f6e4 <free>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <free+0xc>)
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f000 bb55 	b.w	800fd98 <_free_r>
 800f6ee:	bf00      	nop
 800f6f0:	20000160 	.word	0x20000160

0800f6f4 <sbrk_aligned>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	4e0f      	ldr	r6, [pc, #60]	@ (800f734 <sbrk_aligned+0x40>)
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	6831      	ldr	r1, [r6, #0]
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	b911      	cbnz	r1, 800f706 <sbrk_aligned+0x12>
 800f700:	f000 face 	bl	800fca0 <_sbrk_r>
 800f704:	6030      	str	r0, [r6, #0]
 800f706:	4621      	mov	r1, r4
 800f708:	4628      	mov	r0, r5
 800f70a:	f000 fac9 	bl	800fca0 <_sbrk_r>
 800f70e:	1c43      	adds	r3, r0, #1
 800f710:	d103      	bne.n	800f71a <sbrk_aligned+0x26>
 800f712:	f04f 34ff 	mov.w	r4, #4294967295
 800f716:	4620      	mov	r0, r4
 800f718:	bd70      	pop	{r4, r5, r6, pc}
 800f71a:	1cc4      	adds	r4, r0, #3
 800f71c:	f024 0403 	bic.w	r4, r4, #3
 800f720:	42a0      	cmp	r0, r4
 800f722:	d0f8      	beq.n	800f716 <sbrk_aligned+0x22>
 800f724:	1a21      	subs	r1, r4, r0
 800f726:	4628      	mov	r0, r5
 800f728:	f000 faba 	bl	800fca0 <_sbrk_r>
 800f72c:	3001      	adds	r0, #1
 800f72e:	d1f2      	bne.n	800f716 <sbrk_aligned+0x22>
 800f730:	e7ef      	b.n	800f712 <sbrk_aligned+0x1e>
 800f732:	bf00      	nop
 800f734:	20008b64 	.word	0x20008b64

0800f738 <_malloc_r>:
 800f738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f73c:	1ccd      	adds	r5, r1, #3
 800f73e:	f025 0503 	bic.w	r5, r5, #3
 800f742:	3508      	adds	r5, #8
 800f744:	2d0c      	cmp	r5, #12
 800f746:	bf38      	it	cc
 800f748:	250c      	movcc	r5, #12
 800f74a:	2d00      	cmp	r5, #0
 800f74c:	4606      	mov	r6, r0
 800f74e:	db01      	blt.n	800f754 <_malloc_r+0x1c>
 800f750:	42a9      	cmp	r1, r5
 800f752:	d904      	bls.n	800f75e <_malloc_r+0x26>
 800f754:	230c      	movs	r3, #12
 800f756:	6033      	str	r3, [r6, #0]
 800f758:	2000      	movs	r0, #0
 800f75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f834 <_malloc_r+0xfc>
 800f762:	f000 f869 	bl	800f838 <__malloc_lock>
 800f766:	f8d8 3000 	ldr.w	r3, [r8]
 800f76a:	461c      	mov	r4, r3
 800f76c:	bb44      	cbnz	r4, 800f7c0 <_malloc_r+0x88>
 800f76e:	4629      	mov	r1, r5
 800f770:	4630      	mov	r0, r6
 800f772:	f7ff ffbf 	bl	800f6f4 <sbrk_aligned>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	4604      	mov	r4, r0
 800f77a:	d158      	bne.n	800f82e <_malloc_r+0xf6>
 800f77c:	f8d8 4000 	ldr.w	r4, [r8]
 800f780:	4627      	mov	r7, r4
 800f782:	2f00      	cmp	r7, #0
 800f784:	d143      	bne.n	800f80e <_malloc_r+0xd6>
 800f786:	2c00      	cmp	r4, #0
 800f788:	d04b      	beq.n	800f822 <_malloc_r+0xea>
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	4639      	mov	r1, r7
 800f78e:	4630      	mov	r0, r6
 800f790:	eb04 0903 	add.w	r9, r4, r3
 800f794:	f000 fa84 	bl	800fca0 <_sbrk_r>
 800f798:	4581      	cmp	r9, r0
 800f79a:	d142      	bne.n	800f822 <_malloc_r+0xea>
 800f79c:	6821      	ldr	r1, [r4, #0]
 800f79e:	1a6d      	subs	r5, r5, r1
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7ff ffa6 	bl	800f6f4 <sbrk_aligned>
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	d03a      	beq.n	800f822 <_malloc_r+0xea>
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	442b      	add	r3, r5
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f7b6:	685a      	ldr	r2, [r3, #4]
 800f7b8:	bb62      	cbnz	r2, 800f814 <_malloc_r+0xdc>
 800f7ba:	f8c8 7000 	str.w	r7, [r8]
 800f7be:	e00f      	b.n	800f7e0 <_malloc_r+0xa8>
 800f7c0:	6822      	ldr	r2, [r4, #0]
 800f7c2:	1b52      	subs	r2, r2, r5
 800f7c4:	d420      	bmi.n	800f808 <_malloc_r+0xd0>
 800f7c6:	2a0b      	cmp	r2, #11
 800f7c8:	d917      	bls.n	800f7fa <_malloc_r+0xc2>
 800f7ca:	1961      	adds	r1, r4, r5
 800f7cc:	42a3      	cmp	r3, r4
 800f7ce:	6025      	str	r5, [r4, #0]
 800f7d0:	bf18      	it	ne
 800f7d2:	6059      	strne	r1, [r3, #4]
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	bf08      	it	eq
 800f7d8:	f8c8 1000 	streq.w	r1, [r8]
 800f7dc:	5162      	str	r2, [r4, r5]
 800f7de:	604b      	str	r3, [r1, #4]
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f000 f82f 	bl	800f844 <__malloc_unlock>
 800f7e6:	f104 000b 	add.w	r0, r4, #11
 800f7ea:	1d23      	adds	r3, r4, #4
 800f7ec:	f020 0007 	bic.w	r0, r0, #7
 800f7f0:	1ac2      	subs	r2, r0, r3
 800f7f2:	bf1c      	itt	ne
 800f7f4:	1a1b      	subne	r3, r3, r0
 800f7f6:	50a3      	strne	r3, [r4, r2]
 800f7f8:	e7af      	b.n	800f75a <_malloc_r+0x22>
 800f7fa:	6862      	ldr	r2, [r4, #4]
 800f7fc:	42a3      	cmp	r3, r4
 800f7fe:	bf0c      	ite	eq
 800f800:	f8c8 2000 	streq.w	r2, [r8]
 800f804:	605a      	strne	r2, [r3, #4]
 800f806:	e7eb      	b.n	800f7e0 <_malloc_r+0xa8>
 800f808:	4623      	mov	r3, r4
 800f80a:	6864      	ldr	r4, [r4, #4]
 800f80c:	e7ae      	b.n	800f76c <_malloc_r+0x34>
 800f80e:	463c      	mov	r4, r7
 800f810:	687f      	ldr	r7, [r7, #4]
 800f812:	e7b6      	b.n	800f782 <_malloc_r+0x4a>
 800f814:	461a      	mov	r2, r3
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	42a3      	cmp	r3, r4
 800f81a:	d1fb      	bne.n	800f814 <_malloc_r+0xdc>
 800f81c:	2300      	movs	r3, #0
 800f81e:	6053      	str	r3, [r2, #4]
 800f820:	e7de      	b.n	800f7e0 <_malloc_r+0xa8>
 800f822:	230c      	movs	r3, #12
 800f824:	6033      	str	r3, [r6, #0]
 800f826:	4630      	mov	r0, r6
 800f828:	f000 f80c 	bl	800f844 <__malloc_unlock>
 800f82c:	e794      	b.n	800f758 <_malloc_r+0x20>
 800f82e:	6005      	str	r5, [r0, #0]
 800f830:	e7d6      	b.n	800f7e0 <_malloc_r+0xa8>
 800f832:	bf00      	nop
 800f834:	20008b68 	.word	0x20008b68

0800f838 <__malloc_lock>:
 800f838:	4801      	ldr	r0, [pc, #4]	@ (800f840 <__malloc_lock+0x8>)
 800f83a:	f000 ba7e 	b.w	800fd3a <__retarget_lock_acquire_recursive>
 800f83e:	bf00      	nop
 800f840:	20008cac 	.word	0x20008cac

0800f844 <__malloc_unlock>:
 800f844:	4801      	ldr	r0, [pc, #4]	@ (800f84c <__malloc_unlock+0x8>)
 800f846:	f000 ba79 	b.w	800fd3c <__retarget_lock_release_recursive>
 800f84a:	bf00      	nop
 800f84c:	20008cac 	.word	0x20008cac

0800f850 <rand>:
 800f850:	4b16      	ldr	r3, [pc, #88]	@ (800f8ac <rand+0x5c>)
 800f852:	b510      	push	{r4, lr}
 800f854:	681c      	ldr	r4, [r3, #0]
 800f856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f858:	b9b3      	cbnz	r3, 800f888 <rand+0x38>
 800f85a:	2018      	movs	r0, #24
 800f85c:	f7ff ff3a 	bl	800f6d4 <malloc>
 800f860:	4602      	mov	r2, r0
 800f862:	6320      	str	r0, [r4, #48]	@ 0x30
 800f864:	b920      	cbnz	r0, 800f870 <rand+0x20>
 800f866:	4b12      	ldr	r3, [pc, #72]	@ (800f8b0 <rand+0x60>)
 800f868:	4812      	ldr	r0, [pc, #72]	@ (800f8b4 <rand+0x64>)
 800f86a:	2152      	movs	r1, #82	@ 0x52
 800f86c:	f000 fa76 	bl	800fd5c <__assert_func>
 800f870:	4911      	ldr	r1, [pc, #68]	@ (800f8b8 <rand+0x68>)
 800f872:	4b12      	ldr	r3, [pc, #72]	@ (800f8bc <rand+0x6c>)
 800f874:	e9c0 1300 	strd	r1, r3, [r0]
 800f878:	4b11      	ldr	r3, [pc, #68]	@ (800f8c0 <rand+0x70>)
 800f87a:	6083      	str	r3, [r0, #8]
 800f87c:	230b      	movs	r3, #11
 800f87e:	8183      	strh	r3, [r0, #12]
 800f880:	2100      	movs	r1, #0
 800f882:	2001      	movs	r0, #1
 800f884:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f888:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f88a:	480e      	ldr	r0, [pc, #56]	@ (800f8c4 <rand+0x74>)
 800f88c:	690b      	ldr	r3, [r1, #16]
 800f88e:	694c      	ldr	r4, [r1, #20]
 800f890:	4a0d      	ldr	r2, [pc, #52]	@ (800f8c8 <rand+0x78>)
 800f892:	4358      	muls	r0, r3
 800f894:	fb02 0004 	mla	r0, r2, r4, r0
 800f898:	fba3 3202 	umull	r3, r2, r3, r2
 800f89c:	3301      	adds	r3, #1
 800f89e:	eb40 0002 	adc.w	r0, r0, r2
 800f8a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f8a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f8aa:	bd10      	pop	{r4, pc}
 800f8ac:	20000160 	.word	0x20000160
 800f8b0:	08010a0b 	.word	0x08010a0b
 800f8b4:	08010a22 	.word	0x08010a22
 800f8b8:	abcd330e 	.word	0xabcd330e
 800f8bc:	e66d1234 	.word	0xe66d1234
 800f8c0:	0005deec 	.word	0x0005deec
 800f8c4:	5851f42d 	.word	0x5851f42d
 800f8c8:	4c957f2d 	.word	0x4c957f2d

0800f8cc <realloc>:
 800f8cc:	4b02      	ldr	r3, [pc, #8]	@ (800f8d8 <realloc+0xc>)
 800f8ce:	460a      	mov	r2, r1
 800f8d0:	4601      	mov	r1, r0
 800f8d2:	6818      	ldr	r0, [r3, #0]
 800f8d4:	f000 b802 	b.w	800f8dc <_realloc_r>
 800f8d8:	20000160 	.word	0x20000160

0800f8dc <_realloc_r>:
 800f8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e0:	4680      	mov	r8, r0
 800f8e2:	4615      	mov	r5, r2
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	b921      	cbnz	r1, 800f8f2 <_realloc_r+0x16>
 800f8e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ec:	4611      	mov	r1, r2
 800f8ee:	f7ff bf23 	b.w	800f738 <_malloc_r>
 800f8f2:	b92a      	cbnz	r2, 800f900 <_realloc_r+0x24>
 800f8f4:	f000 fa50 	bl	800fd98 <_free_r>
 800f8f8:	2400      	movs	r4, #0
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f900:	f000 fa94 	bl	800fe2c <_malloc_usable_size_r>
 800f904:	4285      	cmp	r5, r0
 800f906:	4606      	mov	r6, r0
 800f908:	d802      	bhi.n	800f910 <_realloc_r+0x34>
 800f90a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f90e:	d8f4      	bhi.n	800f8fa <_realloc_r+0x1e>
 800f910:	4629      	mov	r1, r5
 800f912:	4640      	mov	r0, r8
 800f914:	f7ff ff10 	bl	800f738 <_malloc_r>
 800f918:	4607      	mov	r7, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d0ec      	beq.n	800f8f8 <_realloc_r+0x1c>
 800f91e:	42b5      	cmp	r5, r6
 800f920:	462a      	mov	r2, r5
 800f922:	4621      	mov	r1, r4
 800f924:	bf28      	it	cs
 800f926:	4632      	movcs	r2, r6
 800f928:	f000 fa09 	bl	800fd3e <memcpy>
 800f92c:	4621      	mov	r1, r4
 800f92e:	4640      	mov	r0, r8
 800f930:	f000 fa32 	bl	800fd98 <_free_r>
 800f934:	463c      	mov	r4, r7
 800f936:	e7e0      	b.n	800f8fa <_realloc_r+0x1e>

0800f938 <std>:
 800f938:	2300      	movs	r3, #0
 800f93a:	b510      	push	{r4, lr}
 800f93c:	4604      	mov	r4, r0
 800f93e:	e9c0 3300 	strd	r3, r3, [r0]
 800f942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f946:	6083      	str	r3, [r0, #8]
 800f948:	8181      	strh	r1, [r0, #12]
 800f94a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f94c:	81c2      	strh	r2, [r0, #14]
 800f94e:	6183      	str	r3, [r0, #24]
 800f950:	4619      	mov	r1, r3
 800f952:	2208      	movs	r2, #8
 800f954:	305c      	adds	r0, #92	@ 0x5c
 800f956:	f000 f8f4 	bl	800fb42 <memset>
 800f95a:	4b0d      	ldr	r3, [pc, #52]	@ (800f990 <std+0x58>)
 800f95c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f95e:	4b0d      	ldr	r3, [pc, #52]	@ (800f994 <std+0x5c>)
 800f960:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f962:	4b0d      	ldr	r3, [pc, #52]	@ (800f998 <std+0x60>)
 800f964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f966:	4b0d      	ldr	r3, [pc, #52]	@ (800f99c <std+0x64>)
 800f968:	6323      	str	r3, [r4, #48]	@ 0x30
 800f96a:	4b0d      	ldr	r3, [pc, #52]	@ (800f9a0 <std+0x68>)
 800f96c:	6224      	str	r4, [r4, #32]
 800f96e:	429c      	cmp	r4, r3
 800f970:	d006      	beq.n	800f980 <std+0x48>
 800f972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f976:	4294      	cmp	r4, r2
 800f978:	d002      	beq.n	800f980 <std+0x48>
 800f97a:	33d0      	adds	r3, #208	@ 0xd0
 800f97c:	429c      	cmp	r4, r3
 800f97e:	d105      	bne.n	800f98c <std+0x54>
 800f980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f988:	f000 b9d6 	b.w	800fd38 <__retarget_lock_init_recursive>
 800f98c:	bd10      	pop	{r4, pc}
 800f98e:	bf00      	nop
 800f990:	0800fabd 	.word	0x0800fabd
 800f994:	0800fadf 	.word	0x0800fadf
 800f998:	0800fb17 	.word	0x0800fb17
 800f99c:	0800fb3b 	.word	0x0800fb3b
 800f9a0:	20008b6c 	.word	0x20008b6c

0800f9a4 <stdio_exit_handler>:
 800f9a4:	4a02      	ldr	r2, [pc, #8]	@ (800f9b0 <stdio_exit_handler+0xc>)
 800f9a6:	4903      	ldr	r1, [pc, #12]	@ (800f9b4 <stdio_exit_handler+0x10>)
 800f9a8:	4803      	ldr	r0, [pc, #12]	@ (800f9b8 <stdio_exit_handler+0x14>)
 800f9aa:	f000 b869 	b.w	800fa80 <_fwalk_sglue>
 800f9ae:	bf00      	nop
 800f9b0:	20000154 	.word	0x20000154
 800f9b4:	08010261 	.word	0x08010261
 800f9b8:	20000164 	.word	0x20000164

0800f9bc <cleanup_stdio>:
 800f9bc:	6841      	ldr	r1, [r0, #4]
 800f9be:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f0 <cleanup_stdio+0x34>)
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	b510      	push	{r4, lr}
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	d001      	beq.n	800f9cc <cleanup_stdio+0x10>
 800f9c8:	f000 fc4a 	bl	8010260 <_fflush_r>
 800f9cc:	68a1      	ldr	r1, [r4, #8]
 800f9ce:	4b09      	ldr	r3, [pc, #36]	@ (800f9f4 <cleanup_stdio+0x38>)
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d002      	beq.n	800f9da <cleanup_stdio+0x1e>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 fc43 	bl	8010260 <_fflush_r>
 800f9da:	68e1      	ldr	r1, [r4, #12]
 800f9dc:	4b06      	ldr	r3, [pc, #24]	@ (800f9f8 <cleanup_stdio+0x3c>)
 800f9de:	4299      	cmp	r1, r3
 800f9e0:	d004      	beq.n	800f9ec <cleanup_stdio+0x30>
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9e8:	f000 bc3a 	b.w	8010260 <_fflush_r>
 800f9ec:	bd10      	pop	{r4, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20008b6c 	.word	0x20008b6c
 800f9f4:	20008bd4 	.word	0x20008bd4
 800f9f8:	20008c3c 	.word	0x20008c3c

0800f9fc <global_stdio_init.part.0>:
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800fa2c <global_stdio_init.part.0+0x30>)
 800fa00:	4c0b      	ldr	r4, [pc, #44]	@ (800fa30 <global_stdio_init.part.0+0x34>)
 800fa02:	4a0c      	ldr	r2, [pc, #48]	@ (800fa34 <global_stdio_init.part.0+0x38>)
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	4620      	mov	r0, r4
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	f7ff ff94 	bl	800f938 <std>
 800fa10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fa14:	2201      	movs	r2, #1
 800fa16:	2109      	movs	r1, #9
 800fa18:	f7ff ff8e 	bl	800f938 <std>
 800fa1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fa20:	2202      	movs	r2, #2
 800fa22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa26:	2112      	movs	r1, #18
 800fa28:	f7ff bf86 	b.w	800f938 <std>
 800fa2c:	20008ca4 	.word	0x20008ca4
 800fa30:	20008b6c 	.word	0x20008b6c
 800fa34:	0800f9a5 	.word	0x0800f9a5

0800fa38 <__sfp_lock_acquire>:
 800fa38:	4801      	ldr	r0, [pc, #4]	@ (800fa40 <__sfp_lock_acquire+0x8>)
 800fa3a:	f000 b97e 	b.w	800fd3a <__retarget_lock_acquire_recursive>
 800fa3e:	bf00      	nop
 800fa40:	20008cad 	.word	0x20008cad

0800fa44 <__sfp_lock_release>:
 800fa44:	4801      	ldr	r0, [pc, #4]	@ (800fa4c <__sfp_lock_release+0x8>)
 800fa46:	f000 b979 	b.w	800fd3c <__retarget_lock_release_recursive>
 800fa4a:	bf00      	nop
 800fa4c:	20008cad 	.word	0x20008cad

0800fa50 <__sinit>:
 800fa50:	b510      	push	{r4, lr}
 800fa52:	4604      	mov	r4, r0
 800fa54:	f7ff fff0 	bl	800fa38 <__sfp_lock_acquire>
 800fa58:	6a23      	ldr	r3, [r4, #32]
 800fa5a:	b11b      	cbz	r3, 800fa64 <__sinit+0x14>
 800fa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa60:	f7ff bff0 	b.w	800fa44 <__sfp_lock_release>
 800fa64:	4b04      	ldr	r3, [pc, #16]	@ (800fa78 <__sinit+0x28>)
 800fa66:	6223      	str	r3, [r4, #32]
 800fa68:	4b04      	ldr	r3, [pc, #16]	@ (800fa7c <__sinit+0x2c>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1f5      	bne.n	800fa5c <__sinit+0xc>
 800fa70:	f7ff ffc4 	bl	800f9fc <global_stdio_init.part.0>
 800fa74:	e7f2      	b.n	800fa5c <__sinit+0xc>
 800fa76:	bf00      	nop
 800fa78:	0800f9bd 	.word	0x0800f9bd
 800fa7c:	20008ca4 	.word	0x20008ca4

0800fa80 <_fwalk_sglue>:
 800fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa84:	4607      	mov	r7, r0
 800fa86:	4688      	mov	r8, r1
 800fa88:	4614      	mov	r4, r2
 800fa8a:	2600      	movs	r6, #0
 800fa8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa90:	f1b9 0901 	subs.w	r9, r9, #1
 800fa94:	d505      	bpl.n	800faa2 <_fwalk_sglue+0x22>
 800fa96:	6824      	ldr	r4, [r4, #0]
 800fa98:	2c00      	cmp	r4, #0
 800fa9a:	d1f7      	bne.n	800fa8c <_fwalk_sglue+0xc>
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d907      	bls.n	800fab8 <_fwalk_sglue+0x38>
 800faa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800faac:	3301      	adds	r3, #1
 800faae:	d003      	beq.n	800fab8 <_fwalk_sglue+0x38>
 800fab0:	4629      	mov	r1, r5
 800fab2:	4638      	mov	r0, r7
 800fab4:	47c0      	blx	r8
 800fab6:	4306      	orrs	r6, r0
 800fab8:	3568      	adds	r5, #104	@ 0x68
 800faba:	e7e9      	b.n	800fa90 <_fwalk_sglue+0x10>

0800fabc <__sread>:
 800fabc:	b510      	push	{r4, lr}
 800fabe:	460c      	mov	r4, r1
 800fac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac4:	f000 f8da 	bl	800fc7c <_read_r>
 800fac8:	2800      	cmp	r0, #0
 800faca:	bfab      	itete	ge
 800facc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800face:	89a3      	ldrhlt	r3, [r4, #12]
 800fad0:	181b      	addge	r3, r3, r0
 800fad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fad6:	bfac      	ite	ge
 800fad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fada:	81a3      	strhlt	r3, [r4, #12]
 800fadc:	bd10      	pop	{r4, pc}

0800fade <__swrite>:
 800fade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae2:	461f      	mov	r7, r3
 800fae4:	898b      	ldrh	r3, [r1, #12]
 800fae6:	05db      	lsls	r3, r3, #23
 800fae8:	4605      	mov	r5, r0
 800faea:	460c      	mov	r4, r1
 800faec:	4616      	mov	r6, r2
 800faee:	d505      	bpl.n	800fafc <__swrite+0x1e>
 800faf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf4:	2302      	movs	r3, #2
 800faf6:	2200      	movs	r2, #0
 800faf8:	f000 f8ae 	bl	800fc58 <_lseek_r>
 800fafc:	89a3      	ldrh	r3, [r4, #12]
 800fafe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb06:	81a3      	strh	r3, [r4, #12]
 800fb08:	4632      	mov	r2, r6
 800fb0a:	463b      	mov	r3, r7
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb12:	f000 b8d5 	b.w	800fcc0 <_write_r>

0800fb16 <__sseek>:
 800fb16:	b510      	push	{r4, lr}
 800fb18:	460c      	mov	r4, r1
 800fb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb1e:	f000 f89b 	bl	800fc58 <_lseek_r>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	89a3      	ldrh	r3, [r4, #12]
 800fb26:	bf15      	itete	ne
 800fb28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fb2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fb2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fb32:	81a3      	strheq	r3, [r4, #12]
 800fb34:	bf18      	it	ne
 800fb36:	81a3      	strhne	r3, [r4, #12]
 800fb38:	bd10      	pop	{r4, pc}

0800fb3a <__sclose>:
 800fb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb3e:	f000 b87b 	b.w	800fc38 <_close_r>

0800fb42 <memset>:
 800fb42:	4402      	add	r2, r0
 800fb44:	4603      	mov	r3, r0
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d100      	bne.n	800fb4c <memset+0xa>
 800fb4a:	4770      	bx	lr
 800fb4c:	f803 1b01 	strb.w	r1, [r3], #1
 800fb50:	e7f9      	b.n	800fb46 <memset+0x4>

0800fb52 <strncpy>:
 800fb52:	b510      	push	{r4, lr}
 800fb54:	3901      	subs	r1, #1
 800fb56:	4603      	mov	r3, r0
 800fb58:	b132      	cbz	r2, 800fb68 <strncpy+0x16>
 800fb5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb5e:	f803 4b01 	strb.w	r4, [r3], #1
 800fb62:	3a01      	subs	r2, #1
 800fb64:	2c00      	cmp	r4, #0
 800fb66:	d1f7      	bne.n	800fb58 <strncpy+0x6>
 800fb68:	441a      	add	r2, r3
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d100      	bne.n	800fb72 <strncpy+0x20>
 800fb70:	bd10      	pop	{r4, pc}
 800fb72:	f803 1b01 	strb.w	r1, [r3], #1
 800fb76:	e7f9      	b.n	800fb6c <strncpy+0x1a>

0800fb78 <strtok>:
 800fb78:	4b16      	ldr	r3, [pc, #88]	@ (800fbd4 <strtok+0x5c>)
 800fb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7e:	681f      	ldr	r7, [r3, #0]
 800fb80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fb82:	4605      	mov	r5, r0
 800fb84:	460e      	mov	r6, r1
 800fb86:	b9ec      	cbnz	r4, 800fbc4 <strtok+0x4c>
 800fb88:	2050      	movs	r0, #80	@ 0x50
 800fb8a:	f7ff fda3 	bl	800f6d4 <malloc>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	6478      	str	r0, [r7, #68]	@ 0x44
 800fb92:	b920      	cbnz	r0, 800fb9e <strtok+0x26>
 800fb94:	4b10      	ldr	r3, [pc, #64]	@ (800fbd8 <strtok+0x60>)
 800fb96:	4811      	ldr	r0, [pc, #68]	@ (800fbdc <strtok+0x64>)
 800fb98:	215b      	movs	r1, #91	@ 0x5b
 800fb9a:	f000 f8df 	bl	800fd5c <__assert_func>
 800fb9e:	e9c0 4400 	strd	r4, r4, [r0]
 800fba2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fba6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fbaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fbae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fbb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fbb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fbba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fbbe:	6184      	str	r4, [r0, #24]
 800fbc0:	7704      	strb	r4, [r0, #28]
 800fbc2:	6244      	str	r4, [r0, #36]	@ 0x24
 800fbc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	4628      	mov	r0, r5
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd0:	f000 b806 	b.w	800fbe0 <__strtok_r>
 800fbd4:	20000160 	.word	0x20000160
 800fbd8:	08010a0b 	.word	0x08010a0b
 800fbdc:	08010b7b 	.word	0x08010b7b

0800fbe0 <__strtok_r>:
 800fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	b908      	cbnz	r0, 800fbea <__strtok_r+0xa>
 800fbe6:	6814      	ldr	r4, [r2, #0]
 800fbe8:	b144      	cbz	r4, 800fbfc <__strtok_r+0x1c>
 800fbea:	4620      	mov	r0, r4
 800fbec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fbf0:	460f      	mov	r7, r1
 800fbf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fbf6:	b91e      	cbnz	r6, 800fc00 <__strtok_r+0x20>
 800fbf8:	b965      	cbnz	r5, 800fc14 <__strtok_r+0x34>
 800fbfa:	6015      	str	r5, [r2, #0]
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e005      	b.n	800fc0c <__strtok_r+0x2c>
 800fc00:	42b5      	cmp	r5, r6
 800fc02:	d1f6      	bne.n	800fbf2 <__strtok_r+0x12>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1f0      	bne.n	800fbea <__strtok_r+0xa>
 800fc08:	6014      	str	r4, [r2, #0]
 800fc0a:	7003      	strb	r3, [r0, #0]
 800fc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0e:	461c      	mov	r4, r3
 800fc10:	e00c      	b.n	800fc2c <__strtok_r+0x4c>
 800fc12:	b915      	cbnz	r5, 800fc1a <__strtok_r+0x3a>
 800fc14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc18:	460e      	mov	r6, r1
 800fc1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fc1e:	42ab      	cmp	r3, r5
 800fc20:	d1f7      	bne.n	800fc12 <__strtok_r+0x32>
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d0f3      	beq.n	800fc0e <__strtok_r+0x2e>
 800fc26:	2300      	movs	r3, #0
 800fc28:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fc2c:	6014      	str	r4, [r2, #0]
 800fc2e:	e7ed      	b.n	800fc0c <__strtok_r+0x2c>

0800fc30 <strtok_r>:
 800fc30:	2301      	movs	r3, #1
 800fc32:	f7ff bfd5 	b.w	800fbe0 <__strtok_r>
	...

0800fc38 <_close_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d06      	ldr	r5, [pc, #24]	@ (800fc54 <_close_r+0x1c>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	f7f1 f9d0 	bl	8000fe8 <_close>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_close_r+0x1a>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_close_r+0x1a>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	20008ca8 	.word	0x20008ca8

0800fc58 <_lseek_r>:
 800fc58:	b538      	push	{r3, r4, r5, lr}
 800fc5a:	4d07      	ldr	r5, [pc, #28]	@ (800fc78 <_lseek_r+0x20>)
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	4608      	mov	r0, r1
 800fc60:	4611      	mov	r1, r2
 800fc62:	2200      	movs	r2, #0
 800fc64:	602a      	str	r2, [r5, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	f7f1 f9e5 	bl	8001036 <_lseek>
 800fc6c:	1c43      	adds	r3, r0, #1
 800fc6e:	d102      	bne.n	800fc76 <_lseek_r+0x1e>
 800fc70:	682b      	ldr	r3, [r5, #0]
 800fc72:	b103      	cbz	r3, 800fc76 <_lseek_r+0x1e>
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	20008ca8 	.word	0x20008ca8

0800fc7c <_read_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4d07      	ldr	r5, [pc, #28]	@ (800fc9c <_read_r+0x20>)
 800fc80:	4604      	mov	r4, r0
 800fc82:	4608      	mov	r0, r1
 800fc84:	4611      	mov	r1, r2
 800fc86:	2200      	movs	r2, #0
 800fc88:	602a      	str	r2, [r5, #0]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	f7f1 f973 	bl	8000f76 <_read>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d102      	bne.n	800fc9a <_read_r+0x1e>
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	b103      	cbz	r3, 800fc9a <_read_r+0x1e>
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	20008ca8 	.word	0x20008ca8

0800fca0 <_sbrk_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4d06      	ldr	r5, [pc, #24]	@ (800fcbc <_sbrk_r+0x1c>)
 800fca4:	2300      	movs	r3, #0
 800fca6:	4604      	mov	r4, r0
 800fca8:	4608      	mov	r0, r1
 800fcaa:	602b      	str	r3, [r5, #0]
 800fcac:	f7f1 f9d0 	bl	8001050 <_sbrk>
 800fcb0:	1c43      	adds	r3, r0, #1
 800fcb2:	d102      	bne.n	800fcba <_sbrk_r+0x1a>
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	b103      	cbz	r3, 800fcba <_sbrk_r+0x1a>
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	bd38      	pop	{r3, r4, r5, pc}
 800fcbc:	20008ca8 	.word	0x20008ca8

0800fcc0 <_write_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	@ (800fce0 <_write_r+0x20>)
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	4611      	mov	r1, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	602a      	str	r2, [r5, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	f7f1 f96e 	bl	8000fb0 <_write>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_write_r+0x1e>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_write_r+0x1e>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	20008ca8 	.word	0x20008ca8

0800fce4 <__errno>:
 800fce4:	4b01      	ldr	r3, [pc, #4]	@ (800fcec <__errno+0x8>)
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	20000160 	.word	0x20000160

0800fcf0 <__libc_init_array>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4d0d      	ldr	r5, [pc, #52]	@ (800fd28 <__libc_init_array+0x38>)
 800fcf4:	4c0d      	ldr	r4, [pc, #52]	@ (800fd2c <__libc_init_array+0x3c>)
 800fcf6:	1b64      	subs	r4, r4, r5
 800fcf8:	10a4      	asrs	r4, r4, #2
 800fcfa:	2600      	movs	r6, #0
 800fcfc:	42a6      	cmp	r6, r4
 800fcfe:	d109      	bne.n	800fd14 <__libc_init_array+0x24>
 800fd00:	4d0b      	ldr	r5, [pc, #44]	@ (800fd30 <__libc_init_array+0x40>)
 800fd02:	4c0c      	ldr	r4, [pc, #48]	@ (800fd34 <__libc_init_array+0x44>)
 800fd04:	f000 fd8a 	bl	801081c <_init>
 800fd08:	1b64      	subs	r4, r4, r5
 800fd0a:	10a4      	asrs	r4, r4, #2
 800fd0c:	2600      	movs	r6, #0
 800fd0e:	42a6      	cmp	r6, r4
 800fd10:	d105      	bne.n	800fd1e <__libc_init_array+0x2e>
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd18:	4798      	blx	r3
 800fd1a:	3601      	adds	r6, #1
 800fd1c:	e7ee      	b.n	800fcfc <__libc_init_array+0xc>
 800fd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd22:	4798      	blx	r3
 800fd24:	3601      	adds	r6, #1
 800fd26:	e7f2      	b.n	800fd0e <__libc_init_array+0x1e>
 800fd28:	08010c4c 	.word	0x08010c4c
 800fd2c:	08010c4c 	.word	0x08010c4c
 800fd30:	08010c4c 	.word	0x08010c4c
 800fd34:	08010c50 	.word	0x08010c50

0800fd38 <__retarget_lock_init_recursive>:
 800fd38:	4770      	bx	lr

0800fd3a <__retarget_lock_acquire_recursive>:
 800fd3a:	4770      	bx	lr

0800fd3c <__retarget_lock_release_recursive>:
 800fd3c:	4770      	bx	lr

0800fd3e <memcpy>:
 800fd3e:	440a      	add	r2, r1
 800fd40:	4291      	cmp	r1, r2
 800fd42:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd46:	d100      	bne.n	800fd4a <memcpy+0xc>
 800fd48:	4770      	bx	lr
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd54:	4291      	cmp	r1, r2
 800fd56:	d1f9      	bne.n	800fd4c <memcpy+0xe>
 800fd58:	bd10      	pop	{r4, pc}
	...

0800fd5c <__assert_func>:
 800fd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5e:	4614      	mov	r4, r2
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b09      	ldr	r3, [pc, #36]	@ (800fd88 <__assert_func+0x2c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4605      	mov	r5, r0
 800fd68:	68d8      	ldr	r0, [r3, #12]
 800fd6a:	b954      	cbnz	r4, 800fd82 <__assert_func+0x26>
 800fd6c:	4b07      	ldr	r3, [pc, #28]	@ (800fd8c <__assert_func+0x30>)
 800fd6e:	461c      	mov	r4, r3
 800fd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd74:	9100      	str	r1, [sp, #0]
 800fd76:	462b      	mov	r3, r5
 800fd78:	4905      	ldr	r1, [pc, #20]	@ (800fd90 <__assert_func+0x34>)
 800fd7a:	f000 fa99 	bl	80102b0 <fiprintf>
 800fd7e:	f000 faa9 	bl	80102d4 <abort>
 800fd82:	4b04      	ldr	r3, [pc, #16]	@ (800fd94 <__assert_func+0x38>)
 800fd84:	e7f4      	b.n	800fd70 <__assert_func+0x14>
 800fd86:	bf00      	nop
 800fd88:	20000160 	.word	0x20000160
 800fd8c:	08010c10 	.word	0x08010c10
 800fd90:	08010be2 	.word	0x08010be2
 800fd94:	08010bd5 	.word	0x08010bd5

0800fd98 <_free_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4605      	mov	r5, r0
 800fd9c:	2900      	cmp	r1, #0
 800fd9e:	d041      	beq.n	800fe24 <_free_r+0x8c>
 800fda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fda4:	1f0c      	subs	r4, r1, #4
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	bfb8      	it	lt
 800fdaa:	18e4      	addlt	r4, r4, r3
 800fdac:	f7ff fd44 	bl	800f838 <__malloc_lock>
 800fdb0:	4a1d      	ldr	r2, [pc, #116]	@ (800fe28 <_free_r+0x90>)
 800fdb2:	6813      	ldr	r3, [r2, #0]
 800fdb4:	b933      	cbnz	r3, 800fdc4 <_free_r+0x2c>
 800fdb6:	6063      	str	r3, [r4, #4]
 800fdb8:	6014      	str	r4, [r2, #0]
 800fdba:	4628      	mov	r0, r5
 800fdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdc0:	f7ff bd40 	b.w	800f844 <__malloc_unlock>
 800fdc4:	42a3      	cmp	r3, r4
 800fdc6:	d908      	bls.n	800fdda <_free_r+0x42>
 800fdc8:	6820      	ldr	r0, [r4, #0]
 800fdca:	1821      	adds	r1, r4, r0
 800fdcc:	428b      	cmp	r3, r1
 800fdce:	bf01      	itttt	eq
 800fdd0:	6819      	ldreq	r1, [r3, #0]
 800fdd2:	685b      	ldreq	r3, [r3, #4]
 800fdd4:	1809      	addeq	r1, r1, r0
 800fdd6:	6021      	streq	r1, [r4, #0]
 800fdd8:	e7ed      	b.n	800fdb6 <_free_r+0x1e>
 800fdda:	461a      	mov	r2, r3
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	b10b      	cbz	r3, 800fde4 <_free_r+0x4c>
 800fde0:	42a3      	cmp	r3, r4
 800fde2:	d9fa      	bls.n	800fdda <_free_r+0x42>
 800fde4:	6811      	ldr	r1, [r2, #0]
 800fde6:	1850      	adds	r0, r2, r1
 800fde8:	42a0      	cmp	r0, r4
 800fdea:	d10b      	bne.n	800fe04 <_free_r+0x6c>
 800fdec:	6820      	ldr	r0, [r4, #0]
 800fdee:	4401      	add	r1, r0
 800fdf0:	1850      	adds	r0, r2, r1
 800fdf2:	4283      	cmp	r3, r0
 800fdf4:	6011      	str	r1, [r2, #0]
 800fdf6:	d1e0      	bne.n	800fdba <_free_r+0x22>
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	6053      	str	r3, [r2, #4]
 800fdfe:	4408      	add	r0, r1
 800fe00:	6010      	str	r0, [r2, #0]
 800fe02:	e7da      	b.n	800fdba <_free_r+0x22>
 800fe04:	d902      	bls.n	800fe0c <_free_r+0x74>
 800fe06:	230c      	movs	r3, #12
 800fe08:	602b      	str	r3, [r5, #0]
 800fe0a:	e7d6      	b.n	800fdba <_free_r+0x22>
 800fe0c:	6820      	ldr	r0, [r4, #0]
 800fe0e:	1821      	adds	r1, r4, r0
 800fe10:	428b      	cmp	r3, r1
 800fe12:	bf04      	itt	eq
 800fe14:	6819      	ldreq	r1, [r3, #0]
 800fe16:	685b      	ldreq	r3, [r3, #4]
 800fe18:	6063      	str	r3, [r4, #4]
 800fe1a:	bf04      	itt	eq
 800fe1c:	1809      	addeq	r1, r1, r0
 800fe1e:	6021      	streq	r1, [r4, #0]
 800fe20:	6054      	str	r4, [r2, #4]
 800fe22:	e7ca      	b.n	800fdba <_free_r+0x22>
 800fe24:	bd38      	pop	{r3, r4, r5, pc}
 800fe26:	bf00      	nop
 800fe28:	20008b68 	.word	0x20008b68

0800fe2c <_malloc_usable_size_r>:
 800fe2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe30:	1f18      	subs	r0, r3, #4
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	bfbc      	itt	lt
 800fe36:	580b      	ldrlt	r3, [r1, r0]
 800fe38:	18c0      	addlt	r0, r0, r3
 800fe3a:	4770      	bx	lr

0800fe3c <_printf_common>:
 800fe3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe40:	4616      	mov	r6, r2
 800fe42:	4698      	mov	r8, r3
 800fe44:	688a      	ldr	r2, [r1, #8]
 800fe46:	690b      	ldr	r3, [r1, #16]
 800fe48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	bfb8      	it	lt
 800fe50:	4613      	movlt	r3, r2
 800fe52:	6033      	str	r3, [r6, #0]
 800fe54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe58:	4607      	mov	r7, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	b10a      	cbz	r2, 800fe62 <_printf_common+0x26>
 800fe5e:	3301      	adds	r3, #1
 800fe60:	6033      	str	r3, [r6, #0]
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	0699      	lsls	r1, r3, #26
 800fe66:	bf42      	ittt	mi
 800fe68:	6833      	ldrmi	r3, [r6, #0]
 800fe6a:	3302      	addmi	r3, #2
 800fe6c:	6033      	strmi	r3, [r6, #0]
 800fe6e:	6825      	ldr	r5, [r4, #0]
 800fe70:	f015 0506 	ands.w	r5, r5, #6
 800fe74:	d106      	bne.n	800fe84 <_printf_common+0x48>
 800fe76:	f104 0a19 	add.w	sl, r4, #25
 800fe7a:	68e3      	ldr	r3, [r4, #12]
 800fe7c:	6832      	ldr	r2, [r6, #0]
 800fe7e:	1a9b      	subs	r3, r3, r2
 800fe80:	42ab      	cmp	r3, r5
 800fe82:	dc26      	bgt.n	800fed2 <_printf_common+0x96>
 800fe84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe88:	6822      	ldr	r2, [r4, #0]
 800fe8a:	3b00      	subs	r3, #0
 800fe8c:	bf18      	it	ne
 800fe8e:	2301      	movne	r3, #1
 800fe90:	0692      	lsls	r2, r2, #26
 800fe92:	d42b      	bmi.n	800feec <_printf_common+0xb0>
 800fe94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe98:	4641      	mov	r1, r8
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	47c8      	blx	r9
 800fe9e:	3001      	adds	r0, #1
 800fea0:	d01e      	beq.n	800fee0 <_printf_common+0xa4>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	6922      	ldr	r2, [r4, #16]
 800fea6:	f003 0306 	and.w	r3, r3, #6
 800feaa:	2b04      	cmp	r3, #4
 800feac:	bf02      	ittt	eq
 800feae:	68e5      	ldreq	r5, [r4, #12]
 800feb0:	6833      	ldreq	r3, [r6, #0]
 800feb2:	1aed      	subeq	r5, r5, r3
 800feb4:	68a3      	ldr	r3, [r4, #8]
 800feb6:	bf0c      	ite	eq
 800feb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800febc:	2500      	movne	r5, #0
 800febe:	4293      	cmp	r3, r2
 800fec0:	bfc4      	itt	gt
 800fec2:	1a9b      	subgt	r3, r3, r2
 800fec4:	18ed      	addgt	r5, r5, r3
 800fec6:	2600      	movs	r6, #0
 800fec8:	341a      	adds	r4, #26
 800feca:	42b5      	cmp	r5, r6
 800fecc:	d11a      	bne.n	800ff04 <_printf_common+0xc8>
 800fece:	2000      	movs	r0, #0
 800fed0:	e008      	b.n	800fee4 <_printf_common+0xa8>
 800fed2:	2301      	movs	r3, #1
 800fed4:	4652      	mov	r2, sl
 800fed6:	4641      	mov	r1, r8
 800fed8:	4638      	mov	r0, r7
 800feda:	47c8      	blx	r9
 800fedc:	3001      	adds	r0, #1
 800fede:	d103      	bne.n	800fee8 <_printf_common+0xac>
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295
 800fee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee8:	3501      	adds	r5, #1
 800feea:	e7c6      	b.n	800fe7a <_printf_common+0x3e>
 800feec:	18e1      	adds	r1, r4, r3
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	2030      	movs	r0, #48	@ 0x30
 800fef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fef6:	4422      	add	r2, r4
 800fef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fefc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff00:	3302      	adds	r3, #2
 800ff02:	e7c7      	b.n	800fe94 <_printf_common+0x58>
 800ff04:	2301      	movs	r3, #1
 800ff06:	4622      	mov	r2, r4
 800ff08:	4641      	mov	r1, r8
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	47c8      	blx	r9
 800ff0e:	3001      	adds	r0, #1
 800ff10:	d0e6      	beq.n	800fee0 <_printf_common+0xa4>
 800ff12:	3601      	adds	r6, #1
 800ff14:	e7d9      	b.n	800feca <_printf_common+0x8e>
	...

0800ff18 <_printf_i>:
 800ff18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1c:	7e0f      	ldrb	r7, [r1, #24]
 800ff1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff20:	2f78      	cmp	r7, #120	@ 0x78
 800ff22:	4691      	mov	r9, r2
 800ff24:	4680      	mov	r8, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff2e:	d807      	bhi.n	800ff40 <_printf_i+0x28>
 800ff30:	2f62      	cmp	r7, #98	@ 0x62
 800ff32:	d80a      	bhi.n	800ff4a <_printf_i+0x32>
 800ff34:	2f00      	cmp	r7, #0
 800ff36:	f000 80d2 	beq.w	80100de <_printf_i+0x1c6>
 800ff3a:	2f58      	cmp	r7, #88	@ 0x58
 800ff3c:	f000 80b9 	beq.w	80100b2 <_printf_i+0x19a>
 800ff40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff48:	e03a      	b.n	800ffc0 <_printf_i+0xa8>
 800ff4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff4e:	2b15      	cmp	r3, #21
 800ff50:	d8f6      	bhi.n	800ff40 <_printf_i+0x28>
 800ff52:	a101      	add	r1, pc, #4	@ (adr r1, 800ff58 <_printf_i+0x40>)
 800ff54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff58:	0800ffb1 	.word	0x0800ffb1
 800ff5c:	0800ffc5 	.word	0x0800ffc5
 800ff60:	0800ff41 	.word	0x0800ff41
 800ff64:	0800ff41 	.word	0x0800ff41
 800ff68:	0800ff41 	.word	0x0800ff41
 800ff6c:	0800ff41 	.word	0x0800ff41
 800ff70:	0800ffc5 	.word	0x0800ffc5
 800ff74:	0800ff41 	.word	0x0800ff41
 800ff78:	0800ff41 	.word	0x0800ff41
 800ff7c:	0800ff41 	.word	0x0800ff41
 800ff80:	0800ff41 	.word	0x0800ff41
 800ff84:	080100c5 	.word	0x080100c5
 800ff88:	0800ffef 	.word	0x0800ffef
 800ff8c:	0801007f 	.word	0x0801007f
 800ff90:	0800ff41 	.word	0x0800ff41
 800ff94:	0800ff41 	.word	0x0800ff41
 800ff98:	080100e7 	.word	0x080100e7
 800ff9c:	0800ff41 	.word	0x0800ff41
 800ffa0:	0800ffef 	.word	0x0800ffef
 800ffa4:	0800ff41 	.word	0x0800ff41
 800ffa8:	0800ff41 	.word	0x0800ff41
 800ffac:	08010087 	.word	0x08010087
 800ffb0:	6833      	ldr	r3, [r6, #0]
 800ffb2:	1d1a      	adds	r2, r3, #4
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6032      	str	r2, [r6, #0]
 800ffb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e09d      	b.n	8010100 <_printf_i+0x1e8>
 800ffc4:	6833      	ldr	r3, [r6, #0]
 800ffc6:	6820      	ldr	r0, [r4, #0]
 800ffc8:	1d19      	adds	r1, r3, #4
 800ffca:	6031      	str	r1, [r6, #0]
 800ffcc:	0606      	lsls	r6, r0, #24
 800ffce:	d501      	bpl.n	800ffd4 <_printf_i+0xbc>
 800ffd0:	681d      	ldr	r5, [r3, #0]
 800ffd2:	e003      	b.n	800ffdc <_printf_i+0xc4>
 800ffd4:	0645      	lsls	r5, r0, #25
 800ffd6:	d5fb      	bpl.n	800ffd0 <_printf_i+0xb8>
 800ffd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	da03      	bge.n	800ffe8 <_printf_i+0xd0>
 800ffe0:	232d      	movs	r3, #45	@ 0x2d
 800ffe2:	426d      	negs	r5, r5
 800ffe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffe8:	4859      	ldr	r0, [pc, #356]	@ (8010150 <_printf_i+0x238>)
 800ffea:	230a      	movs	r3, #10
 800ffec:	e011      	b.n	8010012 <_printf_i+0xfa>
 800ffee:	6821      	ldr	r1, [r4, #0]
 800fff0:	6833      	ldr	r3, [r6, #0]
 800fff2:	0608      	lsls	r0, r1, #24
 800fff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fff8:	d402      	bmi.n	8010000 <_printf_i+0xe8>
 800fffa:	0649      	lsls	r1, r1, #25
 800fffc:	bf48      	it	mi
 800fffe:	b2ad      	uxthmi	r5, r5
 8010000:	2f6f      	cmp	r7, #111	@ 0x6f
 8010002:	4853      	ldr	r0, [pc, #332]	@ (8010150 <_printf_i+0x238>)
 8010004:	6033      	str	r3, [r6, #0]
 8010006:	bf14      	ite	ne
 8010008:	230a      	movne	r3, #10
 801000a:	2308      	moveq	r3, #8
 801000c:	2100      	movs	r1, #0
 801000e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010012:	6866      	ldr	r6, [r4, #4]
 8010014:	60a6      	str	r6, [r4, #8]
 8010016:	2e00      	cmp	r6, #0
 8010018:	bfa2      	ittt	ge
 801001a:	6821      	ldrge	r1, [r4, #0]
 801001c:	f021 0104 	bicge.w	r1, r1, #4
 8010020:	6021      	strge	r1, [r4, #0]
 8010022:	b90d      	cbnz	r5, 8010028 <_printf_i+0x110>
 8010024:	2e00      	cmp	r6, #0
 8010026:	d04b      	beq.n	80100c0 <_printf_i+0x1a8>
 8010028:	4616      	mov	r6, r2
 801002a:	fbb5 f1f3 	udiv	r1, r5, r3
 801002e:	fb03 5711 	mls	r7, r3, r1, r5
 8010032:	5dc7      	ldrb	r7, [r0, r7]
 8010034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010038:	462f      	mov	r7, r5
 801003a:	42bb      	cmp	r3, r7
 801003c:	460d      	mov	r5, r1
 801003e:	d9f4      	bls.n	801002a <_printf_i+0x112>
 8010040:	2b08      	cmp	r3, #8
 8010042:	d10b      	bne.n	801005c <_printf_i+0x144>
 8010044:	6823      	ldr	r3, [r4, #0]
 8010046:	07df      	lsls	r7, r3, #31
 8010048:	d508      	bpl.n	801005c <_printf_i+0x144>
 801004a:	6923      	ldr	r3, [r4, #16]
 801004c:	6861      	ldr	r1, [r4, #4]
 801004e:	4299      	cmp	r1, r3
 8010050:	bfde      	ittt	le
 8010052:	2330      	movle	r3, #48	@ 0x30
 8010054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010058:	f106 36ff 	addle.w	r6, r6, #4294967295
 801005c:	1b92      	subs	r2, r2, r6
 801005e:	6122      	str	r2, [r4, #16]
 8010060:	f8cd a000 	str.w	sl, [sp]
 8010064:	464b      	mov	r3, r9
 8010066:	aa03      	add	r2, sp, #12
 8010068:	4621      	mov	r1, r4
 801006a:	4640      	mov	r0, r8
 801006c:	f7ff fee6 	bl	800fe3c <_printf_common>
 8010070:	3001      	adds	r0, #1
 8010072:	d14a      	bne.n	801010a <_printf_i+0x1f2>
 8010074:	f04f 30ff 	mov.w	r0, #4294967295
 8010078:	b004      	add	sp, #16
 801007a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	f043 0320 	orr.w	r3, r3, #32
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	4833      	ldr	r0, [pc, #204]	@ (8010154 <_printf_i+0x23c>)
 8010088:	2778      	movs	r7, #120	@ 0x78
 801008a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	6831      	ldr	r1, [r6, #0]
 8010092:	061f      	lsls	r7, r3, #24
 8010094:	f851 5b04 	ldr.w	r5, [r1], #4
 8010098:	d402      	bmi.n	80100a0 <_printf_i+0x188>
 801009a:	065f      	lsls	r7, r3, #25
 801009c:	bf48      	it	mi
 801009e:	b2ad      	uxthmi	r5, r5
 80100a0:	6031      	str	r1, [r6, #0]
 80100a2:	07d9      	lsls	r1, r3, #31
 80100a4:	bf44      	itt	mi
 80100a6:	f043 0320 	orrmi.w	r3, r3, #32
 80100aa:	6023      	strmi	r3, [r4, #0]
 80100ac:	b11d      	cbz	r5, 80100b6 <_printf_i+0x19e>
 80100ae:	2310      	movs	r3, #16
 80100b0:	e7ac      	b.n	801000c <_printf_i+0xf4>
 80100b2:	4827      	ldr	r0, [pc, #156]	@ (8010150 <_printf_i+0x238>)
 80100b4:	e7e9      	b.n	801008a <_printf_i+0x172>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	f023 0320 	bic.w	r3, r3, #32
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	e7f6      	b.n	80100ae <_printf_i+0x196>
 80100c0:	4616      	mov	r6, r2
 80100c2:	e7bd      	b.n	8010040 <_printf_i+0x128>
 80100c4:	6833      	ldr	r3, [r6, #0]
 80100c6:	6825      	ldr	r5, [r4, #0]
 80100c8:	6961      	ldr	r1, [r4, #20]
 80100ca:	1d18      	adds	r0, r3, #4
 80100cc:	6030      	str	r0, [r6, #0]
 80100ce:	062e      	lsls	r6, r5, #24
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	d501      	bpl.n	80100d8 <_printf_i+0x1c0>
 80100d4:	6019      	str	r1, [r3, #0]
 80100d6:	e002      	b.n	80100de <_printf_i+0x1c6>
 80100d8:	0668      	lsls	r0, r5, #25
 80100da:	d5fb      	bpl.n	80100d4 <_printf_i+0x1bc>
 80100dc:	8019      	strh	r1, [r3, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	6123      	str	r3, [r4, #16]
 80100e2:	4616      	mov	r6, r2
 80100e4:	e7bc      	b.n	8010060 <_printf_i+0x148>
 80100e6:	6833      	ldr	r3, [r6, #0]
 80100e8:	1d1a      	adds	r2, r3, #4
 80100ea:	6032      	str	r2, [r6, #0]
 80100ec:	681e      	ldr	r6, [r3, #0]
 80100ee:	6862      	ldr	r2, [r4, #4]
 80100f0:	2100      	movs	r1, #0
 80100f2:	4630      	mov	r0, r6
 80100f4:	f7f0 f874 	bl	80001e0 <memchr>
 80100f8:	b108      	cbz	r0, 80100fe <_printf_i+0x1e6>
 80100fa:	1b80      	subs	r0, r0, r6
 80100fc:	6060      	str	r0, [r4, #4]
 80100fe:	6863      	ldr	r3, [r4, #4]
 8010100:	6123      	str	r3, [r4, #16]
 8010102:	2300      	movs	r3, #0
 8010104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010108:	e7aa      	b.n	8010060 <_printf_i+0x148>
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	4632      	mov	r2, r6
 801010e:	4649      	mov	r1, r9
 8010110:	4640      	mov	r0, r8
 8010112:	47d0      	blx	sl
 8010114:	3001      	adds	r0, #1
 8010116:	d0ad      	beq.n	8010074 <_printf_i+0x15c>
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	079b      	lsls	r3, r3, #30
 801011c:	d413      	bmi.n	8010146 <_printf_i+0x22e>
 801011e:	68e0      	ldr	r0, [r4, #12]
 8010120:	9b03      	ldr	r3, [sp, #12]
 8010122:	4298      	cmp	r0, r3
 8010124:	bfb8      	it	lt
 8010126:	4618      	movlt	r0, r3
 8010128:	e7a6      	b.n	8010078 <_printf_i+0x160>
 801012a:	2301      	movs	r3, #1
 801012c:	4632      	mov	r2, r6
 801012e:	4649      	mov	r1, r9
 8010130:	4640      	mov	r0, r8
 8010132:	47d0      	blx	sl
 8010134:	3001      	adds	r0, #1
 8010136:	d09d      	beq.n	8010074 <_printf_i+0x15c>
 8010138:	3501      	adds	r5, #1
 801013a:	68e3      	ldr	r3, [r4, #12]
 801013c:	9903      	ldr	r1, [sp, #12]
 801013e:	1a5b      	subs	r3, r3, r1
 8010140:	42ab      	cmp	r3, r5
 8010142:	dcf2      	bgt.n	801012a <_printf_i+0x212>
 8010144:	e7eb      	b.n	801011e <_printf_i+0x206>
 8010146:	2500      	movs	r5, #0
 8010148:	f104 0619 	add.w	r6, r4, #25
 801014c:	e7f5      	b.n	801013a <_printf_i+0x222>
 801014e:	bf00      	nop
 8010150:	08010c11 	.word	0x08010c11
 8010154:	08010c22 	.word	0x08010c22

08010158 <__sflush_r>:
 8010158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801015c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010160:	0716      	lsls	r6, r2, #28
 8010162:	4605      	mov	r5, r0
 8010164:	460c      	mov	r4, r1
 8010166:	d454      	bmi.n	8010212 <__sflush_r+0xba>
 8010168:	684b      	ldr	r3, [r1, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	dc02      	bgt.n	8010174 <__sflush_r+0x1c>
 801016e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010170:	2b00      	cmp	r3, #0
 8010172:	dd48      	ble.n	8010206 <__sflush_r+0xae>
 8010174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010176:	2e00      	cmp	r6, #0
 8010178:	d045      	beq.n	8010206 <__sflush_r+0xae>
 801017a:	2300      	movs	r3, #0
 801017c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010180:	682f      	ldr	r7, [r5, #0]
 8010182:	6a21      	ldr	r1, [r4, #32]
 8010184:	602b      	str	r3, [r5, #0]
 8010186:	d030      	beq.n	80101ea <__sflush_r+0x92>
 8010188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	0759      	lsls	r1, r3, #29
 801018e:	d505      	bpl.n	801019c <__sflush_r+0x44>
 8010190:	6863      	ldr	r3, [r4, #4]
 8010192:	1ad2      	subs	r2, r2, r3
 8010194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010196:	b10b      	cbz	r3, 801019c <__sflush_r+0x44>
 8010198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801019a:	1ad2      	subs	r2, r2, r3
 801019c:	2300      	movs	r3, #0
 801019e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101a0:	6a21      	ldr	r1, [r4, #32]
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b0      	blx	r6
 80101a6:	1c43      	adds	r3, r0, #1
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	d106      	bne.n	80101ba <__sflush_r+0x62>
 80101ac:	6829      	ldr	r1, [r5, #0]
 80101ae:	291d      	cmp	r1, #29
 80101b0:	d82b      	bhi.n	801020a <__sflush_r+0xb2>
 80101b2:	4a2a      	ldr	r2, [pc, #168]	@ (801025c <__sflush_r+0x104>)
 80101b4:	410a      	asrs	r2, r1
 80101b6:	07d6      	lsls	r6, r2, #31
 80101b8:	d427      	bmi.n	801020a <__sflush_r+0xb2>
 80101ba:	2200      	movs	r2, #0
 80101bc:	6062      	str	r2, [r4, #4]
 80101be:	04d9      	lsls	r1, r3, #19
 80101c0:	6922      	ldr	r2, [r4, #16]
 80101c2:	6022      	str	r2, [r4, #0]
 80101c4:	d504      	bpl.n	80101d0 <__sflush_r+0x78>
 80101c6:	1c42      	adds	r2, r0, #1
 80101c8:	d101      	bne.n	80101ce <__sflush_r+0x76>
 80101ca:	682b      	ldr	r3, [r5, #0]
 80101cc:	b903      	cbnz	r3, 80101d0 <__sflush_r+0x78>
 80101ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80101d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101d2:	602f      	str	r7, [r5, #0]
 80101d4:	b1b9      	cbz	r1, 8010206 <__sflush_r+0xae>
 80101d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101da:	4299      	cmp	r1, r3
 80101dc:	d002      	beq.n	80101e4 <__sflush_r+0x8c>
 80101de:	4628      	mov	r0, r5
 80101e0:	f7ff fdda 	bl	800fd98 <_free_r>
 80101e4:	2300      	movs	r3, #0
 80101e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80101e8:	e00d      	b.n	8010206 <__sflush_r+0xae>
 80101ea:	2301      	movs	r3, #1
 80101ec:	4628      	mov	r0, r5
 80101ee:	47b0      	blx	r6
 80101f0:	4602      	mov	r2, r0
 80101f2:	1c50      	adds	r0, r2, #1
 80101f4:	d1c9      	bne.n	801018a <__sflush_r+0x32>
 80101f6:	682b      	ldr	r3, [r5, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d0c6      	beq.n	801018a <__sflush_r+0x32>
 80101fc:	2b1d      	cmp	r3, #29
 80101fe:	d001      	beq.n	8010204 <__sflush_r+0xac>
 8010200:	2b16      	cmp	r3, #22
 8010202:	d11e      	bne.n	8010242 <__sflush_r+0xea>
 8010204:	602f      	str	r7, [r5, #0]
 8010206:	2000      	movs	r0, #0
 8010208:	e022      	b.n	8010250 <__sflush_r+0xf8>
 801020a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801020e:	b21b      	sxth	r3, r3
 8010210:	e01b      	b.n	801024a <__sflush_r+0xf2>
 8010212:	690f      	ldr	r7, [r1, #16]
 8010214:	2f00      	cmp	r7, #0
 8010216:	d0f6      	beq.n	8010206 <__sflush_r+0xae>
 8010218:	0793      	lsls	r3, r2, #30
 801021a:	680e      	ldr	r6, [r1, #0]
 801021c:	bf08      	it	eq
 801021e:	694b      	ldreq	r3, [r1, #20]
 8010220:	600f      	str	r7, [r1, #0]
 8010222:	bf18      	it	ne
 8010224:	2300      	movne	r3, #0
 8010226:	eba6 0807 	sub.w	r8, r6, r7
 801022a:	608b      	str	r3, [r1, #8]
 801022c:	f1b8 0f00 	cmp.w	r8, #0
 8010230:	dde9      	ble.n	8010206 <__sflush_r+0xae>
 8010232:	6a21      	ldr	r1, [r4, #32]
 8010234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010236:	4643      	mov	r3, r8
 8010238:	463a      	mov	r2, r7
 801023a:	4628      	mov	r0, r5
 801023c:	47b0      	blx	r6
 801023e:	2800      	cmp	r0, #0
 8010240:	dc08      	bgt.n	8010254 <__sflush_r+0xfc>
 8010242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801024a:	81a3      	strh	r3, [r4, #12]
 801024c:	f04f 30ff 	mov.w	r0, #4294967295
 8010250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010254:	4407      	add	r7, r0
 8010256:	eba8 0800 	sub.w	r8, r8, r0
 801025a:	e7e7      	b.n	801022c <__sflush_r+0xd4>
 801025c:	dfbffffe 	.word	0xdfbffffe

08010260 <_fflush_r>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	690b      	ldr	r3, [r1, #16]
 8010264:	4605      	mov	r5, r0
 8010266:	460c      	mov	r4, r1
 8010268:	b913      	cbnz	r3, 8010270 <_fflush_r+0x10>
 801026a:	2500      	movs	r5, #0
 801026c:	4628      	mov	r0, r5
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	b118      	cbz	r0, 801027a <_fflush_r+0x1a>
 8010272:	6a03      	ldr	r3, [r0, #32]
 8010274:	b90b      	cbnz	r3, 801027a <_fflush_r+0x1a>
 8010276:	f7ff fbeb 	bl	800fa50 <__sinit>
 801027a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0f3      	beq.n	801026a <_fflush_r+0xa>
 8010282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010284:	07d0      	lsls	r0, r2, #31
 8010286:	d404      	bmi.n	8010292 <_fflush_r+0x32>
 8010288:	0599      	lsls	r1, r3, #22
 801028a:	d402      	bmi.n	8010292 <_fflush_r+0x32>
 801028c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801028e:	f7ff fd54 	bl	800fd3a <__retarget_lock_acquire_recursive>
 8010292:	4628      	mov	r0, r5
 8010294:	4621      	mov	r1, r4
 8010296:	f7ff ff5f 	bl	8010158 <__sflush_r>
 801029a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801029c:	07da      	lsls	r2, r3, #31
 801029e:	4605      	mov	r5, r0
 80102a0:	d4e4      	bmi.n	801026c <_fflush_r+0xc>
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	059b      	lsls	r3, r3, #22
 80102a6:	d4e1      	bmi.n	801026c <_fflush_r+0xc>
 80102a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102aa:	f7ff fd47 	bl	800fd3c <__retarget_lock_release_recursive>
 80102ae:	e7dd      	b.n	801026c <_fflush_r+0xc>

080102b0 <fiprintf>:
 80102b0:	b40e      	push	{r1, r2, r3}
 80102b2:	b503      	push	{r0, r1, lr}
 80102b4:	4601      	mov	r1, r0
 80102b6:	ab03      	add	r3, sp, #12
 80102b8:	4805      	ldr	r0, [pc, #20]	@ (80102d0 <fiprintf+0x20>)
 80102ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80102be:	6800      	ldr	r0, [r0, #0]
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	f000 f837 	bl	8010334 <_vfiprintf_r>
 80102c6:	b002      	add	sp, #8
 80102c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80102cc:	b003      	add	sp, #12
 80102ce:	4770      	bx	lr
 80102d0:	20000160 	.word	0x20000160

080102d4 <abort>:
 80102d4:	b508      	push	{r3, lr}
 80102d6:	2006      	movs	r0, #6
 80102d8:	f000 fa00 	bl	80106dc <raise>
 80102dc:	2001      	movs	r0, #1
 80102de:	f7f0 fe3f 	bl	8000f60 <_exit>

080102e2 <__sfputc_r>:
 80102e2:	6893      	ldr	r3, [r2, #8]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	b410      	push	{r4}
 80102ea:	6093      	str	r3, [r2, #8]
 80102ec:	da08      	bge.n	8010300 <__sfputc_r+0x1e>
 80102ee:	6994      	ldr	r4, [r2, #24]
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	db01      	blt.n	80102f8 <__sfputc_r+0x16>
 80102f4:	290a      	cmp	r1, #10
 80102f6:	d103      	bne.n	8010300 <__sfputc_r+0x1e>
 80102f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102fc:	f000 b932 	b.w	8010564 <__swbuf_r>
 8010300:	6813      	ldr	r3, [r2, #0]
 8010302:	1c58      	adds	r0, r3, #1
 8010304:	6010      	str	r0, [r2, #0]
 8010306:	7019      	strb	r1, [r3, #0]
 8010308:	4608      	mov	r0, r1
 801030a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801030e:	4770      	bx	lr

08010310 <__sfputs_r>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	4606      	mov	r6, r0
 8010314:	460f      	mov	r7, r1
 8010316:	4614      	mov	r4, r2
 8010318:	18d5      	adds	r5, r2, r3
 801031a:	42ac      	cmp	r4, r5
 801031c:	d101      	bne.n	8010322 <__sfputs_r+0x12>
 801031e:	2000      	movs	r0, #0
 8010320:	e007      	b.n	8010332 <__sfputs_r+0x22>
 8010322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010326:	463a      	mov	r2, r7
 8010328:	4630      	mov	r0, r6
 801032a:	f7ff ffda 	bl	80102e2 <__sfputc_r>
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	d1f3      	bne.n	801031a <__sfputs_r+0xa>
 8010332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010334 <_vfiprintf_r>:
 8010334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010338:	460d      	mov	r5, r1
 801033a:	b09d      	sub	sp, #116	@ 0x74
 801033c:	4614      	mov	r4, r2
 801033e:	4698      	mov	r8, r3
 8010340:	4606      	mov	r6, r0
 8010342:	b118      	cbz	r0, 801034c <_vfiprintf_r+0x18>
 8010344:	6a03      	ldr	r3, [r0, #32]
 8010346:	b90b      	cbnz	r3, 801034c <_vfiprintf_r+0x18>
 8010348:	f7ff fb82 	bl	800fa50 <__sinit>
 801034c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801034e:	07d9      	lsls	r1, r3, #31
 8010350:	d405      	bmi.n	801035e <_vfiprintf_r+0x2a>
 8010352:	89ab      	ldrh	r3, [r5, #12]
 8010354:	059a      	lsls	r2, r3, #22
 8010356:	d402      	bmi.n	801035e <_vfiprintf_r+0x2a>
 8010358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801035a:	f7ff fcee 	bl	800fd3a <__retarget_lock_acquire_recursive>
 801035e:	89ab      	ldrh	r3, [r5, #12]
 8010360:	071b      	lsls	r3, r3, #28
 8010362:	d501      	bpl.n	8010368 <_vfiprintf_r+0x34>
 8010364:	692b      	ldr	r3, [r5, #16]
 8010366:	b99b      	cbnz	r3, 8010390 <_vfiprintf_r+0x5c>
 8010368:	4629      	mov	r1, r5
 801036a:	4630      	mov	r0, r6
 801036c:	f000 f938 	bl	80105e0 <__swsetup_r>
 8010370:	b170      	cbz	r0, 8010390 <_vfiprintf_r+0x5c>
 8010372:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010374:	07dc      	lsls	r4, r3, #31
 8010376:	d504      	bpl.n	8010382 <_vfiprintf_r+0x4e>
 8010378:	f04f 30ff 	mov.w	r0, #4294967295
 801037c:	b01d      	add	sp, #116	@ 0x74
 801037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010382:	89ab      	ldrh	r3, [r5, #12]
 8010384:	0598      	lsls	r0, r3, #22
 8010386:	d4f7      	bmi.n	8010378 <_vfiprintf_r+0x44>
 8010388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801038a:	f7ff fcd7 	bl	800fd3c <__retarget_lock_release_recursive>
 801038e:	e7f3      	b.n	8010378 <_vfiprintf_r+0x44>
 8010390:	2300      	movs	r3, #0
 8010392:	9309      	str	r3, [sp, #36]	@ 0x24
 8010394:	2320      	movs	r3, #32
 8010396:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801039a:	f8cd 800c 	str.w	r8, [sp, #12]
 801039e:	2330      	movs	r3, #48	@ 0x30
 80103a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010550 <_vfiprintf_r+0x21c>
 80103a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103a8:	f04f 0901 	mov.w	r9, #1
 80103ac:	4623      	mov	r3, r4
 80103ae:	469a      	mov	sl, r3
 80103b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103b4:	b10a      	cbz	r2, 80103ba <_vfiprintf_r+0x86>
 80103b6:	2a25      	cmp	r2, #37	@ 0x25
 80103b8:	d1f9      	bne.n	80103ae <_vfiprintf_r+0x7a>
 80103ba:	ebba 0b04 	subs.w	fp, sl, r4
 80103be:	d00b      	beq.n	80103d8 <_vfiprintf_r+0xa4>
 80103c0:	465b      	mov	r3, fp
 80103c2:	4622      	mov	r2, r4
 80103c4:	4629      	mov	r1, r5
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff ffa2 	bl	8010310 <__sfputs_r>
 80103cc:	3001      	adds	r0, #1
 80103ce:	f000 80a7 	beq.w	8010520 <_vfiprintf_r+0x1ec>
 80103d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103d4:	445a      	add	r2, fp
 80103d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80103d8:	f89a 3000 	ldrb.w	r3, [sl]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 809f 	beq.w	8010520 <_vfiprintf_r+0x1ec>
 80103e2:	2300      	movs	r3, #0
 80103e4:	f04f 32ff 	mov.w	r2, #4294967295
 80103e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103ec:	f10a 0a01 	add.w	sl, sl, #1
 80103f0:	9304      	str	r3, [sp, #16]
 80103f2:	9307      	str	r3, [sp, #28]
 80103f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80103fa:	4654      	mov	r4, sl
 80103fc:	2205      	movs	r2, #5
 80103fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010402:	4853      	ldr	r0, [pc, #332]	@ (8010550 <_vfiprintf_r+0x21c>)
 8010404:	f7ef feec 	bl	80001e0 <memchr>
 8010408:	9a04      	ldr	r2, [sp, #16]
 801040a:	b9d8      	cbnz	r0, 8010444 <_vfiprintf_r+0x110>
 801040c:	06d1      	lsls	r1, r2, #27
 801040e:	bf44      	itt	mi
 8010410:	2320      	movmi	r3, #32
 8010412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010416:	0713      	lsls	r3, r2, #28
 8010418:	bf44      	itt	mi
 801041a:	232b      	movmi	r3, #43	@ 0x2b
 801041c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010420:	f89a 3000 	ldrb.w	r3, [sl]
 8010424:	2b2a      	cmp	r3, #42	@ 0x2a
 8010426:	d015      	beq.n	8010454 <_vfiprintf_r+0x120>
 8010428:	9a07      	ldr	r2, [sp, #28]
 801042a:	4654      	mov	r4, sl
 801042c:	2000      	movs	r0, #0
 801042e:	f04f 0c0a 	mov.w	ip, #10
 8010432:	4621      	mov	r1, r4
 8010434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010438:	3b30      	subs	r3, #48	@ 0x30
 801043a:	2b09      	cmp	r3, #9
 801043c:	d94b      	bls.n	80104d6 <_vfiprintf_r+0x1a2>
 801043e:	b1b0      	cbz	r0, 801046e <_vfiprintf_r+0x13a>
 8010440:	9207      	str	r2, [sp, #28]
 8010442:	e014      	b.n	801046e <_vfiprintf_r+0x13a>
 8010444:	eba0 0308 	sub.w	r3, r0, r8
 8010448:	fa09 f303 	lsl.w	r3, r9, r3
 801044c:	4313      	orrs	r3, r2
 801044e:	9304      	str	r3, [sp, #16]
 8010450:	46a2      	mov	sl, r4
 8010452:	e7d2      	b.n	80103fa <_vfiprintf_r+0xc6>
 8010454:	9b03      	ldr	r3, [sp, #12]
 8010456:	1d19      	adds	r1, r3, #4
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	9103      	str	r1, [sp, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	bfbb      	ittet	lt
 8010460:	425b      	neglt	r3, r3
 8010462:	f042 0202 	orrlt.w	r2, r2, #2
 8010466:	9307      	strge	r3, [sp, #28]
 8010468:	9307      	strlt	r3, [sp, #28]
 801046a:	bfb8      	it	lt
 801046c:	9204      	strlt	r2, [sp, #16]
 801046e:	7823      	ldrb	r3, [r4, #0]
 8010470:	2b2e      	cmp	r3, #46	@ 0x2e
 8010472:	d10a      	bne.n	801048a <_vfiprintf_r+0x156>
 8010474:	7863      	ldrb	r3, [r4, #1]
 8010476:	2b2a      	cmp	r3, #42	@ 0x2a
 8010478:	d132      	bne.n	80104e0 <_vfiprintf_r+0x1ac>
 801047a:	9b03      	ldr	r3, [sp, #12]
 801047c:	1d1a      	adds	r2, r3, #4
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	9203      	str	r2, [sp, #12]
 8010482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010486:	3402      	adds	r4, #2
 8010488:	9305      	str	r3, [sp, #20]
 801048a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010560 <_vfiprintf_r+0x22c>
 801048e:	7821      	ldrb	r1, [r4, #0]
 8010490:	2203      	movs	r2, #3
 8010492:	4650      	mov	r0, sl
 8010494:	f7ef fea4 	bl	80001e0 <memchr>
 8010498:	b138      	cbz	r0, 80104aa <_vfiprintf_r+0x176>
 801049a:	9b04      	ldr	r3, [sp, #16]
 801049c:	eba0 000a 	sub.w	r0, r0, sl
 80104a0:	2240      	movs	r2, #64	@ 0x40
 80104a2:	4082      	lsls	r2, r0
 80104a4:	4313      	orrs	r3, r2
 80104a6:	3401      	adds	r4, #1
 80104a8:	9304      	str	r3, [sp, #16]
 80104aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ae:	4829      	ldr	r0, [pc, #164]	@ (8010554 <_vfiprintf_r+0x220>)
 80104b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104b4:	2206      	movs	r2, #6
 80104b6:	f7ef fe93 	bl	80001e0 <memchr>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d03f      	beq.n	801053e <_vfiprintf_r+0x20a>
 80104be:	4b26      	ldr	r3, [pc, #152]	@ (8010558 <_vfiprintf_r+0x224>)
 80104c0:	bb1b      	cbnz	r3, 801050a <_vfiprintf_r+0x1d6>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	3307      	adds	r3, #7
 80104c6:	f023 0307 	bic.w	r3, r3, #7
 80104ca:	3308      	adds	r3, #8
 80104cc:	9303      	str	r3, [sp, #12]
 80104ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d0:	443b      	add	r3, r7
 80104d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d4:	e76a      	b.n	80103ac <_vfiprintf_r+0x78>
 80104d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80104da:	460c      	mov	r4, r1
 80104dc:	2001      	movs	r0, #1
 80104de:	e7a8      	b.n	8010432 <_vfiprintf_r+0xfe>
 80104e0:	2300      	movs	r3, #0
 80104e2:	3401      	adds	r4, #1
 80104e4:	9305      	str	r3, [sp, #20]
 80104e6:	4619      	mov	r1, r3
 80104e8:	f04f 0c0a 	mov.w	ip, #10
 80104ec:	4620      	mov	r0, r4
 80104ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104f2:	3a30      	subs	r2, #48	@ 0x30
 80104f4:	2a09      	cmp	r2, #9
 80104f6:	d903      	bls.n	8010500 <_vfiprintf_r+0x1cc>
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d0c6      	beq.n	801048a <_vfiprintf_r+0x156>
 80104fc:	9105      	str	r1, [sp, #20]
 80104fe:	e7c4      	b.n	801048a <_vfiprintf_r+0x156>
 8010500:	fb0c 2101 	mla	r1, ip, r1, r2
 8010504:	4604      	mov	r4, r0
 8010506:	2301      	movs	r3, #1
 8010508:	e7f0      	b.n	80104ec <_vfiprintf_r+0x1b8>
 801050a:	ab03      	add	r3, sp, #12
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	462a      	mov	r2, r5
 8010510:	4b12      	ldr	r3, [pc, #72]	@ (801055c <_vfiprintf_r+0x228>)
 8010512:	a904      	add	r1, sp, #16
 8010514:	4630      	mov	r0, r6
 8010516:	f3af 8000 	nop.w
 801051a:	4607      	mov	r7, r0
 801051c:	1c78      	adds	r0, r7, #1
 801051e:	d1d6      	bne.n	80104ce <_vfiprintf_r+0x19a>
 8010520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010522:	07d9      	lsls	r1, r3, #31
 8010524:	d405      	bmi.n	8010532 <_vfiprintf_r+0x1fe>
 8010526:	89ab      	ldrh	r3, [r5, #12]
 8010528:	059a      	lsls	r2, r3, #22
 801052a:	d402      	bmi.n	8010532 <_vfiprintf_r+0x1fe>
 801052c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801052e:	f7ff fc05 	bl	800fd3c <__retarget_lock_release_recursive>
 8010532:	89ab      	ldrh	r3, [r5, #12]
 8010534:	065b      	lsls	r3, r3, #25
 8010536:	f53f af1f 	bmi.w	8010378 <_vfiprintf_r+0x44>
 801053a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801053c:	e71e      	b.n	801037c <_vfiprintf_r+0x48>
 801053e:	ab03      	add	r3, sp, #12
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	462a      	mov	r2, r5
 8010544:	4b05      	ldr	r3, [pc, #20]	@ (801055c <_vfiprintf_r+0x228>)
 8010546:	a904      	add	r1, sp, #16
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff fce5 	bl	800ff18 <_printf_i>
 801054e:	e7e4      	b.n	801051a <_vfiprintf_r+0x1e6>
 8010550:	08010c33 	.word	0x08010c33
 8010554:	08010c3d 	.word	0x08010c3d
 8010558:	00000000 	.word	0x00000000
 801055c:	08010311 	.word	0x08010311
 8010560:	08010c39 	.word	0x08010c39

08010564 <__swbuf_r>:
 8010564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010566:	460e      	mov	r6, r1
 8010568:	4614      	mov	r4, r2
 801056a:	4605      	mov	r5, r0
 801056c:	b118      	cbz	r0, 8010576 <__swbuf_r+0x12>
 801056e:	6a03      	ldr	r3, [r0, #32]
 8010570:	b90b      	cbnz	r3, 8010576 <__swbuf_r+0x12>
 8010572:	f7ff fa6d 	bl	800fa50 <__sinit>
 8010576:	69a3      	ldr	r3, [r4, #24]
 8010578:	60a3      	str	r3, [r4, #8]
 801057a:	89a3      	ldrh	r3, [r4, #12]
 801057c:	071a      	lsls	r2, r3, #28
 801057e:	d501      	bpl.n	8010584 <__swbuf_r+0x20>
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	b943      	cbnz	r3, 8010596 <__swbuf_r+0x32>
 8010584:	4621      	mov	r1, r4
 8010586:	4628      	mov	r0, r5
 8010588:	f000 f82a 	bl	80105e0 <__swsetup_r>
 801058c:	b118      	cbz	r0, 8010596 <__swbuf_r+0x32>
 801058e:	f04f 37ff 	mov.w	r7, #4294967295
 8010592:	4638      	mov	r0, r7
 8010594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010596:	6823      	ldr	r3, [r4, #0]
 8010598:	6922      	ldr	r2, [r4, #16]
 801059a:	1a98      	subs	r0, r3, r2
 801059c:	6963      	ldr	r3, [r4, #20]
 801059e:	b2f6      	uxtb	r6, r6
 80105a0:	4283      	cmp	r3, r0
 80105a2:	4637      	mov	r7, r6
 80105a4:	dc05      	bgt.n	80105b2 <__swbuf_r+0x4e>
 80105a6:	4621      	mov	r1, r4
 80105a8:	4628      	mov	r0, r5
 80105aa:	f7ff fe59 	bl	8010260 <_fflush_r>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d1ed      	bne.n	801058e <__swbuf_r+0x2a>
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	60a3      	str	r3, [r4, #8]
 80105b8:	6823      	ldr	r3, [r4, #0]
 80105ba:	1c5a      	adds	r2, r3, #1
 80105bc:	6022      	str	r2, [r4, #0]
 80105be:	701e      	strb	r6, [r3, #0]
 80105c0:	6962      	ldr	r2, [r4, #20]
 80105c2:	1c43      	adds	r3, r0, #1
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d004      	beq.n	80105d2 <__swbuf_r+0x6e>
 80105c8:	89a3      	ldrh	r3, [r4, #12]
 80105ca:	07db      	lsls	r3, r3, #31
 80105cc:	d5e1      	bpl.n	8010592 <__swbuf_r+0x2e>
 80105ce:	2e0a      	cmp	r6, #10
 80105d0:	d1df      	bne.n	8010592 <__swbuf_r+0x2e>
 80105d2:	4621      	mov	r1, r4
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7ff fe43 	bl	8010260 <_fflush_r>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d0d9      	beq.n	8010592 <__swbuf_r+0x2e>
 80105de:	e7d6      	b.n	801058e <__swbuf_r+0x2a>

080105e0 <__swsetup_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4b29      	ldr	r3, [pc, #164]	@ (8010688 <__swsetup_r+0xa8>)
 80105e4:	4605      	mov	r5, r0
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	460c      	mov	r4, r1
 80105ea:	b118      	cbz	r0, 80105f4 <__swsetup_r+0x14>
 80105ec:	6a03      	ldr	r3, [r0, #32]
 80105ee:	b90b      	cbnz	r3, 80105f4 <__swsetup_r+0x14>
 80105f0:	f7ff fa2e 	bl	800fa50 <__sinit>
 80105f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105f8:	0719      	lsls	r1, r3, #28
 80105fa:	d422      	bmi.n	8010642 <__swsetup_r+0x62>
 80105fc:	06da      	lsls	r2, r3, #27
 80105fe:	d407      	bmi.n	8010610 <__swsetup_r+0x30>
 8010600:	2209      	movs	r2, #9
 8010602:	602a      	str	r2, [r5, #0]
 8010604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	f04f 30ff 	mov.w	r0, #4294967295
 801060e:	e033      	b.n	8010678 <__swsetup_r+0x98>
 8010610:	0758      	lsls	r0, r3, #29
 8010612:	d512      	bpl.n	801063a <__swsetup_r+0x5a>
 8010614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010616:	b141      	cbz	r1, 801062a <__swsetup_r+0x4a>
 8010618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801061c:	4299      	cmp	r1, r3
 801061e:	d002      	beq.n	8010626 <__swsetup_r+0x46>
 8010620:	4628      	mov	r0, r5
 8010622:	f7ff fbb9 	bl	800fd98 <_free_r>
 8010626:	2300      	movs	r3, #0
 8010628:	6363      	str	r3, [r4, #52]	@ 0x34
 801062a:	89a3      	ldrh	r3, [r4, #12]
 801062c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	2300      	movs	r3, #0
 8010634:	6063      	str	r3, [r4, #4]
 8010636:	6923      	ldr	r3, [r4, #16]
 8010638:	6023      	str	r3, [r4, #0]
 801063a:	89a3      	ldrh	r3, [r4, #12]
 801063c:	f043 0308 	orr.w	r3, r3, #8
 8010640:	81a3      	strh	r3, [r4, #12]
 8010642:	6923      	ldr	r3, [r4, #16]
 8010644:	b94b      	cbnz	r3, 801065a <__swsetup_r+0x7a>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801064c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010650:	d003      	beq.n	801065a <__swsetup_r+0x7a>
 8010652:	4621      	mov	r1, r4
 8010654:	4628      	mov	r0, r5
 8010656:	f000 f883 	bl	8010760 <__smakebuf_r>
 801065a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801065e:	f013 0201 	ands.w	r2, r3, #1
 8010662:	d00a      	beq.n	801067a <__swsetup_r+0x9a>
 8010664:	2200      	movs	r2, #0
 8010666:	60a2      	str	r2, [r4, #8]
 8010668:	6962      	ldr	r2, [r4, #20]
 801066a:	4252      	negs	r2, r2
 801066c:	61a2      	str	r2, [r4, #24]
 801066e:	6922      	ldr	r2, [r4, #16]
 8010670:	b942      	cbnz	r2, 8010684 <__swsetup_r+0xa4>
 8010672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010676:	d1c5      	bne.n	8010604 <__swsetup_r+0x24>
 8010678:	bd38      	pop	{r3, r4, r5, pc}
 801067a:	0799      	lsls	r1, r3, #30
 801067c:	bf58      	it	pl
 801067e:	6962      	ldrpl	r2, [r4, #20]
 8010680:	60a2      	str	r2, [r4, #8]
 8010682:	e7f4      	b.n	801066e <__swsetup_r+0x8e>
 8010684:	2000      	movs	r0, #0
 8010686:	e7f7      	b.n	8010678 <__swsetup_r+0x98>
 8010688:	20000160 	.word	0x20000160

0801068c <_raise_r>:
 801068c:	291f      	cmp	r1, #31
 801068e:	b538      	push	{r3, r4, r5, lr}
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	d904      	bls.n	80106a0 <_raise_r+0x14>
 8010696:	2316      	movs	r3, #22
 8010698:	6003      	str	r3, [r0, #0]
 801069a:	f04f 30ff 	mov.w	r0, #4294967295
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80106a2:	b112      	cbz	r2, 80106aa <_raise_r+0x1e>
 80106a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106a8:	b94b      	cbnz	r3, 80106be <_raise_r+0x32>
 80106aa:	4628      	mov	r0, r5
 80106ac:	f000 f830 	bl	8010710 <_getpid_r>
 80106b0:	4622      	mov	r2, r4
 80106b2:	4601      	mov	r1, r0
 80106b4:	4628      	mov	r0, r5
 80106b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106ba:	f000 b817 	b.w	80106ec <_kill_r>
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d00a      	beq.n	80106d8 <_raise_r+0x4c>
 80106c2:	1c59      	adds	r1, r3, #1
 80106c4:	d103      	bne.n	80106ce <_raise_r+0x42>
 80106c6:	2316      	movs	r3, #22
 80106c8:	6003      	str	r3, [r0, #0]
 80106ca:	2001      	movs	r0, #1
 80106cc:	e7e7      	b.n	801069e <_raise_r+0x12>
 80106ce:	2100      	movs	r1, #0
 80106d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80106d4:	4620      	mov	r0, r4
 80106d6:	4798      	blx	r3
 80106d8:	2000      	movs	r0, #0
 80106da:	e7e0      	b.n	801069e <_raise_r+0x12>

080106dc <raise>:
 80106dc:	4b02      	ldr	r3, [pc, #8]	@ (80106e8 <raise+0xc>)
 80106de:	4601      	mov	r1, r0
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	f7ff bfd3 	b.w	801068c <_raise_r>
 80106e6:	bf00      	nop
 80106e8:	20000160 	.word	0x20000160

080106ec <_kill_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d07      	ldr	r5, [pc, #28]	@ (801070c <_kill_r+0x20>)
 80106f0:	2300      	movs	r3, #0
 80106f2:	4604      	mov	r4, r0
 80106f4:	4608      	mov	r0, r1
 80106f6:	4611      	mov	r1, r2
 80106f8:	602b      	str	r3, [r5, #0]
 80106fa:	f7f0 fc21 	bl	8000f40 <_kill>
 80106fe:	1c43      	adds	r3, r0, #1
 8010700:	d102      	bne.n	8010708 <_kill_r+0x1c>
 8010702:	682b      	ldr	r3, [r5, #0]
 8010704:	b103      	cbz	r3, 8010708 <_kill_r+0x1c>
 8010706:	6023      	str	r3, [r4, #0]
 8010708:	bd38      	pop	{r3, r4, r5, pc}
 801070a:	bf00      	nop
 801070c:	20008ca8 	.word	0x20008ca8

08010710 <_getpid_r>:
 8010710:	f7f0 bc0e 	b.w	8000f30 <_getpid>

08010714 <__swhatbuf_r>:
 8010714:	b570      	push	{r4, r5, r6, lr}
 8010716:	460c      	mov	r4, r1
 8010718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801071c:	2900      	cmp	r1, #0
 801071e:	b096      	sub	sp, #88	@ 0x58
 8010720:	4615      	mov	r5, r2
 8010722:	461e      	mov	r6, r3
 8010724:	da0d      	bge.n	8010742 <__swhatbuf_r+0x2e>
 8010726:	89a3      	ldrh	r3, [r4, #12]
 8010728:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801072c:	f04f 0100 	mov.w	r1, #0
 8010730:	bf14      	ite	ne
 8010732:	2340      	movne	r3, #64	@ 0x40
 8010734:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010738:	2000      	movs	r0, #0
 801073a:	6031      	str	r1, [r6, #0]
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	b016      	add	sp, #88	@ 0x58
 8010740:	bd70      	pop	{r4, r5, r6, pc}
 8010742:	466a      	mov	r2, sp
 8010744:	f000 f848 	bl	80107d8 <_fstat_r>
 8010748:	2800      	cmp	r0, #0
 801074a:	dbec      	blt.n	8010726 <__swhatbuf_r+0x12>
 801074c:	9901      	ldr	r1, [sp, #4]
 801074e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010752:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010756:	4259      	negs	r1, r3
 8010758:	4159      	adcs	r1, r3
 801075a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801075e:	e7eb      	b.n	8010738 <__swhatbuf_r+0x24>

08010760 <__smakebuf_r>:
 8010760:	898b      	ldrh	r3, [r1, #12]
 8010762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010764:	079d      	lsls	r5, r3, #30
 8010766:	4606      	mov	r6, r0
 8010768:	460c      	mov	r4, r1
 801076a:	d507      	bpl.n	801077c <__smakebuf_r+0x1c>
 801076c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	6123      	str	r3, [r4, #16]
 8010774:	2301      	movs	r3, #1
 8010776:	6163      	str	r3, [r4, #20]
 8010778:	b003      	add	sp, #12
 801077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801077c:	ab01      	add	r3, sp, #4
 801077e:	466a      	mov	r2, sp
 8010780:	f7ff ffc8 	bl	8010714 <__swhatbuf_r>
 8010784:	9f00      	ldr	r7, [sp, #0]
 8010786:	4605      	mov	r5, r0
 8010788:	4639      	mov	r1, r7
 801078a:	4630      	mov	r0, r6
 801078c:	f7fe ffd4 	bl	800f738 <_malloc_r>
 8010790:	b948      	cbnz	r0, 80107a6 <__smakebuf_r+0x46>
 8010792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010796:	059a      	lsls	r2, r3, #22
 8010798:	d4ee      	bmi.n	8010778 <__smakebuf_r+0x18>
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	f043 0302 	orr.w	r3, r3, #2
 80107a2:	81a3      	strh	r3, [r4, #12]
 80107a4:	e7e2      	b.n	801076c <__smakebuf_r+0xc>
 80107a6:	89a3      	ldrh	r3, [r4, #12]
 80107a8:	6020      	str	r0, [r4, #0]
 80107aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107ae:	81a3      	strh	r3, [r4, #12]
 80107b0:	9b01      	ldr	r3, [sp, #4]
 80107b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80107b6:	b15b      	cbz	r3, 80107d0 <__smakebuf_r+0x70>
 80107b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 f81d 	bl	80107fc <_isatty_r>
 80107c2:	b128      	cbz	r0, 80107d0 <__smakebuf_r+0x70>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	f023 0303 	bic.w	r3, r3, #3
 80107ca:	f043 0301 	orr.w	r3, r3, #1
 80107ce:	81a3      	strh	r3, [r4, #12]
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	431d      	orrs	r5, r3
 80107d4:	81a5      	strh	r5, [r4, #12]
 80107d6:	e7cf      	b.n	8010778 <__smakebuf_r+0x18>

080107d8 <_fstat_r>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	4d07      	ldr	r5, [pc, #28]	@ (80107f8 <_fstat_r+0x20>)
 80107dc:	2300      	movs	r3, #0
 80107de:	4604      	mov	r4, r0
 80107e0:	4608      	mov	r0, r1
 80107e2:	4611      	mov	r1, r2
 80107e4:	602b      	str	r3, [r5, #0]
 80107e6:	f7f0 fc0b 	bl	8001000 <_fstat>
 80107ea:	1c43      	adds	r3, r0, #1
 80107ec:	d102      	bne.n	80107f4 <_fstat_r+0x1c>
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	b103      	cbz	r3, 80107f4 <_fstat_r+0x1c>
 80107f2:	6023      	str	r3, [r4, #0]
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
 80107f6:	bf00      	nop
 80107f8:	20008ca8 	.word	0x20008ca8

080107fc <_isatty_r>:
 80107fc:	b538      	push	{r3, r4, r5, lr}
 80107fe:	4d06      	ldr	r5, [pc, #24]	@ (8010818 <_isatty_r+0x1c>)
 8010800:	2300      	movs	r3, #0
 8010802:	4604      	mov	r4, r0
 8010804:	4608      	mov	r0, r1
 8010806:	602b      	str	r3, [r5, #0]
 8010808:	f7f0 fc0a 	bl	8001020 <_isatty>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_isatty_r+0x1a>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	b103      	cbz	r3, 8010816 <_isatty_r+0x1a>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	20008ca8 	.word	0x20008ca8

0801081c <_init>:
 801081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081e:	bf00      	nop
 8010820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010822:	bc08      	pop	{r3}
 8010824:	469e      	mov	lr, r3
 8010826:	4770      	bx	lr

08010828 <_fini>:
 8010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082a:	bf00      	nop
 801082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082e:	bc08      	pop	{r3}
 8010830:	469e      	mov	lr, r3
 8010832:	4770      	bx	lr
